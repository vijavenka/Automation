<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables - QA" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HTTP_REQUEST_HOST" elementType="Argument">
            <stringProp name="Argument.name">HTTP_REQUEST_HOST</stringProp>
            <stringProp name="Argument.value">${__P(webservice.ews.host,qa-api.epoints.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">localhost | bdl-api-qa-01.bigdls.com</stringProp>
          </elementProp>
          <elementProp name="HTTP_REQUEST_PORT" elementType="Argument">
            <stringProp name="Argument.name">HTTP_REQUEST_PORT</stringProp>
            <stringProp name="Argument.value">${__P(webservice.ews.port,8913)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_REQUEST_HOST2" elementType="Argument">
            <stringProp name="Argument.name">HTTP_REQUEST_HOST2</stringProp>
            <stringProp name="Argument.value">${__P(webservice.bdl.cms,qa-admin.bigdls.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_REQUEST_PORT2" elementType="Argument">
            <stringProp name="Argument.name">HTTP_REQUEST_PORT2</stringProp>
            <stringProp name="Argument.value">${__P(webservice.bdl.cms,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONTENT_API_HOST" elementType="Argument">
            <stringProp name="Argument.name">CONTENT_API_HOST</stringProp>
            <stringProp name="Argument.value">${__P(webservice.contentapi.host,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTHORIZATION_APIKEY" elementType="Argument">
            <stringProp name="Argument.name">AUTHORIZATION_APIKEY</stringProp>
            <stringProp name="Argument.value">${__P(webservice.contentapi.auth.key,pS5HEQv65nSs95aQcZvfUbxTy)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTHORIZATION_SECRET" elementType="Argument">
            <stringProp name="Argument.name">AUTHORIZATION_SECRET</stringProp>
            <stringProp name="Argument.value">${__P(webservice.contentapi.auth.secret,STCLDMDmsmevCZ18nON/0S8VISkwGndwVZpqh33Aq/k=)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ELASTICMQ_HOST" elementType="Argument">
            <stringProp name="Argument.name">ELASTICMQ_HOST</stringProp>
            <stringProp name="Argument.value">${__P(elasticmq.host,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ELASTICMQ_PORT" elementType="Argument">
            <stringProp name="Argument.name">ELASTICMQ_PORT</stringProp>
            <stringProp name="Argument.value">${__P(elasticmq.port,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SOLR_CL_HOST" elementType="Argument">
            <stringProp name="Argument.name">SOLR_CL_HOST</stringProp>
            <stringProp name="Argument.value">${__P(db.solr.host,test-proxy-qa-01.bigdls.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">bdl-api-qa-01.bigdls.com</stringProp>
          </elementProp>
          <elementProp name="SOLR_CL_PORT" elementType="Argument">
            <stringProp name="Argument.name">SOLR_CL_PORT</stringProp>
            <stringProp name="Argument.value">${__P(db.solr.port,8983)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SOLR_INDEX_DEALS" elementType="Argument">
            <stringProp name="Argument.name">SOLR_INDEX_DEALS</stringProp>
            <stringProp name="Argument.value">${__P(db.solr.index.deals,deals)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SOLR_INDEX_DEAL_LOCATIONS" elementType="Argument">
            <stringProp name="Argument.name">SOLR_INDEX_DEAL_LOCATIONS</stringProp>
            <stringProp name="Argument.value">${__P(db.solr.index.locations,deal-locations)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SOLR_INDEX_CHAINS" elementType="Argument">
            <stringProp name="Argument.name">SOLR_INDEX_CHAINS</stringProp>
            <stringProp name="Argument.value">${__P(db.solr.index.chains,chains)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SOLR_INDEX_BRANCHES" elementType="Argument">
            <stringProp name="Argument.name">SOLR_INDEX_BRANCHES</stringProp>
            <stringProp name="Argument.value">${__P(db.solr.index.branches,branches)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PSQL_HOST" elementType="Argument">
            <stringProp name="Argument.name">PSQL_HOST</stringProp>
            <stringProp name="Argument.value">${__P(db.postgresql.host,test-proxy-qa-01.bigdls.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">localhost | test-proxy-qa-01.bigdls.com</stringProp>
          </elementProp>
          <elementProp name="PSQL_PORT" elementType="Argument">
            <stringProp name="Argument.name">PSQL_PORT</stringProp>
            <stringProp name="Argument.value">${__P(db.postgresql.port,5432)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">5432        |</stringProp>
          </elementProp>
          <elementProp name="PSQL_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">PSQL_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(db.postgresql.username,bdladmin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">postgres   | bdladmin</stringProp>
          </elementProp>
          <elementProp name="PSQL_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PSQL_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(db.postgresql.userpass,tps0q1B2SZk24Sl)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">password | tps0q1B2SZk24Sl</stringProp>
          </elementProp>
          <elementProp name="MYSQL_HOST" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_HOST</stringProp>
            <stringProp name="Argument.value">${__P(db.mysql.host,test-proxy-qa-01.iatlimited.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">test-proxy-qa-01.iatlimited.com</stringProp>
          </elementProp>
          <elementProp name="MYSQL_PORT" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_PORT</stringProp>
            <stringProp name="Argument.value">${__P(db.mysql.port,3308)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(db.mysql.username,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(db.mysql.userpass,qGZ7zmhsu8Eb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIMESTAMP" elementType="Argument">
            <stringProp name="Argument.name">TIMESTAMP</stringProp>
            <stringProp name="Argument.value">${__BeanShell(long epoch = new Date().getTime(); return epoch;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_PROXY_HOST" elementType="Argument">
            <stringProp name="Argument.name">HTTP_PROXY_HOST</stringProp>
            <stringProp name="Argument.value">10.10.30.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">10.10.30.1</stringProp>
          </elementProp>
          <elementProp name="HTTP_PROXY_HOST_WRO" elementType="Argument">
            <stringProp name="Argument.name">HTTP_PROXY_HOST_WRO</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_PROXY_PORT" elementType="Argument">
            <stringProp name="Argument.name">HTTP_PROXY_PORT</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">8080</stringProp>
          </elementProp>
          <elementProp name="TIMEZONE" elementType="Argument">
            <stringProp name="Argument.name">TIMEZONE</stringProp>
            <stringProp name="Argument.value">${__P(timezone,UTC)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIMEWAIT" elementType="Argument">
            <stringProp name="Argument.name">TIMEWAIT</stringProp>
            <stringProp name="Argument.value">${__P(timewait,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">seconds</stringProp>
          </elementProp>
          <elementProp name="TIMEWAIT2" elementType="Argument">
            <stringProp name="Argument.name">TIMEWAIT2</stringProp>
            <stringProp name="Argument.value">${__P(timewait2,3000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILE_LOCATION" elementType="Argument">
            <stringProp name="Argument.name">FILE_LOCATION</stringProp>
            <stringProp name="Argument.value">${__P(file.location,C:\Users\miwanczyk\Dropbox\Public\_test_data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">${__P(file.location,C:\Users\miwanczyk\Desktop\BDL)} / Gribek: C:\Git\bdl-automated-tests\_test_data / Maciek: C:\Users\mnabozny\Desktop\gfx</stringProp>
          </elementProp>
          <elementProp name="fb_token" elementType="Argument">
            <stringProp name="Argument.name">fb_token</stringProp>
            <stringProp name="Argument.value">CAACZCYb4fFPEBAFAbHtvQWrE9XCoPTx6k5it5m7YHA5OZCUHL57eig53GAeNhkZBlg7bmvsIDokYWMQdd5ErtnVgjx7BKIZCNGYqAJuwaEiEJ8DvJZBwfEDmZBxFBDUw7sTZBI7u5nvMkJES39ZCULUL2LcKZAUqZBykW3ujaTRXIfDd4IVuBhPH1ymYSOtUiI8gPhv4ZAcz5ZAh4PROAXx67iWi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIMESTAMP" elementType="Argument">
            <stringProp name="Argument.name">TIMESTAMP</stringProp>
            <stringProp name="Argument.value">${__P(timestamp,${__BeanShell(long epoch = new Date().getTime(); return epoch;)})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
        <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
        <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySQL Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">MySQL</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/points_manager</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${MYSQL_PASSWORD}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${MYSQL_USERNAME}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Points Manager" enabled="true">
        <stringProp name="TestPlan.comments">
			
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Register new PARTNER" enabled="false">
          <stringProp name="TestPlan.comments">Adding PARTNER record for client registered in ePoints.com

S1 - Adding PARTNER record sending only required data
S2 - Adding PARTNER record sending required and some additional data
S3 - Adding PARTNER record sending full information to the system
S4 - Trying to add PARTNER record not sending any information to the system</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S1 - Adding PARTNER record sending only required data" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S1: REST: add PARTNER S1a" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;: &quot;${PARTNER_NAME}&quot;	&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/clients</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1786385470">PARTNER_NAME</stringProp>
                  <stringProp name="1108361233">PARTNER_SITEURL</stringProp>
                  <stringProp name="-1786679352">PARTNER_DESC</stringProp>
                  <stringProp name="448659749">PARTNER_EMAIL</stringProp>
                  <stringProp name="-649130195">PARTNER_LOGOURL</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-718925382">
                    <stringProp name="821450598">sample_partner_name_S1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get name" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_name</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get shortName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_shortName</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;shortName&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get apiKey" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_apiKey</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;apiKey&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get siteUrl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_siteUrl</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get logoUrl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_logoUrl</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;logoUrl&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get email" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_email</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get description" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_description</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;description&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_name</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_siteUrl</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_logoUrl</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_email</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_description</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S1: check PARTNER record" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(createdAt) *1000,
  COALESCE(updatedAt, 0),
  currentTotal,
  accessKey,
  name,
  paymentType,
  shortName,
  active,
  COALESCE(siteUrl, 0) siteUrl,
  COALESCE(description, 0) description,
  COALESCE(logoUrl, 0) logoUrl,
  version,
  COALESCE(email, 0) email,
  warningThreshold
FROM Partner
WHERE
  name= &apos;${PARTNER_NAME}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pCreatedAt,e_pUpdatedAt,e_pCurrentTotal,e_pAccessKey,e_pName,e_pPaymentType,e_pShortName,e_pActive,e_pSiteUrl,e_pDesc,e_pLogoUrl,e_pVersion,e_pEmail,e_pWarningThreshold</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: currentTotal" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pCurrentTotal_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: apiKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-848566673">${m_apiKey}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pAccessKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pName_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: paymentType" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1540924521">POST_PAY</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pPaymentType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pActive_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pSiteUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pDesc_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pLogoUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: version" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pVersion_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pEmail_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: warningThreshold" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pWarningThreshold_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S1: check PARTNER unique shortName" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  COUNT(shortName)
FROM Partner
WHERE
  shortName = ?</stringProp>
              <stringProp name="queryArguments">${m_shortName}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pShortNameCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pShortNameCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S1: check PARTNER unique accessKey" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  COUNT(accessKey)
FROM Partner
WHERE
  accessKey = ?</stringProp>
              <stringProp name="queryArguments">${m_apiKey}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pApiKeyCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pApiKeyCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S1: check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
WHERE requestType = &apos;REGISTER_PARTNER&apos;
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1479465740">REGISTER_PARTNER</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S2 - Adding PARTNER record sending required and some additional data" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S2: REST: add PARTNER S2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;: &quot;${PARTNER_NAME}&quot;,&#xd;
	&quot;siteUrl&quot;: &quot;${PARTNER_SITEURL}&quot;,&#xd;
	&quot;logoUrl&quot;: &quot;${PARTNER_LOGOURL}&quot;	&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/clients</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1786385470">PARTNER_NAME</stringProp>
                  <stringProp name="1108361233">PARTNER_SITEURL</stringProp>
                  <stringProp name="-1786679352">PARTNER_DESC</stringProp>
                  <stringProp name="448659749">PARTNER_EMAIL</stringProp>
                  <stringProp name="-649130195">PARTNER_LOGOURL</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1777424019">
                    <stringProp name="821450599">sample_partner_name_S2</stringProp>
                    <stringProp name="282700157">http://partner_site.S2</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="1145327945">http://partner.logo.url.S2</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get name" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_name</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get shortName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_shortName</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;shortName&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get apiKey" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_apiKey</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;apiKey&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get siteUrl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_siteUrl</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get logoUrl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_logoUrl</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;logoUrl&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get email" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_email</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get description" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_description</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;description&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_name</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_siteUrl</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_logoUrl</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_email</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_description</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S2: check PARTNER record" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(createdAt) *1000,
  COALESCE(updatedAt, 0),
  currentTotal,
  accessKey,
  name,
  paymentType,
  shortName,
  active,
  COALESCE(siteUrl, 0) siteUrl,
  COALESCE(description, 0) description,
  COALESCE(logoUrl, 0) logoUrl,
  version,
  COALESCE(email, 0) email,
  warningThreshold
FROM Partner
WHERE
  name= &apos;${PARTNER_NAME}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pCreatedAt,e_pUpdatedAt,e_pCurrentTotal,e_pAccessKey,e_pName,e_pPaymentType,e_pShortName,e_pActive,e_pSiteUrl,e_pDesc,e_pLogoUrl,e_pVersion,e_pEmail,e_pWarningThreshold</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: currentTotal" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pCurrentTotal_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: apiKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-848566673">${m_apiKey}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pAccessKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pName_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: paymentType" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1540924521">POST_PAY</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pPaymentType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pActive_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pSiteUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pDesc_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pLogoUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: version" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pVersion_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pEmail_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: warningThreshold" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pWarningThreshold_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S2: check PARTNER unique shortName" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  COUNT(shortName)
FROM Partner
WHERE
  shortName = ?</stringProp>
              <stringProp name="queryArguments">${m_shortName}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pShortNameCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pShortNameCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S2: check PARTNER unique accessKey" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  COUNT(accessKey)
FROM Partner
WHERE
  accessKey = ?</stringProp>
              <stringProp name="queryArguments">${m_apiKey}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pApiKeyCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pApiKeyCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S2: check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
WHERE requestType = &apos;REGISTER_PARTNER&apos;
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1479465740">REGISTER_PARTNER</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S3 - Adding PARTNER record sending full information to the system" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S3: REST: add PARTNER S3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;: &quot;${PARTNER_NAME}&quot;,&#xd;
	&quot;siteUrl&quot;: &quot;${PARTNER_SITEURL}&quot;,&#xd;
	&quot;logoUrl&quot;: &quot;${PARTNER_LOGOURL}&quot;,&#xd;
	&quot;description&quot;: &quot;${PARTNER_DESC}&quot;,&#xd;
	&quot;email&quot;: &quot;${PARTNER_EMAIL}&quot;	&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/clients</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1786385470">PARTNER_NAME</stringProp>
                  <stringProp name="1108361233">PARTNER_SITEURL</stringProp>
                  <stringProp name="-1786679352">PARTNER_DESC</stringProp>
                  <stringProp name="448659749">PARTNER_EMAIL</stringProp>
                  <stringProp name="-649130195">PARTNER_LOGOURL</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="554858882">
                    <stringProp name="821450600">sample_partner_name_S3</stringProp>
                    <stringProp name="282700158">http://partner_site.S3</stringProp>
                    <stringProp name="175959868">partner description S3</stringProp>
                    <stringProp name="2010397258">partner@email.S3</stringProp>
                    <stringProp name="1145327946">http://partner.logo.url.S3</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get name" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_name</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get shortName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_shortName</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;shortName&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get apiKey" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_apiKey</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;apiKey&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get siteUrl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_siteUrl</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get logoUrl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_logoUrl</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;logoUrl&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get email" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_email</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get description" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_description</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;description&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_name</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_siteUrl</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_logoUrl</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_email</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_description</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S3: check PARTNER record" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(createdAt) *1000,
  COALESCE(updatedAt, 0),
  currentTotal,
  accessKey,
  name,
  paymentType,
  shortName,
  active,
  COALESCE(siteUrl, 0) siteUrl,
  COALESCE(description, 0) description,
  COALESCE(logoUrl, 0) logoUrl,
  version,
  COALESCE(email, 0) email,
  warningThreshold
FROM Partner
WHERE
  name= &apos;${PARTNER_NAME}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pCreatedAt,e_pUpdatedAt,e_pCurrentTotal,e_pAccessKey,e_pName,e_pPaymentType,e_pShortName,e_pActive,e_pSiteUrl,e_pDesc,e_pLogoUrl,e_pVersion,e_pEmail,e_pWarningThreshold</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: currentTotal" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pCurrentTotal_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: apiKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-848566673">${m_apiKey}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pAccessKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pName_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: paymentType" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1540924521">POST_PAY</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pPaymentType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pActive_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pSiteUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pDesc_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pLogoUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: version" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pVersion_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pEmail_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: warningThreshold" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pWarningThreshold_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S3: check PARTNER unique shortName" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  COUNT(shortName)
FROM Partner
WHERE
  shortName = ?</stringProp>
              <stringProp name="queryArguments">${m_shortName}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pShortNameCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pShortNameCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S3: check PARTNER unique accessKey" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  COUNT(accessKey)
FROM Partner
WHERE
  accessKey = ?</stringProp>
              <stringProp name="queryArguments">${m_apiKey}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pApiKeyCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pApiKeyCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S3: check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
WHERE requestType = &apos;REGISTER_PARTNER&apos;
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1479465740">REGISTER_PARTNER</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S4 - Trying to add PARTNER record not sending any information to the system" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PARTNER" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
		&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/clients</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2117236020">Bad Request</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
                  <stringProp name="-1789194661">Cannot register partner without name</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
WHERE requestType = &apos;REGISTER_PARTNER&apos;
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1789194661">Cannot register partner without name</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1479465740">REGISTER_PARTNER</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="97196323">false</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Clear Test Data" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table partner" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DELETE FROM Partner where shortName like &apos;samplepartnernameS%&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add new TAG" enabled="true">
          <stringProp name="TestPlan.comments">Adding pre-defined TAG for client registered in ePoints.com

S1 - Adding pre-defined TAG for client registered in ePoints.com with frequency MONTHLY, DAILY, WEEKLY, ONCE
S2 - Adding pre-defined TAG for client registered in ePoints.com with NAME that exists in TAG record of another client
S3 - Adding pre-defined TAG for client registered in ePoints.com with missing TAG description, image url and auto confirm
S4 - Adding pre-defined TAG for client registered in ePoints.com with frequency NONE
S5 - Adding pre-defined TAG for client registered in ePoints.com with frequency NONE and 0 CAP points

S6 - (S1 required) Trying to add pre-defined TAG for client registered in ePoints.com with same tag name as one existing for the client
S9 - Trying to add pre-defined TAG for INACTIVE client registered in ePoints.com				
S10 - Trying to add pre-defined TAG for client with UNKNOWN accessKey in ePoints.com
S11 - Trying to add pre-defined TAG for client registered in ePoints.com with no NAME/TAGKEY parameter
S12 - Trying to add pre-defined TAG for client registered in ePoints.com with empty NAME/TAGKEY parameter
S14 - Trying to add pre-defined TAG for client registered in ePoints.com with frequency MONTHLY and 0 CAP points
S15 - Trying to add pre-defined TAG for client registered in ePoints.com with no frequency
S16 - Trying to add pre-defined TAG for client registered in ePoints.com with empty frequency
S17 - Trying to add pre-defined TAG for client registered in ePoints.com with negative CAP points
S18 - Trying to add pre-defined TAG for client registered in ePoints.com with empty ACCESSKEY
S19 - Trying to add pre-defined TAG for client registered in ePoints.com with no ACCESSKEY
S20 - Trying to add pre-defined TAG for client registered in ePoints.com with incorrect frequency</stringProp>
        </GenericController>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1166006744">PARTNER_KEY</stringProp>
              <stringProp name="-644845814">REQUEST_TYPE</stringProp>
              <stringProp name="527096619">RESPONSE_CODE</stringProp>
              <stringProp name="-537176477">RESPONSE_MSG</stringProp>
              <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
              <stringProp name="48170032">TAG_NAME</stringProp>
              <stringProp name="-279121861">REST_TAG_NAME</stringProp>
              <stringProp name="-829740691">TAG_CAP</stringProp>
              <stringProp name="-840298494">REST_TAG_CAP</stringProp>
              <stringProp name="47947805">TAG_FREQ</stringProp>
              <stringProp name="-279344088">REST_TAG_FREQ</stringProp>
              <stringProp name="1489019046">TAG_IMURL</stringProp>
              <stringProp name="-67095045">REST_TAG_IMURL</stringProp>
              <stringProp name="47876150">TAG_DESC</stringProp>
              <stringProp name="-279415743">REST_TAG_DESC</stringProp>
              <stringProp name="47802196">TAG_AUTO</stringProp>
              <stringProp name="-279489697">REST_TAG_AUTO</stringProp>
              <stringProp name="-537169582">RESPONSE_TXT</stringProp>
              <stringProp name="-990639727">REQUEST_MSG</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1610046506">
                <stringProp name="-2028276314">p80aKey</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="237906090">sample_tag_monthly_S1</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="48625">100</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
                <stringProp name="233249910">http://www.img_monthly_S1.url</stringProp>
                <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
                <stringProp name="1757613068">some_description_S1</stringProp>
                <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
                <stringProp name="1567">10</stringProp>
                <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
                <stringProp name="1172734376">TAG_ALREADY_EXISTS</stringProp>
                <stringProp name="-1622506092">Tag with name=[sample_tag_monthly_S1] already exists</stringProp>
              </collectionProp>
              <collectionProp name="1618843010">
                <stringProp name="-1037514238">p4aKey</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51511">403</stringProp>
                <stringProp name="-787432487">Forbidden</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="237906098">sample_tag_monthly_S9</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="49586">200</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
                <stringProp name="234173431">http://www.img_monthly_S2.url</stringProp>
                <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
                <stringProp name="1757613069">some_description_S2</stringProp>
                <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
                <stringProp name="1598">20</stringProp>
                <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
                <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
                <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              </collectionProp>
              <collectionProp name="1466073512">
                <stringProp name="-418021806">erased_from_existance</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51511">403</stringProp>
                <stringProp name="-787432487">Forbidden</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="-1214845754">sample_tag_monthly_S10</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="50547">300</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="1281345088">INVALID_PARTNER</stringProp>
                <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              </collectionProp>
              <collectionProp name="-333963817">
                <stringProp name="-2028276314">p80aKey</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
                <stringProp name="-1113966082">Invalid tag name=[null]</stringProp>
              </collectionProp>
              <collectionProp name="-1457989606">
                <stringProp name="-2028276314">p80aKey</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="52469">500</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
                <stringProp name="-2105036123">Invalid tag name=[]</stringProp>
              </collectionProp>
              <collectionProp name="-1994879462">
                <stringProp name="-2028276314">p80aKey</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="-1214845750">sample_tag_monthly_S14</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
                <stringProp name="1018931694">Invalid tag cap=[0]</stringProp>
              </collectionProp>
              <collectionProp name="-1717947903">
                <stringProp name="-2028276314">p80aKey</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="-1214845749">sample_tag_monthly_S15</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="48780">150</stringProp>
                <stringProp name="1903145183">&quot;cap&quot;: ${TAG_CAP}</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
                <stringProp name="1485467723">Invalid tag frequency=[null]</stringProp>
              </collectionProp>
              <collectionProp name="1068328261">
                <stringProp name="-2028276314">p80aKey</stringProp>
                <stringProp name="433141802">UNKNOWN</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="-1214845748">sample_tag_monthly_S16</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="48811">160</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
                <stringProp name="-117012328">nvalid value for parameter frequency = []</stringProp>
              </collectionProp>
              <collectionProp name="-2052209344">
                <stringProp name="-2028276314">p80aKey</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="-1214845747">sample_tag_monthly_S17</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="1444">-1</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
                <stringProp name="1522107288">Invalid tag cap=[-1]</stringProp>
              </collectionProp>
              <collectionProp name="1603050064">
                <stringProp name="48">0</stringProp>
                <stringProp name="1855596983">CREATE_TAG</stringProp>
                <stringProp name="51511">403</stringProp>
                <stringProp name="-787432487">Forbidden</stringProp>
                <stringProp name="-800686344">apiKey=</stringProp>
                <stringProp name="-1214845746">sample_tag_monthly_S18</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="48873">180</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="1281345088">INVALID_PARTNER</stringProp>
                <stringProp name="-1310000741">Partner with accessKey=[] is invalid</stringProp>
              </collectionProp>
              <collectionProp name="2094016839">
                <stringProp name="48">0</stringProp>
                <stringProp name="433141802">UNKNOWN</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="-1214845745">sample_tag_monthly_S19</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="48904">190</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1954618349">MONTHLY</stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
                <stringProp name="-812877002">Required String parameter &apos;apiKey&apos; is not present.</stringProp>
              </collectionProp>
              <collectionProp name="2028731059">
                <stringProp name="-2028276314">p80aKey</stringProp>
                <stringProp name="433141802">UNKNOWN</stringProp>
                <stringProp name="51508">400</stringProp>
                <stringProp name="2117236020">Bad Request</stringProp>
                <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="-1214845723">sample_tag_monthly_S20</stringProp>
                <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
                <stringProp name="49586">200</stringProp>
                <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
                <stringProp name="1373210501">INCORRECT</stringProp>
                <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
                <stringProp name="1254256550">Invalid value for parameter frequency = [INCORRECT]</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preconditions" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Adding Partner1" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRE: REST: add PARTNER" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;: &quot;${PARTNER_NAME}&quot;	&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-1786385470">PARTNER_NAME</stringProp>
                    <stringProp name="1108361233">PARTNER_SITEURL</stringProp>
                    <stringProp name="-1786679352">PARTNER_DESC</stringProp>
                    <stringProp name="448659749">PARTNER_EMAIL</stringProp>
                    <stringProp name="-649130195">PARTNER_LOGOURL</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="755077688">
                      <stringProp name="1002268109">partner_for_tag_test1</stringProp>
                      <stringProp name="48">0</stringProp>
                      <stringProp name="48">0</stringProp>
                      <stringProp name="48">0</stringProp>
                      <stringProp name="48">0</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get name" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_name</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get shortName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_shortName</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;shortName&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get apiKey" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_apiKey</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;apiKey&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Stored PARTNER_APIKEY_1" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String api_key = vars.get(&quot;m_apiKey&quot;);

vars.put(&quot;PARTNER_APIKEY_1&quot;,api_key);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get siteUrl" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_siteUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get logoUrl" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_logoUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;logoUrl&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get email" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_email</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get description" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_description</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;description&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_name</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_siteUrl</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_logoUrl</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_email</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_description</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PRE: check PARTNER record" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(createdAt) *1000,
  COALESCE(updatedAt, 0),
  currentTotal,
  accessKey,
  name,
  paymentType,
  shortName,
  active,
  COALESCE(siteUrl, 0) siteUrl,
  COALESCE(description, 0) description,
  COALESCE(logoUrl, 0) logoUrl,
  version,
  COALESCE(email, 0) email,
  warningThreshold
FROM Partner
WHERE
  name= &apos;${PARTNER_NAME}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames">e_pCreatedAt,e_pUpdatedAt,e_pCurrentTotal,e_pAccessKey,e_pName,e_pPaymentType,e_pShortName,e_pActive,e_pSiteUrl,e_pDesc,e_pLogoUrl,e_pVersion,e_pEmail,e_pWarningThreshold</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: currentTotal" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48">0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pCurrentTotal_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: apiKey" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-848566673">${m_apiKey}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pAccessKey_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pName_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: paymentType" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1540924521">POST_PAY</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pPaymentType_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="3569038">true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pActive_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pSiteUrl_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pDesc_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pLogoUrl_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: version" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pVersion_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pEmail_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: warningThreshold" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48">0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pWarningThreshold_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Adding Partner2" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRE: REST: add PARTNER" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;: &quot;${PARTNER_NAME}&quot;	&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-1786385470">PARTNER_NAME</stringProp>
                    <stringProp name="1108361233">PARTNER_SITEURL</stringProp>
                    <stringProp name="-1786679352">PARTNER_DESC</stringProp>
                    <stringProp name="448659749">PARTNER_EMAIL</stringProp>
                    <stringProp name="-649130195">PARTNER_LOGOURL</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="1507747303">
                      <stringProp name="1002268110">partner_for_tag_test2</stringProp>
                      <stringProp name="48">0</stringProp>
                      <stringProp name="48">0</stringProp>
                      <stringProp name="48">0</stringProp>
                      <stringProp name="48">0</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get name" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_name</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get shortName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_shortName</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;shortName&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get apiKey" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_apiKey</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;apiKey&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Stored PARTNER_APIKEY_2" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String api_key = vars.get(&quot;m_apiKey&quot;);

vars.put(&quot;PARTNER_APIKEY_2&quot;,api_key);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get siteUrl" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_siteUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get logoUrl" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_logoUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;logoUrl&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get email" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_email</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get description" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_description</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;description&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_name</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_siteUrl</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_logoUrl</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_email</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">m_description</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PRE: check PARTNER record" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(createdAt) *1000,
  COALESCE(updatedAt, 0),
  currentTotal,
  accessKey,
  name,
  paymentType,
  shortName,
  active,
  COALESCE(siteUrl, 0) siteUrl,
  COALESCE(description, 0) description,
  COALESCE(logoUrl, 0) logoUrl,
  version,
  COALESCE(email, 0) email,
  warningThreshold
FROM Partner
WHERE
  name= &apos;${PARTNER_NAME}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames">e_pCreatedAt,e_pUpdatedAt,e_pCurrentTotal,e_pAccessKey,e_pName,e_pPaymentType,e_pShortName,e_pActive,e_pSiteUrl,e_pDesc,e_pLogoUrl,e_pVersion,e_pEmail,e_pWarningThreshold</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: currentTotal" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48">0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pCurrentTotal_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: apiKey" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-848566673">${m_apiKey}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pAccessKey_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1134714244">${PARTNER_NAME}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pName_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: paymentType" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1540924521">POST_PAY</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pPaymentType_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="3569038">true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pActive_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: siteUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1712929123">${PARTNER_SITEURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pSiteUrl_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: description" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1125603902">${PARTNER_DESC}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pDesc_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: logoUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1229697593">${PARTNER_LOGOURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pLogoUrl_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: version" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pVersion_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="569468047">${PARTNER_EMAIL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pEmail_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: warningThreshold" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48">0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_pWarningThreshold_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S1 - Adding pre-defined TAG for client registered in ePoints.com with frequency MONTHLY, DAILY, WEEKLY, ONCE" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Frequency" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="TAG_FREQ_1" elementType="Argument">
                  <stringProp name="Argument.name">TAG_FREQ_1</stringProp>
                  <stringProp name="Argument.value">MONTHLY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="TAG_FREQ_2" elementType="Argument">
                  <stringProp name="Argument.name">TAG_FREQ_2</stringProp>
                  <stringProp name="Argument.value">DAILY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="TAG_FREQ_3" elementType="Argument">
                  <stringProp name="Argument.name">TAG_FREQ_3</stringProp>
                  <stringProp name="Argument.value">WEEKLY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="TAG_FREQ_4" elementType="Argument">
                  <stringProp name="Argument.name">TAG_FREQ_4</stringProp>
                  <stringProp name="Argument.value">ONCE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Frequency" enabled="true">
              <stringProp name="ForeachController.inputVal">TAG_FREQ</stringProp>
              <stringProp name="ForeachController.returnVal">TAG_FREQ</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S1: REST: add TAG" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,&#xd;
	&quot;cap&quot;: ${TAG_CAP},&#xd;
	&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,&#xd;
	&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,&#xd;
	&quot;description&quot;: &quot;${TAG_DESC}&quot;,&#xd;
	&quot;autoConfirm&quot;:${TAG_AUTO}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/tags?apiKey=${PARTNER_KEY}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="48170032">TAG_NAME</stringProp>
                    <stringProp name="-829740691">TAG_CAP</stringProp>
                    <stringProp name="1489019046">TAG_IMURL</stringProp>
                    <stringProp name="47876150">TAG_DESC</stringProp>
                    <stringProp name="47802196">TAG_AUTO</stringProp>
                    <stringProp name="-1166006744">PARTNER_KEY</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-402643710">
                      <stringProp name="1997353090">sample_tag_S1_${TAG_FREQ}</stringProp>
                      <stringProp name="48625">100</stringProp>
                      <stringProp name="233249910">http://www.img_monthly_S1.url</stringProp>
                      <stringProp name="1757613068">some_description_S1</stringProp>
                      <stringProp name="1567">10</stringProp>
                      <stringProp name="-1964975080">${PARTNER_APIKEY_1}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">tagId</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S1: check TAG record" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(Tag.createdAt) *1000,
  COALESCE(Tag.updatedAt, 0),
  cap,
  frequency,
  TagKey,
  TagStatus,
  Partner.accessKey,
  COALESCE(imageUrl, 0) imageUrl,
  COALESCE(Tag.description, 0) description,
  COALESCE(Tag.autoConfirm, 0) autoConfirm
FROM Tag, Partner
WHERE
  Tag.partnerId = Partner.id
  AND Tag.id = ?</stringProp>
                <stringProp name="queryArguments">${tagId}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames">e_tagCreatedAt, e_tagUpdatedAt, e_tagCap, e_tagFreq, e_tagKey, e_tagStatus, e_tagPartnerKey, e_tagImgUrl, e_tagDesc, e_tagAuto</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
                  <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_tagCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48">0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagUpdatedAt_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagCap" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1710275961">${TAG_CAP}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagCap_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagFrequency" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1475682039">${TAG_FREQ}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagFreq_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagKey" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1468793002">${TAG_NAME}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagKey_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1925346054">ACTIVE</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagStatus_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagPartnerKey" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagPartnerKey_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagImgUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1580243118">${TAG_IMURL}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagImgUrl_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagDesc" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1477903344">${TAG_DESC}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagDesc_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagAutoConfirm" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1480195918">${TAG_AUTO}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_tagAuto_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S1: check request table" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
ORDER BY id DESC
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1855596983">CREATE_TAG</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_requestType_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="3569038">true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S2 - Adding pre-defined TAG for client registered in ePoints.com with NAME that exists in TAG record of another client" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S2: REST: add TAG" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,&#xd;
	&quot;cap&quot;: ${TAG_CAP},&#xd;
	&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,&#xd;
	&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,&#xd;
	&quot;description&quot;: &quot;${TAG_DESC}&quot;,&#xd;
	&quot;autoConfirm&quot;:${TAG_AUTO}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tags?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-829740691">TAG_CAP</stringProp>
                  <stringProp name="1489019046">TAG_IMURL</stringProp>
                  <stringProp name="47876150">TAG_DESC</stringProp>
                  <stringProp name="47802196">TAG_AUTO</stringProp>
                  <stringProp name="-1166006744">PARTNER_KEY</stringProp>
                  <stringProp name="47947805">TAG_FREQ</stringProp>
                  <stringProp name="48170032">TAG_NAME</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-2007708727">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="234173431">http://www.img_monthly_S2.url</stringProp>
                    <stringProp name="1757613069">some_description_S2</stringProp>
                    <stringProp name="1598">20</stringProp>
                    <stringProp name="-1964975049">${PARTNER_APIKEY_2}</stringProp>
                    <stringProp name="2430593">ONCE</stringProp>
                    <stringProp name="1997353090">sample_tag_S1_${TAG_FREQ}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">tagId</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S2:check TAG record" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(Tag.createdAt) *1000,
  COALESCE(Tag.updatedAt, 0),
  cap,
  frequency,
  TagKey,
  TagStatus,
  Partner.accessKey,
  COALESCE(imageUrl, 0) imageUrl,
  COALESCE(Tag.description, 0) description,
  COALESCE(Tag.autoConfirm, 0) autoConfirm
FROM Tag, Partner
WHERE
  Tag.partnerId = Partner.id
  AND Tag.id = ?</stringProp>
              <stringProp name="queryArguments">${tagId}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_tagCreatedAt, e_tagUpdatedAt, e_tagCap, e_tagFreq, e_tagKey, e_tagStatus, e_tagPartnerKey, e_tagImgUrl, e_tagDesc, e_tagAuto</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_tagCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagUpdatedAt_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagCap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1710275961">${TAG_CAP}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagCap_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagFrequency" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1475682039">${TAG_FREQ}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagFreq_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1468793002">${TAG_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagStatus" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1925346054">ACTIVE</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagStatus_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagPartnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagPartnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagImgUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1580243118">${TAG_IMURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagImgUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagDesc" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1477903344">${TAG_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagDesc_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagAutoConfirm" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1480195918">${TAG_AUTO}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagAuto_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S2: check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1855596983">CREATE_TAG</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S3 - Adding pre-defined TAG for client registered in ePoints.com with missing TAG description, image url and auto confirm" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S3: REST: add TAG" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,&#xd;
	&quot;cap&quot;: ${TAG_CAP},&#xd;
	&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tags?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-829740691">TAG_CAP</stringProp>
                  <stringProp name="1489019046">TAG_IMURL</stringProp>
                  <stringProp name="47876150">TAG_DESC</stringProp>
                  <stringProp name="47802196">TAG_AUTO</stringProp>
                  <stringProp name="-1166006744">PARTNER_KEY</stringProp>
                  <stringProp name="47947805">TAG_FREQ</stringProp>
                  <stringProp name="48170032">TAG_NAME</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-619930897">
                    <stringProp name="50547">300</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="1629">30</stringProp>
                    <stringProp name="-1964975080">${PARTNER_APIKEY_1}</stringProp>
                    <stringProp name="2430593">ONCE</stringProp>
                    <stringProp name="1410547076">sample_tag_S3_${TAG_FREQ}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">tagId</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S3:check TAG record" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(Tag.createdAt) *1000,
  COALESCE(Tag.updatedAt, 0),
  cap,
  frequency,
  TagKey,
  TagStatus,
  Partner.accessKey,
  COALESCE(imageUrl, 0) imageUrl,
  COALESCE(Tag.description, 0) description,
  COALESCE(Tag.autoConfirm, 0) autoConfirm
FROM Tag, Partner
WHERE
  Tag.partnerId = Partner.id
  AND Tag.id = ?</stringProp>
              <stringProp name="queryArguments">${tagId}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_tagCreatedAt, e_tagUpdatedAt, e_tagCap, e_tagFreq, e_tagKey, e_tagStatus, e_tagPartnerKey, e_tagImgUrl, e_tagDesc, e_tagAuto</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_tagCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagUpdatedAt_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagCap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1710275961">${TAG_CAP}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagCap_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagFrequency" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1475682039">${TAG_FREQ}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagFreq_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1468793002">${TAG_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagStatus" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1925346054">ACTIVE</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagStatus_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagPartnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagPartnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagImgUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1580243118">${TAG_IMURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagImgUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagDesc" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1477903344">${TAG_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagDesc_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagAutoConfirm" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1480195918">${TAG_AUTO}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagAuto_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S3: check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1855596983">CREATE_TAG</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S4 - Adding pre-defined TAG for client registered in ePoints.com with frequency NONE" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S4: REST: add TAG" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,&#xd;
	&quot;cap&quot;: ${TAG_CAP},&#xd;
	&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,&#xd;
	&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,&#xd;
	&quot;description&quot;: &quot;${TAG_DESC}&quot;,&#xd;
	&quot;autoConfirm&quot;:${TAG_AUTO}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tags?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-829740691">TAG_CAP</stringProp>
                  <stringProp name="1489019046">TAG_IMURL</stringProp>
                  <stringProp name="47876150">TAG_DESC</stringProp>
                  <stringProp name="47802196">TAG_AUTO</stringProp>
                  <stringProp name="-1166006744">PARTNER_KEY</stringProp>
                  <stringProp name="47947805">TAG_FREQ</stringProp>
                  <stringProp name="48170032">TAG_NAME</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1227502318">
                    <stringProp name="51508">400</stringProp>
                    <stringProp name="1078861572">http://www.img_none_S4.url</stringProp>
                    <stringProp name="1757613071">some_description_S4</stringProp>
                    <stringProp name="1660">40</stringProp>
                    <stringProp name="-1964975080">${PARTNER_APIKEY_1}</stringProp>
                    <stringProp name="2402104">NONE</stringProp>
                    <stringProp name="1117144069">sample_tag_S4_${TAG_FREQ}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">tagId</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S4:check TAG record" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(Tag.createdAt) *1000,
  COALESCE(Tag.updatedAt, 0),
  cap,
  frequency,
  TagKey,
  TagStatus,
  Partner.accessKey,
  COALESCE(imageUrl, 0) imageUrl,
  COALESCE(Tag.description, 0) description,
  COALESCE(Tag.autoConfirm, 0) autoConfirm
FROM Tag, Partner
WHERE
  Tag.partnerId = Partner.id
  AND Tag.id = ?</stringProp>
              <stringProp name="queryArguments">${tagId}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_tagCreatedAt, e_tagUpdatedAt, e_tagCap, e_tagFreq, e_tagKey, e_tagStatus, e_tagPartnerKey, e_tagImgUrl, e_tagDesc, e_tagAuto</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_tagCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagUpdatedAt_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagCap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1710275961">${TAG_CAP}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagCap_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagFrequency" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1475682039">${TAG_FREQ}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagFreq_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1468793002">${TAG_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagStatus" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1925346054">ACTIVE</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagStatus_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagPartnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagPartnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagImgUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1580243118">${TAG_IMURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagImgUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagDesc" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1477903344">${TAG_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagDesc_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagAutoConfirm" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1480195918">${TAG_AUTO}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagAuto_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S4: check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1855596983">CREATE_TAG</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S5 - Adding pre-defined TAG for client registered in ePoints.com with frequency NONE and 0 CAP points" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S5: REST: add TAG" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,&#xd;
	&quot;cap&quot;: ${TAG_CAP},&#xd;
	&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,&#xd;
	&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,&#xd;
	&quot;description&quot;: &quot;${TAG_DESC}&quot;,&#xd;
	&quot;autoConfirm&quot;:${TAG_AUTO}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tags?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-829740691">TAG_CAP</stringProp>
                  <stringProp name="1489019046">TAG_IMURL</stringProp>
                  <stringProp name="47876150">TAG_DESC</stringProp>
                  <stringProp name="47802196">TAG_AUTO</stringProp>
                  <stringProp name="-1166006744">PARTNER_KEY</stringProp>
                  <stringProp name="47947805">TAG_FREQ</stringProp>
                  <stringProp name="48170032">TAG_NAME</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="40099353">
                    <stringProp name="48">0</stringProp>
                    <stringProp name="1079785093">http://www.img_none_S5.url</stringProp>
                    <stringProp name="1757613072">some_description_S5</stringProp>
                    <stringProp name="1691">50</stringProp>
                    <stringProp name="-1964975080">${PARTNER_APIKEY_1}</stringProp>
                    <stringProp name="2402104">NONE</stringProp>
                    <stringProp name="823741062">sample_tag_S5_${TAG_FREQ}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">tagId</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S5:check TAG record" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(Tag.createdAt) *1000,
  COALESCE(Tag.updatedAt, 0),
  cap,
  frequency,
  TagKey,
  TagStatus,
  Partner.accessKey,
  COALESCE(imageUrl, 0) imageUrl,
  COALESCE(Tag.description, 0) description,
  COALESCE(Tag.autoConfirm, 0) autoConfirm
FROM Tag, Partner
WHERE
  Tag.partnerId = Partner.id
  AND Tag.id = ?</stringProp>
              <stringProp name="queryArguments">${tagId}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_tagCreatedAt, e_tagUpdatedAt, e_tagCap, e_tagFreq, e_tagKey, e_tagStatus, e_tagPartnerKey, e_tagImgUrl, e_tagDesc, e_tagAuto</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_tagCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagUpdatedAt_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagCap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1710275961">${TAG_CAP}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagCap_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagFrequency" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1475682039">${TAG_FREQ}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagFreq_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1468793002">${TAG_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagStatus" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1925346054">ACTIVE</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagStatus_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagPartnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagPartnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagImgUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1580243118">${TAG_IMURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagImgUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagDesc" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1477903344">${TAG_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagDesc_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagAutoConfirm" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1480195918">${TAG_AUTO}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagAuto_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S5: check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1855596983">CREATE_TAG</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="IN PROGRESS S6 - (S2 required) Trying to add pre-defined TAG for client registered in ePoints.com with same tag name as one existing for the client" enabled="false">
            <stringProp name="TestPlan.comments">IN PROGRESS</stringProp>
          </GenericController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="S6: Execute S2" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-9643664">Points Manager</stringProp>
                <stringProp name="-1887030181">Add new TAG</stringProp>
                <stringProp name="-227073777">S2 - Adding pre-defined TAG for client registered in ePoints.com with NAME that exists in TAG record of another client</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="S6: REST: add TAG" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,&#xd;
	&quot;cap&quot;: ${TAG_CAP},&#xd;
	&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,&#xd;
	&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,&#xd;
	&quot;description&quot;: &quot;${TAG_DESC}&quot;,&#xd;
	&quot;autoConfirm&quot;:${TAG_AUTO}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tags?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-829740691">TAG_CAP</stringProp>
                  <stringProp name="1489019046">TAG_IMURL</stringProp>
                  <stringProp name="47876150">TAG_DESC</stringProp>
                  <stringProp name="47802196">TAG_AUTO</stringProp>
                  <stringProp name="-1166006744">PARTNER_KEY</stringProp>
                  <stringProp name="47947805">TAG_FREQ</stringProp>
                  <stringProp name="48170032">TAG_NAME</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-2007708727">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="234173431">http://www.img_monthly_S2.url</stringProp>
                    <stringProp name="1757613069">some_description_S2</stringProp>
                    <stringProp name="1598">20</stringProp>
                    <stringProp name="-1964975049">${PARTNER_APIKEY_2}</stringProp>
                    <stringProp name="2430593">ONCE</stringProp>
                    <stringProp name="1997353090">sample_tag_S1_${TAG_FREQ}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">tagId</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S5:check TAG record" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(Tag.createdAt) *1000,
  COALESCE(Tag.updatedAt, 0),
  cap,
  frequency,
  TagKey,
  TagStatus,
  Partner.accessKey,
  COALESCE(imageUrl, 0) imageUrl,
  COALESCE(Tag.description, 0) description,
  COALESCE(Tag.autoConfirm, 0) autoConfirm
FROM Tag, Partner
WHERE
  Tag.partnerId = Partner.id
  AND Tag.id = ?</stringProp>
              <stringProp name="queryArguments">${tagId}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_tagCreatedAt, e_tagUpdatedAt, e_tagCap, e_tagFreq, e_tagKey, e_tagStatus, e_tagPartnerKey, e_tagImgUrl, e_tagDesc, e_tagAuto</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_tagCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagUpdatedAt_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagCap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1710275961">${TAG_CAP}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagCap_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagFrequency" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1475682039">${TAG_FREQ}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagFreq_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1468793002">${TAG_NAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagStatus" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1925346054">ACTIVE</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagStatus_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagPartnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagPartnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagImgUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1580243118">${TAG_IMURL}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagImgUrl_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagDesc" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1477903344">${TAG_DESC}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagDesc_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagAutoConfirm" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1480195918">${TAG_AUTO}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_tagAuto_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="S5: check request table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM Request
ORDER BY id DESC
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1855596983">CREATE_TAG</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestType_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Postconditions" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table Tag" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DELETE FROM Tag where tagKey like &apos;sample_tag_S%&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table Partner" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DELETE FROM Partner where shortName like &apos;partnerfortagtest%&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
