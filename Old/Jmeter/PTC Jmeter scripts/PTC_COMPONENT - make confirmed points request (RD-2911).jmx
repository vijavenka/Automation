<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="PTC_COMPONENT - make confirmed points request (RD-2911) + /partners controller" enabled="true">
      <stringProp name="TestPlan.comments">PTC_COMPONENT - make confirmed points request (RD-2911) + /partners controller</stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HTTP_PROXY_HOST" elementType="Argument">
            <stringProp name="Argument.name">HTTP_PROXY_HOST</stringProp>
            <stringProp name="Argument.value">10.10.30.141</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_PROXY_PORT" elementType="Argument">
            <stringProp name="Argument.name">HTTP_PROXY_PORT</stringProp>
            <stringProp name="Argument.value">7000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_REQUEST_HOST" elementType="Argument">
            <stringProp name="Argument.name">HTTP_REQUEST_HOST</stringProp>
            <stringProp name="Argument.value">10.10.30.141</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_REQUEST_PORT" elementType="Argument">
            <stringProp name="Argument.name">HTTP_REQUEST_PORT</stringProp>
            <stringProp name="Argument.value">8917</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESPONSE_CODE" elementType="Argument">
            <stringProp name="Argument.name">RESPONSE_CODE</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="transactionId" elementType="Argument">
            <stringProp name="Argument.name">transactionId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_HOST" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_HOST</stringProp>
            <stringProp name="Argument.value">10.10.30.141</stringProp>
            <stringProp name="Argument.desc">test-proxy-qa-01.iatlimited.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_PORT" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_PORT</stringProp>
            <stringProp name="Argument.value">3306</stringProp>
            <stringProp name="Argument.desc">3308</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_USERNAME</stringProp>
            <stringProp name="Argument.value">dev</stringProp>
            <stringProp name="Argument.desc">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_PASSWORD</stringProp>
            <stringProp name="Argument.value">muppet</stringProp>
            <stringProp name="Argument.desc">qGZ7zmhsu8Eb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESPONSE_DATA" elementType="Argument">
            <stringProp name="Argument.name">RESPONSE_DATA</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">HTTP_PROXY_HOST_LOCAL:		10.10.30.141	
HTTP_PROXY_PORT_LOCAL:		7000	
HTTP_REQUEST_HOST_LOCAL:	10.10.30.141	
HTTP_REQUEST_PORT_LOCAL:	8917	</stringProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySQL points_manager Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">MySQLPM</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/points_manager</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${MYSQL_PASSWORD}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${MYSQL_USERNAME}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySQL ptc_core Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">MySQLPTC</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/ptc_core</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${MYSQL_PASSWORD}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${MYSQL_USERNAME}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="##################################################################################" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check response of /transaction controller - positive case" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1384413513000</longProp>
        <longProp name="ThreadGroup.end_time">1384413513000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check response of /transaction controller - positive case</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="970860897">apiAccessKey</stringProp>
              <stringProp name="-836030906">userId</stringProp>
              <stringProp name="-1549184699">tagName</stringProp>
              <stringProp name="908408390">clientId</stringProp>
              <stringProp name="1290182304">userIdType</stringProp>
              <stringProp name="109250890">scale</stringProp>
              <stringProp name="110119509">tagId</stringProp>
              <stringProp name="-1795632125">partnerId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-644748920">
                <stringProp name="-1733929281">wqUVZbK5iTvE8dyheUpi6kZgL</stringProp>
                <stringProp name="-1728454679">ad7046de-19f5-41fe-9a78-c0f5c6633c1c</stringProp>
                <stringProp name="-553298626">VerifoneSpa</stringProp>
                <stringProp name="-1812356887">SpaBjU</stringProp>
                <stringProp name="2616251">UUID</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="49748">257</stringProp>
                <stringProp name="1507578">1050</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomReasonText" enabled="true">
            <stringProp name="maximumValue">400000000</stringProp>
            <stringProp name="minimumValue">300000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">reasonText</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomSourceURI" enabled="true">
            <stringProp name="maximumValue">300000000</stringProp>
            <stringProp name="minimumValue">200000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">sourceURI</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomonBehalfOfId" enabled="true">
            <stringProp name="maximumValue">200000000</stringProp>
            <stringProp name="minimumValue">100000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">onBehalfOfId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionId" enabled="true">
            <stringProp name="maximumValue">100000000</stringProp>
            <stringProp name="minimumValue">1000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomMultiplier" enabled="true">
            <stringProp name="maximumValue">10</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">multiplier</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionValue" enabled="true">
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="minimumValue">10</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionValue</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /transactions controller" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;sourceURI&quot;: &quot;${sourceURI}&quot;,&#xd;
&quot;apiAccessKey&quot;: &quot;${apiAccessKey}&quot;,			&#xd;
&quot;transactionId&quot;: &quot;${transactionId}&quot;,					&#xd;
&quot;userId&quot;: &quot;${userId}&quot;,		&#xd;
&quot;tagName&quot;: &quot;${tagName}&quot;,					&#xd;
&quot;transactionValue&quot;: ${transactionValue},&#xd;
&quot;onBehalfOfId&quot;: &quot;${onBehalfOfId}&quot;,&#xd;
&quot;reasonText&quot;: &quot;${reasonText}&quot;,&#xd;
&quot;clientId&quot;: &quot;${clientId}&quot;,						&#xd;
&quot;multiplier&quot;: ${multiplier},&#xd;
&quot;userIdType&quot;: &quot;${userIdType}&quot;						&#xd;
},&#xd;
BigDecimal {&#xd;
&quot;scale&quot;: ${scale}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">	</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="put request response to variable" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">response = prev.getResponseDataAsString();
String temp = response.replace(&quot;{\&quot;pointsId\&quot;:&quot;,&quot;&quot;).replace(&quot;}&quot;,&quot;&quot;);
vars.put(&quot;RESPONSE_DATA&quot;, temp);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check response content correctness" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="466139486">pointsId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">RESPONSE_DATA</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord and validat them correctness" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">SELECT * FROM ptc_core.TransactionRecord
WHERE transactionId = &apos;${randomTransactionId}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idTR,createdAtTR,pointsIdTR,userIdTR,userTypeTR,transactionValueTR,transactionIdTR,multiplierTR,clientIdTR,onBehalfOfTR,tagNameTR,reasonTextTR,sourceURITR,pointsTR,messageTR</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="validate if all TRANSACTIONRECORD data was properly stored in database" enabled="true">
              <stringProp name="TestPlan.comments">validate if all TRANSACTIONRECORD data was properly stored in database</stringProp>
              <stringProp name="BeanShellAssertion.query">This file was not checked as writing into ptc_core.TransactionRecord not worked

//pointsId

	if( ${pointsIdTR_1} == ${RESPONSE_DATA} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;pointsIds are incorrect Points table- &quot; + ${pointsIdTR_1} + &quot; Response - &quot; + ${RESPONSE_DATA};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userId

	if( ${userIdTR_1} == ${userId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userIds are incorrect Points table- &quot; + ${userIdTR_1} + &quot; Response - &quot; + ${userId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userType

	if( ${userTypeTR_1} == ${userIdType} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userTypes are incorrect Points table- &quot; + ${userTypeTR_1} + &quot; Response - &quot; + ${userIdType};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionValue

	if( ${transactionValueTR_1} == ${transactionValue} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionValues are incorrect Points table- &quot; + ${transactionValueTR_1} + &quot; Response - &quot; + ${transactionValue};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionId

	if( ${transactionIdTR_1} == ${transactionId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionIds are incorrect Points table- &quot; + ${transactionIdTR_1} + &quot; Response - &quot; + ${transactionId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//multiplier

	if( ${multiplierTR_1} == ${multiplier} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;multipliers are incorrect Points table- &quot; + ${multiplierTR_1} + &quot; Response - &quot; + ${multiplier};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//clientId

	if( ${clientIdTR_1} == ${clientId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;clientIds are incorrect Points table- &quot; + ${clientIdTR_1} + &quot; Response - &quot; + ${clientId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//onBehalfOfId

	if( ${onBehalfOfTR_1} == ${onBehalfOfId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;onBehalfOfIds are incorrect Points table- &quot; + ${onBehalfOfTR_1} + &quot; Response - &quot; + ${onBehalfOfId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//tagName

	if( ${tagNameTR_1} == ${tagName} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;tagNames are incorrect Points table- &quot; + ${tagNameTR_1} + &quot; Response - &quot; + ${tagName};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//reasonText

	if( ${reasonTextTR_1} == ${reasonText} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${reasonTextTR_1} + &quot; Response - &quot; + ${reasonText};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//sourceURI

	if( ${sourceURITR_1} == ${sourceURI} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${sourceURITR_1} + &quot; Response - &quot; + ${sourceURI};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//points

	requestTransactionValueTotal = ${multiplier}*${transactionValue};
	if( ${pointsTR_1}==requestTransactionValueTotal )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;points are incorrect Points table- &quot; + ${pointsTR_1} + &quot; Request - &quot; + requestTransactionValueTotal;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	
	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree -------------------------------------------------------" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get tagId from points_manager.Tag" enabled="true">
            <stringProp name="dataSource">MySQLPM</stringProp>
            <stringProp name="query">SELECT id FROM points_manager.Tag
WHERE partnerId = &apos;${partnerId}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">tagIdPM</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get UserId from points_manager.User" enabled="true">
            <stringProp name="dataSource">MySQLPM</stringProp>
            <stringProp name="query">SELECT id FROM points_manager.User
WHERE userKey = &apos;${userId}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">userIdPM</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data form points_manager.Points " enabled="true">
            <stringProp name="dataSource">MySQLPM</stringProp>
            <stringProp name="query">SELECT * FROM points_manager.Points
WHERE id = &apos;${RESPONSE_DATA}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idP,createdAtP,updatedAtP,activityInfoP,deltaP,externalTransactionIdP,reasonTextP,statusP,tagIdP,partnerIdP,userIdP,balanceP,productIdP,sourceURIP,autoConfirmP,autoConfirmDateP,onBehalfOfIdP</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="validate if all POINTS data was properly stored in database" enabled="true">
              <stringProp name="TestPlan.comments">validate if all POINTS data was properly stored in database</stringProp>
              <stringProp name="BeanShellAssertion.query">//ID - ok

	if( ${idP_1} == ${RESPONSE_DATA} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;ID are incorrect Points table- &quot; + ${idP_1} + &quot; Response - &quot; + ${RESPONSE_DATA};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//activityInfo - ok

	if( ${activityInfoP_1}==${reasonText} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;ActivityInfos are incorrect Points table- &quot; + ${activityInfoP_1} + &quot; Request - &quot; + ${reasonText};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//delta - ok

	requestTransactionValueTotal = ${multiplier}*${transactionValue};
	if( ${deltaP_1}==requestTransactionValueTotal )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Deltas are incorrect Points table- &quot; + ${deltaP_1} + &quot; Request - &quot; + requestTransactionValueTotal;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}


//externalTransactionId - ok

	if( ${externalTransactionIdP_1}==${transactionId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;externalTransactionIDs are incorrect Points table- &quot; + ${externalTransactionIdP_1} + &quot; Request - &quot; + ${transactionId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}


//status - not ok
	/*
	if( ${statusP_1}==&quot;CONFIRMED&quot; )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;statuses are incorrect Points table- &quot; + ${statusP_1} + &quot; Request - &quot; + &quot;CONFIRMED&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}
	*/

//tagId -  ok, consider to get this value dynamically

	if( ${tagIdP_1}==${tagIdPM_1} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;tagIds are incorrect Points table- &quot; + ${tagIdP_1} + &quot; Request - &quot; + ${tagIdPM_1};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//partnerId - ok

	if( ${partnerIdP_1}==${partnerId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;partnerIDs are incorrect Points table- &quot; + ${partnerIdP_1} + &quot; Request - &quot; + ${partnerId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//userID - ok

	if( ${userIdP_1}==${userIdPM_1} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userIDs are incorrect Points table- &quot; + ${userIdP_1} + &quot; Request - &quot; + ${userIdPM_1};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//sourceURI - ok

	if( ${sourceURIP_1}==${sourceURI} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;sourceURIs are incorrect Points table- &quot; + ${sourceURIP_1} + &quot; Request - &quot; + ${sourceURI};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//onBehalfOf - ok

	if( ${onBehalfOfIdP_1}==${onBehalfOfId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;onBehalfOf are incorrect Points table-  &quot; + ${onBehalfOfIdP_1} + &quot; Request - &quot; + ${onBehalfOfId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}


	







</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree -------------------------------------------------------" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data from ptc_core.TransactionRecord" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">DELETE FROM ptc_core.TransactionRecord 
WHERE transactionId = &apos;uniqueId-90&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data from points_manager.Request" enabled="true">
            <stringProp name="dataSource">MySQLPM</stringProp>
            <stringProp name="query">DELETE FROM points_manager.Request 
WHERE pointsId = &apos;${RESPONSE_DATA}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data from points_manager.Points" enabled="true">
            <stringProp name="dataSource">MySQLPM</stringProp>
            <stringProp name="query">DELETE FROM points_manager.Points
WHERE id = &apos;${RESPONSE_DATA}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="##################################################################################" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check response of /transaction controller - not positive case - errors handling - invalid userId" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1384413513000</longProp>
        <longProp name="ThreadGroup.end_time">1384413513000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check response of all controller - not positive case - errors handling - invalid userId</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="970860897">apiAccessKey</stringProp>
              <stringProp name="-836030906">userId</stringProp>
              <stringProp name="-1549184699">tagName</stringProp>
              <stringProp name="908408390">clientId</stringProp>
              <stringProp name="1290182304">userIdType</stringProp>
              <stringProp name="109250890">scale</stringProp>
              <stringProp name="110119509">tagId</stringProp>
              <stringProp name="-1795632125">partnerId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="659605233">
                <stringProp name="-1733929281">wqUVZbK5iTvE8dyheUpi6kZgL</stringProp>
                <stringProp name="-188493681">invalid userId</stringProp>
                <stringProp name="-553298626">VerifoneSpa</stringProp>
                <stringProp name="-1812356887">SpaBjU</stringProp>
                <stringProp name="2616251">UUID</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="49748">257</stringProp>
                <stringProp name="1507578">1050</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomReasonText" enabled="true">
            <stringProp name="maximumValue">400000000</stringProp>
            <stringProp name="minimumValue">300000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">reasonText</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomSourceURI" enabled="true">
            <stringProp name="maximumValue">300000000</stringProp>
            <stringProp name="minimumValue">200000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">sourceURI</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomonBehalfOfId" enabled="true">
            <stringProp name="maximumValue">200000000</stringProp>
            <stringProp name="minimumValue">100000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">onBehalfOfId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionId" enabled="true">
            <stringProp name="maximumValue">100000000</stringProp>
            <stringProp name="minimumValue">1000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomMultiplier" enabled="true">
            <stringProp name="maximumValue">10</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">multiplier</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionValue" enabled="true">
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="minimumValue">10</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionValue</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /transactions controller" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;sourceURI&quot;: &quot;${sourceURI}&quot;,&#xd;
&quot;apiAccessKey&quot;: &quot;${apiAccessKey}&quot;,			&#xd;
&quot;transactionId&quot;: &quot;${transactionId}&quot;,					&#xd;
&quot;userId&quot;: &quot;${userId}&quot;,		&#xd;
&quot;tagName&quot;: &quot;${tagName}&quot;,					&#xd;
&quot;transactionValue&quot;: ${transactionValue},&#xd;
&quot;onBehalfOfId&quot;: &quot;${onBehalfOfId}&quot;,&#xd;
&quot;reasonText&quot;: &quot;${reasonText}&quot;,&#xd;
&quot;clientId&quot;: &quot;${clientId}&quot;,						&#xd;
&quot;multiplier&quot;: ${multiplier},&#xd;
&quot;userIdType&quot;: &quot;${userIdType}&quot;						&#xd;
},&#xd;
BigDecimal {&#xd;
&quot;scale&quot;: ${scale}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">	</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1579656525">INVALID_USER User with id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord and validat them correctness" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">SELECT * FROM ptc_core.TransactionRecord
WHERE transactionId = &apos;${transactionId}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idTR,createdAtTR,pointsIdTR,userIdTR,userTypeTR,transactionValueTR,transactionIdTR,multiplierTR,clientIdTR,onBehalfOfTR,tagNameTR,reasonTextTR,sourceURITR,pointsTR,messageTR</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="validate if all TRANSACTIONRECORD data was properly stored in database" enabled="true">
              <stringProp name="TestPlan.comments">validate if all TRANSACTIONRECORD data was properly stored in database</stringProp>
              <stringProp name="BeanShellAssertion.query">This file was not checked as writing into ptc_core.TransactionRecord not worked

//pointsId

	if( ${pointsIdTR_1} == ${RESPONSE_DATA} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;pointsIds are incorrect Points table- &quot; + ${pointsIdTR_1} + &quot; Response - &quot; + ${RESPONSE_DATA};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userId

	if( ${userIdTR_1} == ${userId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userIds are incorrect Points table- &quot; + ${userIdTR_1} + &quot; Response - &quot; + ${userId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userType

	if( ${userTypeTR_1} == ${userIdType} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userTypes are incorrect Points table- &quot; + ${userTypeTR_1} + &quot; Response - &quot; + ${userIdType};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionValue

	if( ${transactionValueTR_1} == ${transactionValue} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionValues are incorrect Points table- &quot; + ${transactionValueTR_1} + &quot; Response - &quot; + ${transactionValue};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionId

	if( ${transactionIdTR_1} == ${transactionId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionIds are incorrect Points table- &quot; + ${transactionIdTR_1} + &quot; Response - &quot; + ${transactionId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//multiplier

	if( ${multiplierTR_1} == ${multiplier} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;multipliers are incorrect Points table- &quot; + ${multiplierTR_1} + &quot; Response - &quot; + ${multiplier};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//clientId

	if( ${clientIdTR_1} == ${clientId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;clientIds are incorrect Points table- &quot; + ${clientIdTR_1} + &quot; Response - &quot; + ${clientId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//onBehalfOfId

	if( ${onBehalfOfTR_1} == ${onBehalfOfId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;onBehalfOfIds are incorrect Points table- &quot; + ${onBehalfOfTR_1} + &quot; Response - &quot; + ${onBehalfOfId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//tagName

	if( ${tagNameTR_1} == ${tagName} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;tagNames are incorrect Points table- &quot; + ${tagNameTR_1} + &quot; Response - &quot; + ${tagName};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//reasonText

	if( ${reasonTextTR_1} == ${reasonText} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${reasonTextTR_1} + &quot; Response - &quot; + ${reasonText};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//sourceURI

	if( ${sourceURITR_1} == ${sourceURI} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${sourceURITR_1} + &quot; Response - &quot; + ${sourceURI};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//points

	requestTransactionValueTotal = ${multiplier}*${transactionValue};
	if( ${pointsTR_1}==requestTransactionValueTotal )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;points are incorrect Points table- &quot; + ${pointsTR_1} + &quot; Request - &quot; + requestTransactionValueTotal;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

// MOST IMPORTANT IN THIS CASE##########################################################################################	
//message

	if( ${messageTR_1} == &quot;INVALID_USER User with id &quot;+${userId}+&quot; is invalid&quot; )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;message is incorrect Points table- &quot; + ${messageTR_1} + &quot; Should be - &quot; + &quot;INVALID_USER User with id &quot;+${userId}+&quot; is invalid&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	
// MOST IMPORTANT IN THIS CASE##########################################################################################	
	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree -------------------------------------------------------" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data from ptc_core.TransactionRecord" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">DELETE FROM ptc_core.TransactionRecord 
WHERE transactionId = &apos;uniqueId-90&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check response of /transaction controller - not positive case - errors handling - invalid userIdType" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1384413513000</longProp>
        <longProp name="ThreadGroup.end_time">1384413513000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check response of /transaction controller - not positive case - errors handling - invalid userIdType</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="970860897">apiAccessKey</stringProp>
              <stringProp name="-836030906">userId</stringProp>
              <stringProp name="-1549184699">tagName</stringProp>
              <stringProp name="908408390">clientId</stringProp>
              <stringProp name="1290182304">userIdType</stringProp>
              <stringProp name="109250890">scale</stringProp>
              <stringProp name="110119509">tagId</stringProp>
              <stringProp name="-1795632125">partnerId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1527676163">
                <stringProp name="-1733929281">wqUVZbK5iTvE8dyheUpi6kZgL</stringProp>
                <stringProp name="-1728454679">ad7046de-19f5-41fe-9a78-c0f5c6633c1c</stringProp>
                <stringProp name="-553298626">VerifoneSpa</stringProp>
                <stringProp name="-1812356887">SpaBjU</stringProp>
                <stringProp name="66081660">EMAIL</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="49748">257</stringProp>
                <stringProp name="1507578">1050</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomReasonText" enabled="true">
            <stringProp name="maximumValue">400000000</stringProp>
            <stringProp name="minimumValue">300000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">reasonText</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomSourceURI" enabled="true">
            <stringProp name="maximumValue">300000000</stringProp>
            <stringProp name="minimumValue">200000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">sourceURI</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomonBehalfOfId" enabled="true">
            <stringProp name="maximumValue">200000000</stringProp>
            <stringProp name="minimumValue">100000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">onBehalfOfId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionId" enabled="true">
            <stringProp name="maximumValue">100000000</stringProp>
            <stringProp name="minimumValue">1000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomMultiplier" enabled="true">
            <stringProp name="maximumValue">10</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">multiplier</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionValue" enabled="true">
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="minimumValue">10</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionValue</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /transactions controller" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;sourceURI&quot;: &quot;${sourceURI}&quot;,&#xd;
&quot;apiAccessKey&quot;: &quot;${apiAccessKey}&quot;,			&#xd;
&quot;transactionId&quot;: &quot;${transactionId}&quot;,					&#xd;
&quot;userId&quot;: &quot;${userId}&quot;,		&#xd;
&quot;tagName&quot;: &quot;${tagName}&quot;,					&#xd;
&quot;transactionValue&quot;: ${transactionValue},&#xd;
&quot;onBehalfOfId&quot;: &quot;${onBehalfOfId}&quot;,&#xd;
&quot;reasonText&quot;: &quot;${reasonText}&quot;,&#xd;
&quot;clientId&quot;: &quot;${clientId}&quot;,						&#xd;
&quot;multiplier&quot;: ${multiplier},&#xd;
&quot;userIdType&quot;: &quot;${userIdType}&quot;						&#xd;
},&#xd;
BigDecimal {&#xd;
&quot;scale&quot;: ${scale}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">	</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1579656525">INVALID_USER User with id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord and validat them correctness" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">SELECT * FROM ptc_core.TransactionRecord
WHERE transactionId = &apos;${transactionId}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idTR,createdAtTR,pointsIdTR,userIdTR,userTypeTR,transactionValueTR,transactionIdTR,multiplierTR,clientIdTR,onBehalfOfTR,tagNameTR,reasonTextTR,sourceURITR,pointsTR,messageTR</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="validate if all TRANSACTIONRECORD data was properly stored in database" enabled="true">
              <stringProp name="TestPlan.comments">validate if all TRANSACTIONRECORD data was properly stored in database</stringProp>
              <stringProp name="BeanShellAssertion.query">This file was not checked as writing into ptc_core.TransactionRecord not worked

//pointsId

	if( ${pointsIdTR_1} == ${RESPONSE_DATA} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;pointsIds are incorrect Points table- &quot; + ${pointsIdTR_1} + &quot; Response - &quot; + ${RESPONSE_DATA};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userId

	if( ${userIdTR_1} == ${userId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userIds are incorrect Points table- &quot; + ${userIdTR_1} + &quot; Response - &quot; + ${userId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userType

	if( ${userTypeTR_1} == ${userIdType} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userTypes are incorrect Points table- &quot; + ${userTypeTR_1} + &quot; Response - &quot; + ${userIdType};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionValue

	if( ${transactionValueTR_1} == ${transactionValue} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionValues are incorrect Points table- &quot; + ${transactionValueTR_1} + &quot; Response - &quot; + ${transactionValue};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionId

	if( ${transactionIdTR_1} == ${transactionId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionIds are incorrect Points table- &quot; + ${transactionIdTR_1} + &quot; Response - &quot; + ${transactionId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//multiplier

	if( ${multiplierTR_1} == ${multiplier} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;multipliers are incorrect Points table- &quot; + ${multiplierTR_1} + &quot; Response - &quot; + ${multiplier};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//clientId

	if( ${clientIdTR_1} == ${clientId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;clientIds are incorrect Points table- &quot; + ${clientIdTR_1} + &quot; Response - &quot; + ${clientId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//onBehalfOfId

	if( ${onBehalfOfTR_1} == ${onBehalfOfId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;onBehalfOfIds are incorrect Points table- &quot; + ${onBehalfOfTR_1} + &quot; Response - &quot; + ${onBehalfOfId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//tagName

	if( ${tagNameTR_1} == ${tagName} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;tagNames are incorrect Points table- &quot; + ${tagNameTR_1} + &quot; Response - &quot; + ${tagName};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//reasonText

	if( ${reasonTextTR_1} == ${reasonText} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${reasonTextTR_1} + &quot; Response - &quot; + ${reasonText};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//sourceURI

	if( ${sourceURITR_1} == ${sourceURI} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${sourceURITR_1} + &quot; Response - &quot; + ${sourceURI};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//points

	requestTransactionValueTotal = ${multiplier}*${transactionValue};
	if( ${pointsTR_1}==requestTransactionValueTotal )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;points are incorrect Points table- &quot; + ${pointsTR_1} + &quot; Request - &quot; + requestTransactionValueTotal;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

// MOST IMPORTANT IN THIS CASE##########################################################################################	
//message

	if( ${messageTR_1} == &quot;INVALID_USER User with id &quot;+${userId}+&quot; is invalid&quot; )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;message is incorrect Points table- &quot; + ${messageTR_1} + &quot; Should be - &quot; + &quot;INVALID_USER User with id &quot;+${userId}+&quot; is invalid&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	
// MOST IMPORTANT IN THIS CASE##########################################################################################	
	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree -------------------------------------------------------" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data from ptc_core.TransactionRecord" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">DELETE FROM ptc_core.TransactionRecord 
WHERE transactionId = &apos;uniqueId-90&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check response of /transaction controller - not positive case - errors handling - invalid apiAccessKey" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1384413513000</longProp>
        <longProp name="ThreadGroup.end_time">1384413513000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check response of /transaction controller - not positive case - errors handling - invalid apiAccessKey</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="970860897">apiAccessKey</stringProp>
              <stringProp name="-836030906">userId</stringProp>
              <stringProp name="-1549184699">tagName</stringProp>
              <stringProp name="908408390">clientId</stringProp>
              <stringProp name="1290182304">userIdType</stringProp>
              <stringProp name="109250890">scale</stringProp>
              <stringProp name="110119509">tagId</stringProp>
              <stringProp name="-1795632125">partnerId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1830021978">
                <stringProp name="-711184150">invalid apiAccessKey</stringProp>
                <stringProp name="-1728454679">ad7046de-19f5-41fe-9a78-c0f5c6633c1c</stringProp>
                <stringProp name="-553298626">VerifoneSpa</stringProp>
                <stringProp name="-1812356887">SpaBjU</stringProp>
                <stringProp name="2616251">UUID</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="49748">257</stringProp>
                <stringProp name="1507578">1050</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomReasonText" enabled="true">
            <stringProp name="maximumValue">400000000</stringProp>
            <stringProp name="minimumValue">300000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">reasonText</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomSourceURI" enabled="true">
            <stringProp name="maximumValue">300000000</stringProp>
            <stringProp name="minimumValue">200000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">sourceURI</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomonBehalfOfId" enabled="true">
            <stringProp name="maximumValue">200000000</stringProp>
            <stringProp name="minimumValue">100000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">onBehalfOfId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionId" enabled="true">
            <stringProp name="maximumValue">100000000</stringProp>
            <stringProp name="minimumValue">1000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomMultiplier" enabled="true">
            <stringProp name="maximumValue">10</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">multiplier</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionValue" enabled="true">
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="minimumValue">10</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionValue</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /transactions controller" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;sourceURI&quot;: &quot;${sourceURI}&quot;,&#xd;
&quot;apiAccessKey&quot;: &quot;${apiAccessKey}&quot;,			&#xd;
&quot;transactionId&quot;: &quot;${transactionId}&quot;,					&#xd;
&quot;userId&quot;: &quot;${userId}&quot;,		&#xd;
&quot;tagName&quot;: &quot;${tagName}&quot;,					&#xd;
&quot;transactionValue&quot;: ${transactionValue},&#xd;
&quot;onBehalfOfId&quot;: &quot;${onBehalfOfId}&quot;,&#xd;
&quot;reasonText&quot;: &quot;${reasonText}&quot;,&#xd;
&quot;clientId&quot;: &quot;${clientId}&quot;,						&#xd;
&quot;multiplier&quot;: ${multiplier},&#xd;
&quot;userIdType&quot;: &quot;${userIdType}&quot;						&#xd;
},&#xd;
BigDecimal {&#xd;
&quot;scale&quot;: ${scale}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">	</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1573182503">INVALID_PARTNER Partner with apiKey </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord and validat them correctness" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">SELECT * FROM ptc_core.TransactionRecord
WHERE transactionId = &apos;${transactionId}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idTR,createdAtTR,pointsIdTR,userIdTR,userTypeTR,transactionValueTR,transactionIdTR,multiplierTR,clientIdTR,onBehalfOfTR,tagNameTR,reasonTextTR,sourceURITR,pointsTR,messageTR</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="validate if all TRANSACTIONRECORD data was properly stored in database" enabled="true">
              <stringProp name="TestPlan.comments">validate if all TRANSACTIONRECORD data was properly stored in database</stringProp>
              <stringProp name="BeanShellAssertion.query">This file was not checked as writing into ptc_core.TransactionRecord not worked

//pointsId

	if( ${pointsIdTR_1} == ${RESPONSE_DATA} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;pointsIds are incorrect Points table- &quot; + ${pointsIdTR_1} + &quot; Response - &quot; + ${RESPONSE_DATA};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userId

	if( ${userIdTR_1} == ${userId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userIds are incorrect Points table- &quot; + ${userIdTR_1} + &quot; Response - &quot; + ${userId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userType

	if( ${userTypeTR_1} == ${userIdType} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userTypes are incorrect Points table- &quot; + ${userTypeTR_1} + &quot; Response - &quot; + ${userIdType};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionValue

	if( ${transactionValueTR_1} == ${transactionValue} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionValues are incorrect Points table- &quot; + ${transactionValueTR_1} + &quot; Response - &quot; + ${transactionValue};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionId

	if( ${transactionIdTR_1} == ${transactionId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionIds are incorrect Points table- &quot; + ${transactionIdTR_1} + &quot; Response - &quot; + ${transactionId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//multiplier

	if( ${multiplierTR_1} == ${multiplier} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;multipliers are incorrect Points table- &quot; + ${multiplierTR_1} + &quot; Response - &quot; + ${multiplier};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//clientId

	if( ${clientIdTR_1} == ${clientId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;clientIds are incorrect Points table- &quot; + ${clientIdTR_1} + &quot; Response - &quot; + ${clientId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//onBehalfOfId

	if( ${onBehalfOfTR_1} == ${onBehalfOfId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;onBehalfOfIds are incorrect Points table- &quot; + ${onBehalfOfTR_1} + &quot; Response - &quot; + ${onBehalfOfId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//tagName

	if( ${tagNameTR_1} == ${tagName} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;tagNames are incorrect Points table- &quot; + ${tagNameTR_1} + &quot; Response - &quot; + ${tagName};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//reasonText

	if( ${reasonTextTR_1} == ${reasonText} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${reasonTextTR_1} + &quot; Response - &quot; + ${reasonText};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//sourceURI

	if( ${sourceURITR_1} == ${sourceURI} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${sourceURITR_1} + &quot; Response - &quot; + ${sourceURI};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//points

	requestTransactionValueTotal = ${multiplier}*${transactionValue};
	if( ${pointsTR_1}==requestTransactionValueTotal )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;points are incorrect Points table- &quot; + ${pointsTR_1} + &quot; Request - &quot; + requestTransactionValueTotal;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

// MOST IMPORTANT IN THIS CASE##########################################################################################	
//message

	if( ${messageTR_1} == &quot;INVALID_PARTNER Partner with apiKey &quot;+${invalid apiAccessKey}+&quot; not exists&quot; )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;message is incorrect Points table- &quot; + ${messageTR_1} + &quot; Should be - &quot; + &quot;INVALID_PARTNER Partner with apiKey &quot;+${invalid apiAccessKey}+&quot; not exists&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	
// MOST IMPORTANT IN THIS CASE##########################################################################################	
	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree -------------------------------------------------------" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data from ptc_core.TransactionRecord" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">DELETE FROM ptc_core.TransactionRecord 
WHERE transactionId = &apos;uniqueId-90&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check response of /transaction controller - not positive case - errors handling - invalid clientId" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1384413513000</longProp>
        <longProp name="ThreadGroup.end_time">1384413513000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check response of /transaction controller - not positive case - errors handling - invalid clientId</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="970860897">apiAccessKey</stringProp>
              <stringProp name="-836030906">userId</stringProp>
              <stringProp name="-1549184699">tagName</stringProp>
              <stringProp name="908408390">clientId</stringProp>
              <stringProp name="1290182304">userIdType</stringProp>
              <stringProp name="109250890">scale</stringProp>
              <stringProp name="110119509">tagId</stringProp>
              <stringProp name="-1795632125">partnerId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-575270746">
                <stringProp name="-1733929281">wqUVZbK5iTvE8dyheUpi6kZgL</stringProp>
                <stringProp name="-1728454679">ad7046de-19f5-41fe-9a78-c0f5c6633c1c</stringProp>
                <stringProp name="-553298626">VerifoneSpa</stringProp>
                <stringProp name="421423695">invalid clientId</stringProp>
                <stringProp name="2616251">UUID</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="49748">257</stringProp>
                <stringProp name="1507578">1050</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomReasonText" enabled="true">
            <stringProp name="maximumValue">400000000</stringProp>
            <stringProp name="minimumValue">300000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">reasonText</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomSourceURI" enabled="true">
            <stringProp name="maximumValue">300000000</stringProp>
            <stringProp name="minimumValue">200000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">sourceURI</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomonBehalfOfId" enabled="true">
            <stringProp name="maximumValue">200000000</stringProp>
            <stringProp name="minimumValue">100000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">onBehalfOfId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionId" enabled="true">
            <stringProp name="maximumValue">100000000</stringProp>
            <stringProp name="minimumValue">1000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomMultiplier" enabled="true">
            <stringProp name="maximumValue">10</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">multiplier</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionValue" enabled="true">
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="minimumValue">10</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionValue</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /transactions controller" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;sourceURI&quot;: &quot;${sourceURI}&quot;,&#xd;
&quot;apiAccessKey&quot;: &quot;${apiAccessKey}&quot;,			&#xd;
&quot;transactionId&quot;: &quot;${transactionId}&quot;,					&#xd;
&quot;userId&quot;: &quot;${userId}&quot;,		&#xd;
&quot;tagName&quot;: &quot;${tagName}&quot;,					&#xd;
&quot;transactionValue&quot;: ${transactionValue},&#xd;
&quot;onBehalfOfId&quot;: &quot;${onBehalfOfId}&quot;,&#xd;
&quot;reasonText&quot;: &quot;${reasonText}&quot;,&#xd;
&quot;clientId&quot;: &quot;${clientId}&quot;,						&#xd;
&quot;multiplier&quot;: ${multiplier},&#xd;
&quot;userIdType&quot;: &quot;${userIdType}&quot;						&#xd;
},&#xd;
BigDecimal {&#xd;
&quot;scale&quot;: ${scale}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">	</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1436221145">INVALID_PARTNER Partner with apiKey</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord and validat them correctness" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">SELECT * FROM ptc_core.TransactionRecord
WHERE transactionId = &apos;${transactionId}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idTR,createdAtTR,pointsIdTR,userIdTR,userTypeTR,transactionValueTR,transactionIdTR,multiplierTR,clientIdTR,onBehalfOfTR,tagNameTR,reasonTextTR,sourceURITR,pointsTR,messageTR</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="validate if all TRANSACTIONRECORD data was properly stored in database" enabled="true">
              <stringProp name="TestPlan.comments">validate if all TRANSACTIONRECORD data was properly stored in database</stringProp>
              <stringProp name="BeanShellAssertion.query">This file was not checked as writing into ptc_core.TransactionRecord not worked

//pointsId

	if( ${pointsIdTR_1} == ${RESPONSE_DATA} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;pointsIds are incorrect Points table- &quot; + ${pointsIdTR_1} + &quot; Response - &quot; + ${RESPONSE_DATA};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userId

	if( ${userIdTR_1} == ${userId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userIds are incorrect Points table- &quot; + ${userIdTR_1} + &quot; Response - &quot; + ${userId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userType

	if( ${userTypeTR_1} == ${userIdType} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userTypes are incorrect Points table- &quot; + ${userTypeTR_1} + &quot; Response - &quot; + ${userIdType};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionValue

	if( ${transactionValueTR_1} == ${transactionValue} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionValues are incorrect Points table- &quot; + ${transactionValueTR_1} + &quot; Response - &quot; + ${transactionValue};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionId

	if( ${transactionIdTR_1} == ${transactionId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionIds are incorrect Points table- &quot; + ${transactionIdTR_1} + &quot; Response - &quot; + ${transactionId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//multiplier

	if( ${multiplierTR_1} == ${multiplier} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;multipliers are incorrect Points table- &quot; + ${multiplierTR_1} + &quot; Response - &quot; + ${multiplier};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//clientId

	if( ${clientIdTR_1} == ${clientId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;clientIds are incorrect Points table- &quot; + ${clientIdTR_1} + &quot; Response - &quot; + ${clientId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//onBehalfOfId

	if( ${onBehalfOfTR_1} == ${onBehalfOfId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;onBehalfOfIds are incorrect Points table- &quot; + ${onBehalfOfTR_1} + &quot; Response - &quot; + ${onBehalfOfId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//tagName

	if( ${tagNameTR_1} == ${tagName} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;tagNames are incorrect Points table- &quot; + ${tagNameTR_1} + &quot; Response - &quot; + ${tagName};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//reasonText

	if( ${reasonTextTR_1} == ${reasonText} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${reasonTextTR_1} + &quot; Response - &quot; + ${reasonText};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//sourceURI

	if( ${sourceURITR_1} == ${sourceURI} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${sourceURITR_1} + &quot; Response - &quot; + ${sourceURI};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//points

	requestTransactionValueTotal = ${multiplier}*${transactionValue};
	if( ${pointsTR_1}==requestTransactionValueTotal )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;points are incorrect Points table- &quot; + ${pointsTR_1} + &quot; Request - &quot; + requestTransactionValueTotal;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

// MOST IMPORTANT IN THIS CASE##########################################################################################	
//message

	if( ${messageTR_1} == &quot;INVALID_PARTNER Partner with apiKey &quot;+${invalid apiAccessKey}+&quot; not exists&quot; )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;message is incorrect Points table- &quot; + ${messageTR_1} + &quot; Should be - &quot; + &quot;INVALID_PARTNER Partner with apiKey &quot;+${invalid apiAccessKey}+&quot; not exists&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	
// MOST IMPORTANT IN THIS CASE##########################################################################################	
	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree -------------------------------------------------------" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data from ptc_core.TransactionRecord" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">DELETE FROM ptc_core.TransactionRecord 
WHERE transactionId = &apos;uniqueId-90&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check response of /transaction controller - not positive case - errors handling - invalid tagName" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1384413513000</longProp>
        <longProp name="ThreadGroup.end_time">1384413513000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check response of /transaction controller - not positive case - errors handling - invalid tagName</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="970860897">apiAccessKey</stringProp>
              <stringProp name="-836030906">userId</stringProp>
              <stringProp name="-1549184699">tagName</stringProp>
              <stringProp name="908408390">clientId</stringProp>
              <stringProp name="1290182304">userIdType</stringProp>
              <stringProp name="109250890">scale</stringProp>
              <stringProp name="110119509">tagId</stringProp>
              <stringProp name="-1795632125">partnerId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-790617172">
                <stringProp name="-1733929281">wqUVZbK5iTvE8dyheUpi6kZgL</stringProp>
                <stringProp name="-1728454679">ad7046de-19f5-41fe-9a78-c0f5c6633c1c</stringProp>
                <stringProp name="1344600092">invalid tagName</stringProp>
                <stringProp name="-1812356887">SpaBjU</stringProp>
                <stringProp name="2616251">UUID</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="49748">257</stringProp>
                <stringProp name="1507578">1050</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomReasonText" enabled="true">
            <stringProp name="maximumValue">400000000</stringProp>
            <stringProp name="minimumValue">300000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">reasonText</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomSourceURI" enabled="true">
            <stringProp name="maximumValue">300000000</stringProp>
            <stringProp name="minimumValue">200000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">sourceURI</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomonBehalfOfId" enabled="true">
            <stringProp name="maximumValue">200000000</stringProp>
            <stringProp name="minimumValue">100000000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">onBehalfOfId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionId" enabled="true">
            <stringProp name="maximumValue">100000000</stringProp>
            <stringProp name="minimumValue">1000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomMultiplier" enabled="true">
            <stringProp name="maximumValue">10</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">multiplier</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randomTransactionValue" enabled="true">
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="minimumValue">10</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">transactionValue</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /transactions controller" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;sourceURI&quot;: &quot;${sourceURI}&quot;,&#xd;
&quot;apiAccessKey&quot;: &quot;${apiAccessKey}&quot;,			&#xd;
&quot;transactionId&quot;: &quot;${transactionId}&quot;,					&#xd;
&quot;userId&quot;: &quot;${userId}&quot;,		&#xd;
&quot;tagName&quot;: &quot;${tagName}&quot;,					&#xd;
&quot;transactionValue&quot;: ${transactionValue},&#xd;
&quot;onBehalfOfId&quot;: &quot;${onBehalfOfId}&quot;,&#xd;
&quot;reasonText&quot;: &quot;${reasonText}&quot;,&#xd;
&quot;clientId&quot;: &quot;${clientId}&quot;,						&#xd;
&quot;multiplier&quot;: ${multiplier},&#xd;
&quot;userIdType&quot;: &quot;${userIdType}&quot;						&#xd;
},&#xd;
BigDecimal {&#xd;
&quot;scale&quot;: ${scale}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">	</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2042689008">EVENT_NOT_FOUND Tag with name</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord and validat them correctness" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">SELECT * FROM ptc_core.TransactionRecord
WHERE transactionId = &apos;${transactionId}&apos;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idTR,createdAtTR,pointsIdTR,userIdTR,userTypeTR,transactionValueTR,transactionIdTR,multiplierTR,clientIdTR,onBehalfOfTR,tagNameTR,reasonTextTR,sourceURITR,pointsTR,messageTR</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="validate if all TRANSACTIONRECORD data was properly stored in database" enabled="true">
              <stringProp name="TestPlan.comments">validate if all TRANSACTIONRECORD data was properly stored in database</stringProp>
              <stringProp name="BeanShellAssertion.query">This file was not checked as writing into ptc_core.TransactionRecord not worked

//pointsId

	if( ${pointsIdTR_1} == ${RESPONSE_DATA} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;pointsIds are incorrect Points table- &quot; + ${pointsIdTR_1} + &quot; Response - &quot; + ${RESPONSE_DATA};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userId

	if( ${userIdTR_1} == ${userId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userIds are incorrect Points table- &quot; + ${userIdTR_1} + &quot; Response - &quot; + ${userId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//userType

	if( ${userTypeTR_1} == ${userIdType} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;userTypes are incorrect Points table- &quot; + ${userTypeTR_1} + &quot; Response - &quot; + ${userIdType};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionValue

	if( ${transactionValueTR_1} == ${transactionValue} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionValues are incorrect Points table- &quot; + ${transactionValueTR_1} + &quot; Response - &quot; + ${transactionValue};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//transactionId

	if( ${transactionIdTR_1} == ${transactionId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;transactionIds are incorrect Points table- &quot; + ${transactionIdTR_1} + &quot; Response - &quot; + ${transactionId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//multiplier

	if( ${multiplierTR_1} == ${multiplier} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;multipliers are incorrect Points table- &quot; + ${multiplierTR_1} + &quot; Response - &quot; + ${multiplier};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

//clientId

	if( ${clientIdTR_1} == ${clientId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;clientIds are incorrect Points table- &quot; + ${clientIdTR_1} + &quot; Response - &quot; + ${clientId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//onBehalfOfId

	if( ${onBehalfOfTR_1} == ${onBehalfOfId} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;onBehalfOfIds are incorrect Points table- &quot; + ${onBehalfOfTR_1} + &quot; Response - &quot; + ${onBehalfOfId};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//tagName

	if( ${tagNameTR_1} == ${tagName} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;tagNames are incorrect Points table- &quot; + ${tagNameTR_1} + &quot; Response - &quot; + ${tagName};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//reasonText

	if( ${reasonTextTR_1} == ${reasonText} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${reasonTextTR_1} + &quot; Response - &quot; + ${reasonText};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//sourceURI

	if( ${sourceURITR_1} == ${sourceURI} )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;reasonTexts are incorrect Points table- &quot; + ${sourceURITR_1} + &quot; Response - &quot; + ${sourceURI};
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

//points

	requestTransactionValueTotal = ${multiplier}*${transactionValue};
	if( ${pointsTR_1}==requestTransactionValueTotal )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;points are incorrect Points table- &quot; + ${pointsTR_1} + &quot; Request - &quot; + requestTransactionValueTotal;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}

// MOST IMPORTANT IN THIS CASE##########################################################################################	
//message

	if( ${messageTR_1} == &quot;EVENT_NOT_FOUND Tag with name &quot;+${tagName}+&quot; not exists&quot; )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;message is incorrect Points table- &quot; + ${messageTR_1} + &quot; Should be - &quot; + &quot;EVENT_NOT_FOUND Tag with name &quot;+${tagName}+&quot; not exists&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	
// MOST IMPORTANT IN THIS CASE##########################################################################################	
	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree -------------------------------------------------------" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data from ptc_core.TransactionRecord" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">DELETE FROM ptc_core.TransactionRecord 
WHERE transactionId = &apos;uniqueId-90&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="##################################################################################" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check response of /transaction/partners controller" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1384413513000</longProp>
        <longProp name="ThreadGroup.end_time">1384413513000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check response of /transaction/partners controller</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /partners controller" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
          <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
          <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/transactions/partners</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">	</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="extract clientIds" enabled="true">
            <stringProp name="VAR">api_clientIds</stringProp>
            <stringProp name="JSONPATH">$</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract clientIds as table" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">api_clientIdsFinal</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">api_clientIds</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord" enabled="true">
          <stringProp name="dataSource">MySQLPTC</stringProp>
          <stringProp name="query">SELECT clientId, COUNT(id) AS num
FROM ptc_core.TransactionRecord
GROUP BY clientId
ORDER BY clientId</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">clientIdTR,numTR</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Scope.variable">json_count_matchNr</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="check if unique results number is the same for DB and API" enabled="true">
            <stringProp name="TestPlan.comments">check if unique results number is the same for DB and API</stringProp>
            <stringProp name="BeanShellAssertion.query">
//unique results number

	if(  vars.get(&quot;api_clientIdsFinal_matchNr&quot;).equals(vars.get(&quot;clientIdTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of elements API - &quot; +  vars.get(&quot;api_clientIdsFinal_matchNr&quot;) + &quot; DB - &quot;  + vars.get(&quot;clientIdTR_#&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	





</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="check correctness of results API-&gt;DB" enabled="true">
            <stringProp name="TestPlan.comments">check correctness of results API-&gt;DB</stringProp>
            <stringProp name="BeanShellAssertion.query">
//compare results

	for(int i=1; i&lt;=${api_clientIdsFinal_matchNr}; i++)
	{
	
		if( vars.get(&quot;api_clientIdsFinal_&quot;+i).equals(vars.get(&quot;clientIdTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;clientIds are incorrect PTC/transactions/partners -&quot; + vars.get(&quot;api_clientIdsFinal_&quot;+i) + &quot;- TransactionRecord -&quot; +  vars.get(&quot;clientIdTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	}

	





</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree ------------------------------------------------------------" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="##################################################################################" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check response of /transaction/{partner} controller" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1384413513000</longProp>
        <longProp name="ThreadGroup.end_time">1384413513000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check response of /transaction/{partner} controller</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /partners controller" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
          <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
          <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/transactions/partners</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">	</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="extract clientIds" enabled="true">
            <stringProp name="VAR">api_clientIds</stringProp>
            <stringProp name="JSONPATH">$</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract clientIds as table" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">api_clientIdsFinal</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">api_clientIds</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="For each partner check transactions" enabled="true">
          <stringProp name="ForeachController.inputVal">api_clientIdsFinal</stringProp>
          <stringProp name="ForeachController.returnVal">specifiedClientId</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get response from PTC CORE component /partners controller" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="partner" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${specifiedClientId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">partner</stringProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                </elementProp>
                <elementProp name="size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">size</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${HTTP_REQUEST_PORT}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/${specifiedClientId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">	</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="extract transactions" enabled="true">
              <stringProp name="VAR">api_transactions</stringProp>
              <stringProp name="JSONPATH">$</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionCreatedAt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionCreatedAt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;createdAt&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionPointsId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionPointsId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;pointsId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionUserId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionUserId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionUserIdType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionUserIdType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userIdType&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;transactionValue&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionMultiplier" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionMultiplier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;multiplier&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionClientId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionClientId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;clientId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionOnBehalfOfId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionOnBehalfOfId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;onBehalfOfId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionTagName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionTahName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;tagName&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="transactionReasonText" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionReasonText</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;reasonText&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionSourceURI" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionSourceURI</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;sourceURI&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionPoints" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionPoints</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;points&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: transactionMessage" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">transactionMessage</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;message&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">api_transactions</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord and compare it with AP response without messages" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">SELECT * FROM ptc_core.TransactionRecord
WHERE clientId = &apos;${specifiedClientId}&apos;
ORDER BY id ASC

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idTR,createdAtTR,pointsIdTR,userIdTR,userTypeTR,transactionValueTR,transactionIdTR,multiplierTR,clientIdTR,onBehalfOfTR,tagNameTR,reasonTextTR,sourceURITR,pointsTR,messageTR</stringProp>
            <stringProp name="TestPlan.comments">messages are done independently because it may have null value</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="check if unique results number is the same for DB and API" enabled="true">
              <stringProp name="TestPlan.comments">check if unique results number is the same for DB and API</stringProp>
              <stringProp name="BeanShellAssertion.query">
//unique results number

	if(  vars.get(&quot;transactionId_matchNr&quot;).equals(vars.get(&quot;transactionIdTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of transactionId API -&quot; +  vars.get(&quot;transactionId_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;transactionIdTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;id_matchNr&quot;).equals(vars.get(&quot;idTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of Id API -&quot; +  vars.get(&quot;id_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;idTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionCreatedAt_matchNr&quot;).equals(vars.get(&quot;createdAtTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of createdAt API -&quot; +  vars.get(&quot;transactionCreatedAt_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;createdAtTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionPointsId_matchNr&quot;).equals(vars.get(&quot;pointsIdTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of pointIds API -&quot; +  vars.get(&quot;transactionPointsId_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;pointsIdTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionUserId_matchNr&quot;).equals(vars.get(&quot;userIdTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of userIds API -&quot; +  vars.get(&quot;transactionUserId_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;userIdTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionUserIdType_matchNr&quot;).equals(vars.get(&quot;userTypeTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of userIdTypes API -&quot; +  vars.get(&quot;transactionUserIdType_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;userTypeTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionValue_matchNr&quot;).equals(vars.get(&quot;transactionValueTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of transactionValues API -&quot; +  vars.get(&quot;transactionValue_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;transactionValueTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionMultiplier_matchNr&quot;).equals(vars.get(&quot;multiplierTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of transactionMultipliers API -&quot; +  vars.get(&quot;transactionMultiplier_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;multiplierTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionClientId_matchNr&quot;).equals(vars.get(&quot;clientIdTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of clientIds API -&quot; +  vars.get(&quot;transactionClientId_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;clientIdTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionOnBehalfOfId_matchNr&quot;).equals(vars.get(&quot;onBehalfOfTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of onBehalfOfs API -&quot; +  vars.get(&quot;transactionOnBehalfOfId_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;onBehalfOfTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionTahName_matchNr&quot;).equals(vars.get(&quot;tagNameTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of tagNames API -&quot; +  vars.get(&quot;transactionTahName_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;tagNameTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionSourceURI_matchNr&quot;).equals(vars.get(&quot;sourceURITR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of sourceURIs API -&quot; +  vars.get(&quot;transactionSourceURI_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;sourceURITR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	if(  vars.get(&quot;transactionPoints_matchNr&quot;).equals(vars.get(&quot;pointsTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of points API -&quot; +  vars.get(&quot;transactionPoints_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;pointsTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="check if results from API and from DB are the same" enabled="true">
              <stringProp name="TestPlan.comments">check if unique results number is the same for DB and API</stringProp>
              <stringProp name="BeanShellAssertion.query">
//unique results number

	for(int i=1; i&lt;=${transactionId_matchNr}; i++)
	{
	//id
		if( vars.get(&quot;id_&quot;+i).equals(vars.get(&quot;idTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;ids are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;id_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;idTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	
	//pointsId
		if( vars.get(&quot;transactionPointsId_&quot;+i).equals(vars.get(&quot;pointsIdTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;points are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionPointsId_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;pointsIdTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//userId
		if( vars.get(&quot;transactionUserId_&quot;+i).equals(vars.get(&quot;userIdTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;userIds are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionUserId_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;userIdTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//userIdType
		if( vars.get(&quot;transactionUserIdType_&quot;+i).equals(vars.get(&quot;userTypeTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;userIdTypes are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionUserIdType_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;userTypeTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//transactionId
		if( vars.get(&quot;transactionId_&quot;+i).equals(vars.get(&quot;transactionIdTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;transactionIds are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionId_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;transactionIdTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//transactionValue
		if( (vars.get(&quot;transactionValueTR_&quot;+i)).contains(vars.get(&quot;transactionValue_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;transactionValues are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionValue_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;transactionValueTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//transactionMultiplier
		if( vars.get(&quot;transactionMultiplier_&quot;+i).equals(vars.get(&quot;multiplierTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;transactionMultipliers are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionMultiplier_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;multiplierTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//clientId
		if( vars.get(&quot;transactionClientId_&quot;+i).equals(vars.get(&quot;clientIdTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;clientIds are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionClientId_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;clientIdTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//onBehalfOf
		if( vars.get(&quot;transactionOnBehalfOfId_&quot;+i).equals(vars.get(&quot;onBehalfOfTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;onBehalfOfs are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionOnBehalfOfId_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;onBehalfOfTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//tagName
		if( vars.get(&quot;transactionTahName_&quot;+i).equals(vars.get(&quot;tagNameTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;tagNames are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionTahName_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;tagNameTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//sourceURI
		if( vars.get(&quot;transactionSourceURI_&quot;+i).equals(vars.get(&quot;sourceURITR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;sourceURIs are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionSourceURI_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;sourceURITR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	

	//transactionPoints
		if( vars.get(&quot;transactionPoints_&quot;+i).equals(vars.get(&quot;pointsTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;transactiPonoints are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionPoints_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;pointsTR_&quot;+i) + &quot;- for iteration -&quot; + i;
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	
	}
	










	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get data from ptc_core.TransactionRecord ony for messages which usually has null value" enabled="true">
            <stringProp name="dataSource">MySQLPTC</stringProp>
            <stringProp name="query">SELECT * FROM ptc_core.TransactionRecord
WHERE clientId = &apos;${specifiedClientId}&apos;
And message is not null
ORDER BY id ASC

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">idTR,createdAtTR,pointsIdTR,userIdTR,userTypeTR,transactionValueTR,transactionIdTR,multiplierTR,clientIdTR,onBehalfOfTR,tagNameTR,reasonTextTR,sourceURITR,pointsTR,messageTR</stringProp>
            <stringProp name="TestPlan.comments">Get data from ptc_core.TransactionRecord ony for messages which usually has null value but if some errors then string is put in this field</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="check if unique results number is the same for DB and API" enabled="true">
              <stringProp name="TestPlan.comments">check if unique results number is the same for DB and API</stringProp>
              <stringProp name="BeanShellAssertion.query">
//unique results number

	if(  vars.get(&quot;transactionMessage_matchNr&quot;).equals(vars.get(&quot;messageTR_#&quot;)) )
	{
		Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Different number of elements API -&quot; +  vars.get(&quot;transactionMessage_matchNr&quot;) + &quot;- DB -&quot;  + vars.get(&quot;messageTR_#&quot;) + &quot;- for clientName -&quot; + vars.get(&quot;specifiedClientId&quot;);
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	}	

	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="check if results from API and from DB are the same" enabled="true">
              <stringProp name="TestPlan.comments">check if unique results number is the same for DB and API</stringProp>
              <stringProp name="BeanShellAssertion.query">
	//transactionMessages
	for(int i=1; i&lt;=${transactionMessage_matchNr}; i++)
	{
		if( vars.get(&quot;transactionMessage_&quot;+i).equals(vars.get(&quot;messageTR_&quot;+i)) )
		{
			Failure = false;
		}else{
			Failure = true;
			FailureMessage = &quot;transactionMessages are incorrect PTC/transactions/{partner} -&quot; + vars.get(&quot;transactionMessage_&quot;+i) + &quot;- Points table -&quot; +  vars.get(&quot;messageTR_&quot;+i) + &quot;- for iteration -&quot; + i + &quot; for clientId -&quot; + vars.get(&quot;specifiedClientId&quot;);
			print (FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
			break;
		}	
	}










	





</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree ------------------------------------------------------------" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="##################################################################################" enabled="true"/>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
