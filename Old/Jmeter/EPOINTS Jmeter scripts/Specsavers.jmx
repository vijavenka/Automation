<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept-encoding</stringProp>
            <stringProp name="Header.value">gzip</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HTTP_PROXY_HOST" elementType="Argument">
            <stringProp name="Argument.name">HTTP_PROXY_HOST</stringProp>
            <stringProp name="Argument.value">10.10.30.163</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_PROXY_PORT" elementType="Argument">
            <stringProp name="Argument.name">HTTP_PROXY_PORT</stringProp>
            <stringProp name="Argument.value">7000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_REQUEST_HOST" elementType="Argument">
            <stringProp name="Argument.name">HTTP_REQUEST_HOST</stringProp>
            <stringProp name="Argument.value">qa-content.epoints.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_REQUEST_PORT" elementType="Argument">
            <stringProp name="Argument.name">HTTP_REQUEST_PORT</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_HOST" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_HOST</stringProp>
            <stringProp name="Argument.value">test-proxy-qa-01.iatlimited.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_PORT" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_PORT</stringProp>
            <stringProp name="Argument.value">3308</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_USERNAME</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MYSQL_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">MYSQL_PASSWORD</stringProp>
            <stringProp name="Argument.value">qGZ7zmhsu8Eb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="counterVariable" elementType="Argument">
            <stringProp name="Argument.name">counterVariable</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userEmail" elementType="Argument">
            <stringProp name="Argument.name">userEmail</stringProp>
            <stringProp name="Argument.value">emailwybitnietestowy@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userPassword" elementType="Argument">
            <stringProp name="Argument.name">userPassword</stringProp>
            <stringProp name="Argument.value">Delete777</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="incorrectUserEmail" elementType="Argument">
            <stringProp name="Argument.name">incorrectUserEmail</stringProp>
            <stringProp name="Argument.value">incorrectemailwybitnietestowy@gmail.com	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="incorrectUserPassword" elementType="Argument">
            <stringProp name="Argument.name">incorrectUserPassword</stringProp>
            <stringProp name="Argument.value">incorrectDelete777</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESPONSE_CODE" elementType="Argument">
            <stringProp name="Argument.name">RESPONSE_CODE</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESPONSE_MESSAGE" elementType="Argument">
            <stringProp name="Argument.name">RESPONSE_MESSAGE</stringProp>
            <stringProp name="Argument.value">OK</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="specsaversPartnerId" elementType="Argument">
            <stringProp name="Argument.name">specsaversPartnerId</stringProp>
            <stringProp name="Argument.value">100000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pointsAmount" elementType="Argument">
            <stringProp name="Argument.name">pointsAmount</stringProp>
            <stringProp name="Argument.value">77</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newRows" elementType="Argument">
            <stringProp name="Argument.name">newRows</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySQL Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">MySQLPM</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/points_manager</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">qGZ7zmhsu8Eb</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${MYSQL_USERNAME}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="specsavers_controller" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1391682702000</longProp>
        <longProp name="ThreadGroup.end_time">1391682702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PRECONDITIONS" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Specsavers Log in" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRE: Specsavers: POST: login request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="email" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${userEmail}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">email</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${userPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="end_user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">00c15942786d3ceb3ad0629ec2a84493</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_user_id</stringProp>
                  </elementProp>
                  <elementProp name="end_user_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">3d6b002f08af5d719611908364f673ed</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_user_secret</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/specsavers/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2524">OK</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Specsavers Get branches from MySQL" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get branches data from MySQL" enabled="true">
              <stringProp name="dataSource">MySQLPM</stringProp>
              <stringProp name="query">SELECT userKey, lastName, confirmed FROM points_manager.User WHERE registrationSiteId = &apos;${specsaversPartnerId}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">branchIdsMysql, branchNamesMysql, branchPointsMysql</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Scope.variable">json_count_matchNr</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Specsavers Get reasons from MySQL" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get reasons from MySQL" enabled="true">
              <stringProp name="dataSource">MySQLPM</stringProp>
              <stringProp name="query">SELECT DISTINCT(activityInfo) FROM points_manager.Points WHERE partnerId = &apos;${specsaversPartnerId}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">reasonsMysql</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Scope.variable">json_count_matchNr</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="login" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Specsavers login correct data" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1986088866">specsavers_controller</stringProp>
              <stringProp name="116085115">PRECONDITIONS</stringProp>
              <stringProp name="-1976737400">Specsavers Log in</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Specsavers login incorrect data" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Specsavers: POST: login request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="email" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${incorrectUserEmail}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">email</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${incorrectUserPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="end_user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">00c15942786d3ceb3ad0629ec2a84493</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_user_id</stringProp>
                  </elementProp>
                  <elementProp name="end_user_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">3d6b002f08af5d719611908364f673ed</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_user_secret</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/specsavers/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51509">401</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="785231124">Unauthorized</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="branches" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Specsavers login" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1986088866">specsavers_controller</stringProp>
              <stringProp name="116085115">PRECONDITIONS</stringProp>
              <stringProp name="-1976737400">Specsavers Log in</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Specsavers: GET: branches request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="end_user_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">00c15942786d3ceb3ad0629ec2a84493</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">end_user_id</stringProp>
                </elementProp>
                <elementProp name="end_user_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3d6b002f08af5d719611908364f673ed</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">end_user_secret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/specsavers/branches</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="JSON Format Post Processor" enabled="true"/>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: branchIds" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">branchIds</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;: &quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">solr_deal</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: branchNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">branchNames</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;: &quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">solr_deal</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Specsavers SELECT: branches from MySQL" enabled="true">
            <stringProp name="dataSource">MySQLPM</stringProp>
            <stringProp name="query">SELECT userKey, lastName FROM points_manager.User WHERE registrationSiteId = &apos;${specsaversPartnerId}&apos; AND active = &apos;1&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">branchIdsMysql, branchNamesMysql</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="assert : if all branches were properly returned" enabled="true">
            <stringProp name="BeanShellAssertion.query">int foundIds = 0;
int foundNames = 0;
Integer countMYSQLIds = Integer.parseInt(vars.get(&quot;branchIdsMysql_#&quot;));
Integer countMYSQLNames = Integer.parseInt(vars.get(&quot;branchNamesMysql_#&quot;));
Integer countAPIIds = Integer.parseInt(vars.get(&quot;branchIds_matchNr&quot;));
Integer countAPINames = Integer.parseInt(vars.get(&quot;branchNames_matchNr&quot;));
String apiId;
String mysqlId;
String apiName;
String mysqlName;

if(countMYSQLIds == countAPIIds){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;API returned wrong number of branch Ids&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}

if(countMYSQLNames == countAPINames){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;API returned wrong number of branch Names&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
//##############################################################################
for(int i=1; i&lt;=countMYSQLIds;i++){
	mysqlId = vars.get(&quot;branchIdsMysql_&quot;+i);	
	for(int j=1; j&lt;=countMYSQLIds;j++){
		apiId = vars.get(&quot;branchIds_&quot;+i);
		if(mysqlId.equals(apiId)){
			foundIds++;		
		}
	}	
}

for(int i=1; i&lt;=countMYSQLIds;i++){
	mysqlName = vars.get(&quot;branchNamesMysql_&quot;+i);	
	for(int j=1; j&lt;=countMYSQLIds;j++){
		apiId = vars.get(&quot;branchNames_&quot;+i);
		if(mysqlName.equals(apiName)){
			foundNames++;		
		}
	}	
}
//##############################################################################
if(foundIds == countMYSQLIds){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;Some ids were wrongly returned by /branches call&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}

if(foundNames == countMYSQLIds){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;Some names were wrongly returned by /branches call&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="reasons" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Specsavers login" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1986088866">specsavers_controller</stringProp>
              <stringProp name="116085115">PRECONDITIONS</stringProp>
              <stringProp name="-1976737400">Specsavers Log in</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Specsavers: GET: reasons request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="end_user_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">00c15942786d3ceb3ad0629ec2a84493</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">end_user_id</stringProp>
                </elementProp>
                <elementProp name="end_user_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3d6b002f08af5d719611908364f673ed</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">end_user_secret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/specsavers/reasons</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="JSON Format Post Processor" enabled="true"/>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: reasons" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">reasons</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">solr_deal</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get reasons from MySQL" enabled="true">
            <stringProp name="dataSource">MySQLPM</stringProp>
            <stringProp name="query">SELECT DISTINCT(activityInfo) FROM points_manager.Points WHERE partnerId = &apos;${specsaversPartnerId}&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">reasonsMysql</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">json_count_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="assert : if all reasons were properly returned" enabled="true">
            <stringProp name="BeanShellAssertion.query">int foundReasons = 0;
Integer countMYSQLReasons = Integer.parseInt(vars.get(&quot;reasonsMysql_#&quot;));
Integer countAPIReassons = Integer.parseInt(vars.get(&quot;reasons_matchNr&quot;));
String apiReason;
String mysqlReason;


if(countMYSQLReasons == countAPIReassons){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;API returned wrong number of reasons&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
//##############################################################################
for(int i=1; i&lt;=countMYSQLReasons;i++){
	mysqlReason = vars.get(&quot;reasonsMysql_&quot;+i);	
	for(int j=1; j&lt;=countMYSQLReasons;j++){
		apiReason = vars.get(&quot;reasons_&quot;+j);
		if(mysqlReason.equals(apiReason)){
			foundReasons++;		
		}
	}	
}
//##############################################################################
if(foundReasons == countMYSQLReasons){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;Some reasons were wrongly returned by /branches call&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="awardPoints" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Single branch awarded" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get branches from MYSQL" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-581097013">Specsavers Get branches from MySQL</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get reasons from MYSQL" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-109421682">Specsavers Get reasons from MySQL</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Specsavers login" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-1976737400">Specsavers Log in</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Specsavers: POST: awardPoints request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;amount&quot;: &quot;${pointsAmount}&quot;&#xd;
	&quot;branches&quot;: [&quot;${branchIdsMysql_1}&quot;]&#xd;
	&quot;reason&quot;: &quot;${reasonsMysql_1}&quot;&#xd;
	&quot;selectAll&quot;: false	&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/specsavers/awardPoints?end_user_id=00c15942786d3ceb3ad0629ec2a84493&amp;end_user_secret=3d6b002f08af5d719611908364f673ed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="post data" enabled="true">
                <collectionProp name="UserParameters.names"/>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1"/>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2524">OK</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Specsavers SELECT: points value for selected branch" enabled="true">
              <stringProp name="dataSource">MySQLPM</stringProp>
              <stringProp name="query">SELECT confirmed FROM points_manager.User WHERE userKey = &apos;${branchIdsMysql_1}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">confirmedPointsAfterReward</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Scope.variable">json_count_matchNr</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="assert : if awarded branch has proper points value" enabled="true">
              <stringProp name="BeanShellAssertion.query">
Integer oldPointsValue = Integer.parseInt(vars.get(&quot;branchPointsMysql_1&quot;));
Integer newPointsValue = Integer.parseInt(vars.get(&quot;confirmedPointsAfterReward_1&quot;));


if((oldPointsValue+77) == newPointsValue){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;Epoints were not properly added&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Specsavers SELECT: proper data from Points" enabled="true">
              <stringProp name="dataSource">MySQLPM</stringProp>
              <stringProp name="query">SELECT activityInfo,delta,externalTransactionId,onBehalfOfId,userId FROM points_manager.Points ORDER BY id DESC;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">activityInfo,delta,externalTransactionId,onBehalfOfId,userId</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Scope.variable">json_count_matchNr</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Specsavers SELECT: userKey" enabled="true">
              <stringProp name="dataSource">MySQLPM</stringProp>
              <stringProp name="query">SELECT userKey FROM points_manager.User WHERE id = &apos;${userId}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">userKey</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Scope.variable">json_count_matchNr</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="assert : if Points rows were properly added" enabled="true">
              <stringProp name="BeanShellAssertion.query">
if(vars.get(&quot;activityInfo_1&quot;) == vars.get(&quot;reasonsMysql_1&quot;)){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;Activity info is incorrect in Points table&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}

if(vars.get(&quot;delta_1&quot;) == vars.get(&quot;pointsAmount&quot;)){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;Delta is incorrect in Points table&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}

if(vars.get(&quot;externalTransactionId_1&quot;) == vars.get(&quot;userEmail&quot;)){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;External transaction id is incorrect in Points table&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}

if(vars.get(&quot;onBehalfOfId_1&quot;) == vars.get(&quot;specsaversPartnerId&quot;)){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;On Behalf of id is incorrect in Points table&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}

if(vars.get(&quot;userKey_1&quot;) == vars.get(&quot;branchIdsMysql_1&quot;)){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;User id is incorrect in Points table&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="All branches awarded" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get branches from MYSQL" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-581097013">Specsavers Get branches from MySQL</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get reasons from MYSQL" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-109421682">Specsavers Get reasons from MySQL</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Specsavers login" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-1976737400">Specsavers Log in</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Specsavers SELECT: last Points row id before awarding" enabled="true">
              <stringProp name="dataSource">MySQLPM</stringProp>
              <stringProp name="query">SELECT id FROM points_manager.Points WHERE ORDER BY id DESC;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">lastIdBeforeAwarding</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Scope.variable">json_count_matchNr</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Specsavers: POST: awardPoints request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;amount&quot;: &quot;${pointsAmount}&quot;&#xd;
	&quot;branches&quot;: [&quot;${branchIdsMysql_1}&quot;]&#xd;
	&quot;reason&quot;: &quot;${reasonsMysql_1}&quot;&#xd;
	&quot;selectAll&quot;: true	&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/specsavers/awardPoints?end_user_id=00c15942786d3ceb3ad0629ec2a84493&amp;end_user_secret=3d6b002f08af5d719611908364f673ed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="post data" enabled="true">
                <collectionProp name="UserParameters.names"/>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1"/>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2524">OK</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Specsavers SELECT: points value for all branches" enabled="true">
              <stringProp name="dataSource">MySQLPM</stringProp>
              <stringProp name="query">SELECT confirmed FROM points_manager.User WHERE registrationSiteId = &apos;${specsaversPartnerId}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">confirmedPointsAfterReward</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Scope.variable">json_count_matchNr</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="assert : if awarded branches has proper points value" enabled="true">
              <stringProp name="BeanShellAssertion.query">Integer numOfBranches = Integer.parseInt(vars.get(&quot;branchIdsMysql_#&quot;));
Integer oldPointsValue;
Integer newPointsValue; 


for(int i=1; i&lt;=numOfBranches;i++){
	oldPointsValue = Integer.parseInt(vars.get(&quot;branchPointsMysql_&quot;+i));
	newPointsValue = Integer.parseInt(vars.get(&quot;confirmedPointsAfterReward_&quot;+i));

	if((oldPointsValue+77) == newPointsValue){
	Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Branch &quot; +${branchIdsMysql_+i}+ &quot; was not properly awarded, has &quot; +newPointsValue+ &quot; points but should &quot; +oldPointsValue+77;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Specsavers SELECT: proper data from Points" enabled="true">
              <stringProp name="dataSource">MySQLPM</stringProp>
              <stringProp name="query">SELECT id,activityInfo,delta,externalTransactionId,onBehalfOfId,userId FROM points_manager.Points ORDER BY id DESC;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">id,activityInfo,delta,externalTransactionId,onBehalfOfId,userId</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Scope.variable">json_count_matchNr</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="assert : if Points rows were properly added" enabled="true">
              <stringProp name="BeanShellAssertion.query">
Integer actualPointsRowNumbers = Integer.parseInt(vars.get(&quot;id_1&quot;));
Integer pointsRowNumberBeforeAwarding = Integer.parseInt(vars.get(&quot;lastIdBeforeAwarding_1&quot;));
Integer numberOfNewRows = actualPointsRowNumbers - pointsRowNumberBeforeAwarding;
vars.put(numberOfNewRows, newRows);

for(int i=1; i&lt;=numberOfNewRows; i++){
	if(vars.get(&quot;activityInfo_&quot;+i) == vars.get(&quot;reasonsMysql_1&quot;)){
	Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Wrong reason&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
	}
}

for(int i=1; i&lt;=numberOfNewRows; i++){
	if(vars.get(&quot;delta_&quot;+i) == vars.get(&quot;pointsAmount&quot;)){
	Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Wrong delta&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
	}
}

for(int i=1; i&lt;=numberOfNewRows; i++){
	if(vars.get(&quot;externalTransactionId_&quot;+i) == vars.get(&quot;incorrectUserEmail&quot;)){
	Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Wrong external transaction id&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
	}
}

for(int i=1; i&lt;=numberOfNewRows; i++){
	if(vars.get(&quot;onBehalfOfId_&quot;+i) == vars.get(&quot;specsaversPartnerId&quot;)){
	Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Wrong on behalf of&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
	}
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${newRows}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${newRows}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">counter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Specsavers SELECT: userKey from User" enabled="true">
                <stringProp name="dataSource">MySQLPM</stringProp>
                <stringProp name="query">SELECT userKey FROM points_manager.User WHERE id = &apos;varsget(&quot;id_&quot;+${counter})&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">actualUserKey</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Scope.variable">json_count_matchNr</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="assert : if user id is proper" enabled="true">
                <stringProp name="BeanShellAssertion.query">

	if(vars.get(&quot;actualUserKey_1&quot;) == vars.get(&quot;branchIdsMysql_&quot;+${counter})){
	Failure = false;
	}else{
		Failure = true;
		FailureMessage = &quot;Wrong user id&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="New reason added" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get branches from MYSQL" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-581097013">Specsavers Get branches from MySQL</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get reasons from MYSQL" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-109421682">Specsavers Get reasons from MySQL</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Specsavers login" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-1976737400">Specsavers Log in</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Specsavers: POST: awardPoints request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;amount&quot;: &quot;${pointsAmount}&quot;&#xd;
	&quot;branches&quot;: [&quot;${branchIdsMysql_1}&quot;]&#xd;
	&quot;reason&quot;: &quot;${random_reason}&quot;&#xd;
	&quot;selectAll&quot;: true	&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/specsavers/awardPoints?end_user_id=00c15942786d3ceb3ad0629ec2a84493&amp;end_user_secret=3d6b002f08af5d719611908364f673ed</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="1977571648">random_reason</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="222588969">
                    <stringProp name="1964247739">specsavers.controller_${__P(timestamp,${__BeanShell(long epoch = new Date().getTime(); return epoch;)})}_automatedTestReason</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2524">OK</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get reasons from MYSQL" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1986088866">specsavers_controller</stringProp>
                <stringProp name="116085115">PRECONDITIONS</stringProp>
                <stringProp name="-109421682">Specsavers Get reasons from MySQL</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Specsavers: GET: reasons request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="end_user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">00c15942786d3ceb3ad0629ec2a84493</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_user_id</stringProp>
                  </elementProp>
                  <elementProp name="end_user_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">3d6b002f08af5d719611908364f673ed</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_user_secret</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HTTP_REQUEST_HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${HTTP_PROXY_HOST}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${HTTP_PROXY_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/specsavers/reasons</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2524">OK</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="JSON Format Post Processor" enabled="true"/>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract: reasons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">reasons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable">solr_deal</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="assert : if new reason was properly added " enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean newReasonFoundMySQL = false;
boolean newReasonFoundAPI = false;
Integer countMYSQLReasons = Integer.parseInt(vars.get(&quot;reasonsMysql_#&quot;));
Integer countAPIReassons = Integer.parseInt(vars.get(&quot;reasons_matchNr&quot;));
String apiReason;
String mysqlReason;


if(countMYSQLReasons == countAPIReassons){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;API returned wrong number of reasons&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
//##############################################################################
for(int i=1; i&lt;=countMYSQLReasons;i++){
	mysqlReason = vars.get(&quot;reasonsMysql_&quot;+i);	
	apiReason = vars.get(&quot;reasons_&quot;+i);
	if(${random_reason}.equals(mysqlReason)){
		newReasonFoundMySQL = true
	}
		if(${random_reason}.equals(apiReason)){
		newReasonFoundAPI = true;
	}
}
//##############################################################################
if(newReasonFoundMySQL){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;New reason was not returned by MySQL&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}

if(newReasonFoundAPI){
	Failure = false;
}else{
	Failure = true;
	FailureMessage = &quot;New reason was not returned by API&quot;;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
