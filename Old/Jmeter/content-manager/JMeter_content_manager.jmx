<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CM-DDH_S1|2|3|4|5|6|7" enabled="false">
        <stringProp name="TestPlan.comments">Getting updated/added daily deals for an external client		

User_1 - S1 - Getting DailyDeals history by external client - no additional parameters
User_2 - S2 - Getting DailyDeals history by external client - paging parameters
User_3 - S3 - Getting DailyDeals history by external client - sorting parameters (title, desc)
User_4 - S3 - Getting DailyDeals history by external client - sorting parameters (expiryDate, desc)
User_5 - S5 - Getting DailyDeals history by external client - limited by category
User_6 - S4 - Getting DailyDeals history by external client - limited by keyword
User_7 - S6 - Getting DailyDeals history by external client - created after specified timestamp
User_8 - S7 - Getting DailyDeals history by external client - limited by NONEXISTIENT category

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">8</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DAILYDEAL_SEOSLUG" elementType="Argument">
              <stringProp name="Argument.name">DAILYDEAL_SEOSLUG</stringProp>
              <stringProp name="Argument.value">daily-deal</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STORE-PRESENTATION_URL" elementType="Argument">
              <stringProp name="Argument.name">STORE-PRESENTATION_URL</stringProp>
              <stringProp name="Argument.value">http://localhost:8080</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="REST_HASH" elementType="Argument">
              <stringProp name="Argument.name">REST_HASH</stringProp>
              <stringProp name="Argument.value">bQ+zyrW2GXNWxaVnIbQ+txWy1JC577D/CPZT9z1autk=</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SOLR_HOST" elementType="Argument">
              <stringProp name="Argument.name">SOLR_HOST</stringProp>
              <stringProp name="Argument.value">10.10.30.141</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADMIN_HOST" elementType="Argument">
              <stringProp name="Argument.name">ADMIN_HOST</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTENT_API_HOST" elementType="Argument">
              <stringProp name="Argument.name">CONTENT_API_HOST</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DT_DATE_STR" elementType="Argument">
              <stringProp name="Argument.name">DT_DATE_STR</stringProp>
              <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DATE\, -1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); c.set(Calendar.MILLISECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;).format(c.getTime()) )}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DT_DATE_STR2" elementType="Argument">
              <stringProp name="Argument.name">DT_DATE_STR2</stringProp>
              <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DATE\, -1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); c.set(Calendar.MILLISECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(c.getTime()) )}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1312178872">SOLR_FQ</stringProp>
            <stringProp name="-1843443660">SOLR_Q</stringProp>
            <stringProp name="1683712677">SOLR_START</stringProp>
            <stringProp name="1716847382">SOLR_ROWS</stringProp>
            <stringProp name="1716877019">SOLR_SORT</stringProp>
            <stringProp name="-2022839318">SOLR_FQ2</stringProp>
            <stringProp name="-2022839317">SOLR_FQ3</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="955843610">REST_PAGE</stringProp>
            <stringProp name="955941260">REST_SIZE</stringProp>
            <stringProp name="-106983330">REST_KEYWORD</stringProp>
            <stringProp name="-835429307">REST_SOFTFIELD</stringProp>
            <stringProp name="1233258917">REST_SORTORDER</stringProp>
            <stringProp name="1725717469">REST_CREATEDSINCE</stringProp>
            <stringProp name="-1550160516">CATEGORY_SEO</stringProp>
            <stringProp name="505846025">REST_CATEGORY</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="380653610">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258527">&amp;rows=25</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-900760476">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="1352969787">&amp;start=60</stringProp>
              <stringProp name="-1105258501">&amp;rows=30</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596317">?page=2</stringProp>
              <stringProp name="-387176237">&amp;size=30</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-863661686">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258563">&amp;rows=10</stringProp>
              <stringProp name="-873113511">&amp;sort=s_title+asc</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176299">&amp;size=10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-830746543">&amp;sortField=title</stringProp>
              <stringProp name="-1270047463">&amp;ascending=true</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1489608113">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="1352969756">&amp;start=50</stringProp>
              <stringProp name="-1105258563">&amp;rows=10</stringProp>
              <stringProp name="-836258247">&amp;sort=d_validTo+desc</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596314">?page=5</stringProp>
              <stringProp name="-387176299">&amp;size=10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1089161944">&amp;sortField=expiryDate</stringProp>
              <stringProp name="-730209544">&amp;ascending=false</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="343624515">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258563">&amp;rows=10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176299">&amp;size=10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1729124207">suncare-and-tanning</stringProp>
              <stringProp name="-576692143">&amp;category=${CATEGORY_SEO}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1898058700">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1000509042">q=body</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258532">&amp;rows=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176268">&amp;size=20</stringProp>
              <stringProp name="113964604">&amp;keyword=body</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1634583943">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258532">&amp;rows=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2126701512">+AND+-firstAddedToIndexDate%3A[*+TO+${DT_DATE_STR}Z]</stringProp>
              <stringProp name="1567131713">+AND+-lastModifiedInIndexDate%3A[*+TO+${DT_DATE_STR}Z]</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176268">&amp;size=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="114934261">&amp;created-since=${DT_DATE_STR2}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-556790877">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258563">&amp;rows=10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176299">&amp;size=10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="808205064">&amp;category=some_false_cat</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CM-DDH_PASS" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ADMIN Query (category)" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If category provided" enabled="true">
              <stringProp name="IfController.condition">${__threadNum} == 5</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ADMIN_HOST}</stringProp>
                <stringProp name="HTTPSampler.port">8910</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
              </ConfigTestElement>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ADMIN: get category" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/categories/tree/seotitle/${CATEGORY_SEO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get contentQuery" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">solr_contentQuery</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;contentQuery&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SOLR Query" enabled="true"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="SOLR Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SOLR_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">8983</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOLR: get daily deals" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/solr/collection1/select?${__javaScript(if(&quot;${solr_contentQuery}&quot; != &quot;\${solr_contentQuery}&quot;) {&quot;q=${solr_contentQuery}&quot;} else {&quot;${SOLR_Q}&quot;})}${SOLR_FQ}${SOLR_FQ2}${SOLR_FQ3}${SOLR_SORT}${SOLR_START}${SOLR_ROWS}&amp;wt=json&amp;indent=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get titleArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_titleArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_title&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get descriptionArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_descriptionArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_description&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get categoryFromFeedExtractedArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_categoryFromFeedExtractedArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_categoryFromFeedExtracted_multiVal&quot;:\[(.*?)\],</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get expiryDateArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_expiryDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;d_validTo&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get validFromDate" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_validFromDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;d_validFrom&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get typeArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_typeArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_type&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get locationArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_locationArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_location&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get urlArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_urlArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_seoSlug&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get merchantNameArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_merchantNameArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_merchantName&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get epointsAwardedArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_epointsAwardedArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;i_epointsEarned&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get imageUrlArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_imageUrlArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_primaryImageUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get percentSavingArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_percentSavingArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;f_percentSaving&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get modifiedDate" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_modifiedDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;lastModifiedInIndexDate&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get createdDate" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_createdDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;firstAddedToIndexDate&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONTENT MANAGER Query" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">IAT 00c15942786d3ceb3ad0629ec2a84493:${REST_HASH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${CONTENT_API_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">8912</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get daily deals" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/dailydeals${REST_PAGE}${REST_SIZE}${REST_CATEGORY}${REST_KEYWORD}${REST_SOFTFIELD}${REST_SORTORDER}${REST_CREATEDSINCE}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get titleArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_titleArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;title&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get descriptionArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_descriptionArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;description&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get categoryFromFeedExtractedArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_categoryFromFeedExtractedArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;categoryFromFeed&quot;:\[(.*?)\],</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get expiryDateArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_expiryDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;expiryDate&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get validFromDateArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_validFromDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;validFromDate&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get typeArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_typeArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;type&quot;:(&quot;(.*?)&quot;|(?!null)(.*?))}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get locationArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_locationArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;location&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get urlArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_urlArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get merchantNameArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_merchantNameArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;merchantName&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get merchantLogoArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_merchantLogoArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;merchantLogo&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get multiplierArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_multiplierArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;multiplier&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get epointsAwardedArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_epointsAwardedArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;epointsAwarded&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get imageUrlArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_imageUrlArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;imageUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get percentSavingArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_percentSavingArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;percentSaving&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get createdDateArray" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_createdDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;createdDate&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: title" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_titleArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_titleArray_&quot; + i);
	  String expString = vars.get(&quot;s_titleArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): title (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: description" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_descriptionArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_descriptionArray_&quot; + i);
	  String expString = vars.get(&quot;s_descriptionArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): description (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: categoryFromFeedExtractedArray" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_categoryFromFeedExtractedArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_categoryFromFeedExtractedArray_&quot; + i);
	  String expString = vars.get(&quot;s_categoryFromFeedExtractedArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): categoryFromFeedExtracted (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: expiryDate" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.text.SimpleDateFormat;
import java.util.Date; 

	Integer count = Integer.parseInt(vars.get(&quot;s_expiryDateArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_expiryDateArray_&quot; + i);

	  String expString = vars.get(&quot;s_expiryDateArray_&quot; + i);
	  SimpleDateFormat sdf  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss&quot;);
	  sdf.setTimeZone(TimeZone.getTimeZone( &quot;GMT&quot; ));
	  Date expDate = sdf.parse(expString);
	  long epochTime = expDate.getTime();
	  expString = epochTime.toString();

	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): expiryDate (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: validFromDate" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.text.SimpleDateFormat;
import java.util.Date; 

	Integer count = Integer.parseInt(vars.get(&quot;s_validFromDateArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_validFromDateArray_&quot; + i);

	  String expString = vars.get(&quot;s_validFromDateArray_&quot; + i);
	  SimpleDateFormat sdf  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss&quot;);
	  sdf.setTimeZone(TimeZone.getTimeZone( &quot;GMT&quot; ));
	  Date expDate = sdf.parse(expString);
	  long epochTime = expDate.getTime();
	  expString = epochTime.toString();

	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): validFromDate (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: type" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_typeArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_typeArray_&quot; + i);
	  String expString = vars.get(&quot;s_typeArray_&quot; + i);
	
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): type (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: location" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_locationArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_locationArray_&quot; + i);
	  String expString = vars.get(&quot;s_locationArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): location (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: url" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_urlArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_urlArray_&quot; + i);
	  String expString = vars.get(&quot;STORE-PRESENTATION_URL&quot;) + &quot;/&quot; + vars.get(&quot;DAILYDEAL_SEOSLUG&quot;) + &quot;/&quot; + vars.get(&quot;s_urlArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): url (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: merchantName" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_merchantNameArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_merchantNameArray_&quot; + i);
	  String expString = vars.get(&quot;s_merchantNameArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): merchantName (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: epointsAwarded" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_epointsAwardedArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_epointsAwardedArray_&quot; + i);
	  String expString = vars.get(&quot;s_epointsAwardedArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): epointsAwarded (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: imageUrl" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_imageUrlArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_imageUrlArray_&quot; + i);
	  String expString = vars.get(&quot;s_imageUrlArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): imageUrl (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: percentSaving" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_percentSavingArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_percentSavingArray_&quot; + i);
	  String expString = vars.get(&quot;s_percentSavingArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): percentSaving (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdDate" enabled="false">
                <stringProp name="BeanShellAssertion.query">import java.text.SimpleDateFormat;
import java.util.Date; 

	Integer count = Integer.parseInt(vars.get(&quot;m_createdDateArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_createdDateArray_&quot; + i);

	  String expString = vars.get(&quot;s_createdDateArray_&quot; + i);
	  SimpleDateFormat sdf  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&quot;);
	  sdf.setTimeZone(TimeZone.getTimeZone( &quot;GMT&quot; ));
	  Date expDate = sdf.parse(expString);
	  long epochTime = expDate.getTime();
	  expString = epochTime.toString();

	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): createdDate (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="false">
                <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ADMIN Query (merchant, ForEach)" enabled="true">
            <stringProp name="ForeachController.inputVal">s_merchantNameArray</stringProp>
            <stringProp name="ForeachController.returnVal">m_merchant</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ADMIN_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">8910</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">COUNTER</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ADMIN: get merchant" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/merchant/name/${m_merchant}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get imageUrl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_merchantImageUrl</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;imageUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get epointsMultiplier" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_merchantEpointsMultiplier</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;epointsMultiplier&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: merchantLogo" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	String counter = vars.get(&quot;COUNTER&quot;);
	
	String resultString = vars.get(&quot;m_merchantLogoArray_&quot; + counter);
	String expString = vars.get(&quot;m_merchantImageUrl&quot;);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): merchantLogo (&quot; + resultString + &quot;) different from ADMIN (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: epointsMultiplier" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	String counter = vars.get(&quot;COUNTER&quot;);
	
	String resultString = vars.get(&quot;m_multiplierArray_&quot; + counter);
	String expString = vars.get(&quot;m_merchantEpointsMultiplier&quot;);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): multiplier (&quot; + resultString + &quot;) different from ADMIN (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CM-DDH_S8|9" enabled="false">
        <stringProp name="TestPlan.comments">Getting updated/added daily deals for an external client		

User_1 - S8 - Trying to get DailyDeals history by external client - incorrect AUTHENTICATION provided (incorrect apiKey)
User_2 - S9 - Trying to get DailyDeals history by external client - incorrect AUTHENTICATION provided (incorrect pass)

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DAILYDEAL_SEOSLUG" elementType="Argument">
              <stringProp name="Argument.name">DAILYDEAL_SEOSLUG</stringProp>
              <stringProp name="Argument.value">daily-deal</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STORE-PRESENTATION_URL" elementType="Argument">
              <stringProp name="Argument.name">STORE-PRESENTATION_URL</stringProp>
              <stringProp name="Argument.value">http://localhost:8080</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SOLR_HOST" elementType="Argument">
              <stringProp name="Argument.name">SOLR_HOST</stringProp>
              <stringProp name="Argument.value">10.10.30.141</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADMIN_HOST" elementType="Argument">
              <stringProp name="Argument.name">ADMIN_HOST</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTENT_API_HOST" elementType="Argument">
              <stringProp name="Argument.name">CONTENT_API_HOST</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DT_DATE_STR" elementType="Argument">
              <stringProp name="Argument.name">DT_DATE_STR</stringProp>
              <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DATE\, -1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); c.set(Calendar.MILLISECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;).format(c.getTime()) )}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DT_DATE_STR2" elementType="Argument">
              <stringProp name="Argument.name">DT_DATE_STR2</stringProp>
              <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DATE\, -1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); c.set(Calendar.MILLISECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(c.getTime()) )}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1312178872">SOLR_FQ</stringProp>
            <stringProp name="-1843443660">SOLR_Q</stringProp>
            <stringProp name="1683712677">SOLR_START</stringProp>
            <stringProp name="1716847382">SOLR_ROWS</stringProp>
            <stringProp name="1716877019">SOLR_SORT</stringProp>
            <stringProp name="-2022839318">SOLR_FQ2</stringProp>
            <stringProp name="-2022839317">SOLR_FQ3</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="955843610">REST_PAGE</stringProp>
            <stringProp name="955941260">REST_SIZE</stringProp>
            <stringProp name="-106983330">REST_KEYWORD</stringProp>
            <stringProp name="-835429307">REST_SOFTFIELD</stringProp>
            <stringProp name="1233258917">REST_SORTORDER</stringProp>
            <stringProp name="1725717469">REST_CREATEDSINCE</stringProp>
            <stringProp name="-1550160516">CATEGORY_SEO</stringProp>
            <stringProp name="505846025">REST_CATEGORY</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="446470996">REST_KEY</stringProp>
            <stringProp name="955605657">REST_HASH</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="-1831060066">HEADER_TXT</stringProp>
            <stringProp name="-1831066961">HEADER_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-2046168791">
              <stringProp name="51509">401</stringProp>
              <stringProp name="1830496083">Authentication Failed: User could not be found with the supplied api key.</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258527">&amp;rows=25</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1486739482">IAT IncorrectApiKey</stringProp>
              <stringProp name="111704357">bQ+zyrW2GXNWxaVnIbQ+txWy1JC577D/CPZT9z1autk=</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
            </collectionProp>
            <collectionProp name="-229880807">
              <stringProp name="51509">401</stringProp>
              <stringProp name="-1031335146">Authentication Failed: Bad credentials</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258527">&amp;rows=25</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-191076270">IAT 00c15942786d3ceb3ad0629ec2a84493</stringProp>
              <stringProp name="-1265654677">incorrect_pass</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CM-DDH_FAIL" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONTENT MANAGER Query" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${REST_KEY}:${REST_HASH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${CONTENT_API_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">8912</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get daily deals" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/dailydeals${REST_PAGE}${REST_SIZE}${REST_CATEGORY}${REST_KEYWORD}${REST_SOFTFIELD}${REST_SORTORDER}${REST_CREATEDSINCE}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="91411816">${HEADER_TXT}</stringProp>
                  <stringProp name="91198071">${HEADER_MSG}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CM-PH - S1|2|3|4|5|6|7" enabled="false">
        <stringProp name="TestPlan.comments">Getting updated/added products identified by EAN/UPC for an external client

User_1 - S1 - Getting PRODUCTS history by external client - no additional parameters
User_2 - S2 - Getting PRODUCTS history by external client - paging parameters
User_3 - S3 - Getting PRODUCTS history by external client - sorting parameters (title, desc)
User_4 - S3 - Getting PRODUCTS history by external client - sorting parameters (seoSlug, desc)
User_5 - S4 - Getting PRODUCTS  history by external client - limited by keyword
User_6 - S5 - Getting PRODUCTS  history by external client - limited by EAN
User_7 - S6 - Getting PRODUCTS  history by external client - limited by UPC
User_8 - S7 - Getting PRODUCTS  history by external client - created after specified timestamp


</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DAILYDEAL_SEOSLUG" elementType="Argument">
              <stringProp name="Argument.name">DAILYDEAL_SEOSLUG</stringProp>
              <stringProp name="Argument.value">daily-deal</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STORE-PRESENTATION_URL" elementType="Argument">
              <stringProp name="Argument.name">STORE-PRESENTATION_URL</stringProp>
              <stringProp name="Argument.value">http://localhost:8080</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="REST_HASH" elementType="Argument">
              <stringProp name="Argument.name">REST_HASH</stringProp>
              <stringProp name="Argument.value">UoRsMz23s8FYdZGVEv25wz9aHSiGTb3J8KpT/zLgFnY=</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SOLR_HOST" elementType="Argument">
              <stringProp name="Argument.name">SOLR_HOST</stringProp>
              <stringProp name="Argument.value">10.10.30.141</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADMIN_HOST" elementType="Argument">
              <stringProp name="Argument.name">ADMIN_HOST</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTENT_API_HOST" elementType="Argument">
              <stringProp name="Argument.name">CONTENT_API_HOST</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DT_DATE_STR" elementType="Argument">
              <stringProp name="Argument.name">DT_DATE_STR</stringProp>
              <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DATE\, -1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); c.set(Calendar.MILLISECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;).format(c.getTime()) )}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DT_DATE_STR2" elementType="Argument">
              <stringProp name="Argument.name">DT_DATE_STR2</stringProp>
              <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DATE\, -1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); c.set(Calendar.MILLISECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(c.getTime()) )}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="EAN" elementType="Argument">
              <stringProp name="Argument.name">EAN</stringProp>
              <stringProp name="Argument.value">9999000329345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UPC" elementType="Argument">
              <stringProp name="Argument.name">UPC</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="SOLR Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SOLR_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">8983</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(thread: ${__threadNum}) SOLR: get ean,upc" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/solr/collection1/select?q=s_upc%3A[&apos;&apos;+TO+*]+AND+s_ean%3A[&apos;&apos;+TO+*]&amp;fq=s_contentType%3APRODUCT&amp;start=0&amp;rows=1&amp;fl=s_upc%2Cs_ean&amp;wt=json&amp;indent=true </stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ean" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">EAN</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;s_ean&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get upc" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">UPC</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;s_upc&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1312178872">SOLR_FQ</stringProp>
            <stringProp name="-1843443660">SOLR_Q</stringProp>
            <stringProp name="1683712677">SOLR_START</stringProp>
            <stringProp name="1716847382">SOLR_ROWS</stringProp>
            <stringProp name="1716877019">SOLR_SORT</stringProp>
            <stringProp name="-2022839318">SOLR_FQ2</stringProp>
            <stringProp name="-2022839317">SOLR_FQ3</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="955843610">REST_PAGE</stringProp>
            <stringProp name="955941260">REST_SIZE</stringProp>
            <stringProp name="-106983330">REST_KEYWORD</stringProp>
            <stringProp name="-835429307">REST_SOFTFIELD</stringProp>
            <stringProp name="1233258917">REST_SORTORDER</stringProp>
            <stringProp name="1725717469">REST_CREATEDSINCE</stringProp>
            <stringProp name="-1550160516">CATEGORY_SEO</stringProp>
            <stringProp name="505846025">REST_CATEGORY</stringProp>
            <stringProp name="446465095">REST_EAN</stringProp>
            <stringProp name="446480925">REST_UPC</stringProp>
            <stringProp name="-1312178562">SOLR_Q2</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1558459950">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258527">&amp;rows=25</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-116718030">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="1352969787">&amp;start=60</stringProp>
              <stringProp name="-1105258501">&amp;rows=30</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596317">?page=2</stringProp>
              <stringProp name="-387176237">&amp;size=30</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1080971185">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1559674153">&amp;rows=5</stringProp>
              <stringProp name="-1296638551">&amp;sort=s_title+desc</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-1536510209">&amp;size=5</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-830746543">&amp;sortField=title</stringProp>
              <stringProp name="-730209544">&amp;ascending=false</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="465064182">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="1352969663">&amp;start=20</stringProp>
              <stringProp name="-1105258532">&amp;rows=20</stringProp>
              <stringProp name="1756327961">&amp;sort=s_seoSlug+desc</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596318">?page=1</stringProp>
              <stringProp name="-387176268">&amp;size=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-490882975">&amp;sortField=seoSlug</stringProp>
              <stringProp name="-730209544">&amp;ascending=false</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-839270253">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="599437329">q=camera</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258563">&amp;rows=10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176299">&amp;size=10</stringProp>
              <stringProp name="-2133212865">&amp;keyword=camera</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1591686116">+AND+camera</stringProp>
            </collectionProp>
            <collectionProp name="952463841">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="834795035">q=s_ean%3A${EAN}</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258527">&amp;rows=25</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176263">&amp;size=25</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="717995123">&amp;ean=${EAN}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1109063406">+AND+s_ean%3A${EAN}</stringProp>
            </collectionProp>
            <collectionProp name="-1754877792">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="-417176081">q=s_upc%3A${UPC}</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258532">&amp;rows=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176268">&amp;size=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1463820601">&amp;upc=${UPC}</stringProp>
              <stringProp name="-142907710">+AND+s_upc%3A${UPC}</stringProp>
            </collectionProp>
            <collectionProp name="1102811797">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258532">&amp;rows=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2126701512">+AND+-firstAddedToIndexDate%3A[*+TO+${DT_DATE_STR}Z]</stringProp>
              <stringProp name="1567131713">+AND+-lastModifiedInIndexDate%3A[*+TO+${DT_DATE_STR}Z]</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176268">&amp;size=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="114934261">&amp;created-since=${DT_DATE_STR2}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters (TEMP)" enabled="false">
          <collectionProp name="UserParameters.names">
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1312178872">SOLR_FQ</stringProp>
            <stringProp name="-1843443660">SOLR_Q</stringProp>
            <stringProp name="1683712677">SOLR_START</stringProp>
            <stringProp name="1716847382">SOLR_ROWS</stringProp>
            <stringProp name="1716877019">SOLR_SORT</stringProp>
            <stringProp name="-2022839318">SOLR_FQ2</stringProp>
            <stringProp name="-2022839317">SOLR_FQ3</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="955843610">REST_PAGE</stringProp>
            <stringProp name="955941260">REST_SIZE</stringProp>
            <stringProp name="-106983330">REST_KEYWORD</stringProp>
            <stringProp name="-835429307">REST_SOFTFIELD</stringProp>
            <stringProp name="1233258917">REST_SORTORDER</stringProp>
            <stringProp name="1725717469">REST_CREATEDSINCE</stringProp>
            <stringProp name="-1550160516">CATEGORY_SEO</stringProp>
            <stringProp name="505846025">REST_CATEGORY</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-224366958">
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="685931082">&amp;fq=s_contentType%3ADAILY_DEAL</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258532">&amp;rows=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2126701512">+AND+-firstAddedToIndexDate%3A[*+TO+${DT_DATE_STR}Z]</stringProp>
              <stringProp name="1567131713">+AND+-lastModifiedInIndexDate%3A[*+TO+${DT_DATE_STR}Z]</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-917596319">?page=0</stringProp>
              <stringProp name="-387176268">&amp;size=20</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="114934261">&amp;created-since=${DT_DATE_STR2}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CM-PH_PASS" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SOLR Query" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOLR: get products" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/solr/collection1/select?${__javaScript(if(&quot;${solr_contentQuery}&quot; != &quot;\${solr_contentQuery}&quot;) {&quot;q=${solr_contentQuery}&quot;} else {&quot;${SOLR_Q}&quot;})}${SOLR_FQ}${SOLR_FQ2}${SOLR_FQ3}${SOLR_SORT}${SOLR_START}${SOLR_ROWS}&amp;group=true&amp;group.field=s_consolidationGroupId&amp;wt=json&amp;indent=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get titleArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_titleArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_title&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get descriptionArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_descriptionArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_description&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get merchantNamesArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_merchantNamesArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_merchantName&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="TestPlan.comments">(&quot;(.*?)&quot;|)</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get merchantIdsArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_merchantIdsArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_merchantId&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="TestPlan.comments">(&quot;(.*?)&quot;|)</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get brandNamesArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_brandNamesArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_brandName&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get imageUrlArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_imageUrlArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_primaryImageUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get modifiedDateArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_modifiedDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;lastModifiedInIndexDate&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get createdDateArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_createdDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;firstAddedToIndexDate&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get seoSlugArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_seoSlugArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_seoSlug&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get offeringsCountArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_offeringsCountArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;numFound&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get consolidationGroupIdArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_consolidationGroupIdArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;s_consolidationGroupId&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONTENT MANAGER Query" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">IAT 00c15942786d3ceb3ad0629ec2a84493:${REST_HASH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${CONTENT_API_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">8912</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get products" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/products${REST_PAGE}${REST_SIZE}${REST_KEYWORD}${REST_CATEGORY}${REST_EAN}${REST_UPC}${REST_SOFTFIELD}${REST_SORTORDER}${REST_CREATEDSINCE}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get titleArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_titleArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;title&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get descriptionArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_descriptionArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;description&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get merchantNamesArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_merchantNamesArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;merchantNames&quot;:\[(.*?)\],</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get merchantIdsArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_merchantIdsArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;merchnantIds&quot;:\[(.*?)\]}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get brandNamesArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_brandNamesArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;brandNames&quot;:\[(.*?)\],</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get imageUrlArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_imageUrlArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;imageUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get modifiedDateArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_modifiedDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;modifiedDate&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get createdDateArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_createdDateArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;createdDate&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get minPriceArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_minPriceArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;minPrice&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get maxPriceArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_maxPriceArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;maxPrice&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get minEpointsEarnedArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_minEpointsEarnedArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;minEpointsEarned&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get maxEpointsEarnedArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_maxEpointsEarnedArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;maxEpointsEarned&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get seoSlugArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_seoSlugArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;seoSlug&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get offeringsCountArray" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_offeringsCountArray</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;offeringsCount&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: title" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_titleArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_titleArray_&quot; + i);
	  String expString = vars.get(&quot;s_titleArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): title REST (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: description" enabled="true">
                <stringProp name="BeanShellAssertion.query">Integer user = Integer.parseInt(Parameters);
if (user != 5)
{
	Integer count = Integer.parseInt(vars.get(&quot;s_descriptionArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_descriptionArray_&quot; + i);
	  String expString = vars.get(&quot;s_descriptionArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): description REST (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: merchantNamesArray" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_merchantNamesArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_merchantNamesArray_&quot; + i);
	  String expString = vars.get(&quot;s_merchantNamesArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): merchantName REST (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: merchantIdsArray" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_merchantIdsArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_merchantIdsArray_&quot; + i);
	  String expString = vars.get(&quot;s_merchantIdsArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): merchantId REST (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: brandNamesArray" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_brandNamesArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_brandNamesArray_&quot; + i);
	  String expString = vars.get(&quot;s_brandNamesArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): brandName REST (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: imageUrl" enabled="true">
                <stringProp name="BeanShellAssertion.query">Integer user = Integer.parseInt(Parameters);
if (user != 5)
{
	Integer count = Integer.parseInt(vars.get(&quot;s_imageUrlArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_imageUrlArray_&quot; + i);
	  String expString = vars.get(&quot;s_imageUrlArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): imageUrl REST (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: modifiedDate" enabled="false">
                <stringProp name="BeanShellAssertion.query">import java.text.SimpleDateFormat;
import java.util.Date; 

	Integer count = Integer.parseInt(vars.get(&quot;s_modifiedDateArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_modifiedDateArray_&quot; + i);

	  String expString = vars.get(&quot;s_modifiedDateArray_&quot; + i);
	  SimpleDateFormat sdf  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&quot;);
	  sdf.setTimeZone(TimeZone.getTimeZone( &quot;GMT&quot; ));
	  Date expDate = sdf.parse(expString);
	  long epochTime = expDate.getTime();
	  expString = epochTime.toString();

	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): modifiedDate (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdDate" enabled="false">
                <stringProp name="BeanShellAssertion.query">import java.text.SimpleDateFormat;
import java.util.Date; 

	Integer count = Integer.parseInt(vars.get(&quot;s_createdDateArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_createdDateArray_&quot; + i);

	  String expString = vars.get(&quot;s_createdDateArray_&quot; + i);
	  SimpleDateFormat sdf  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&quot;);
	  sdf.setTimeZone(TimeZone.getTimeZone( &quot;GMT&quot; ));
	  Date expDate = sdf.parse(expString);
	  long epochTime = expDate.getTime();
	  expString = epochTime.toString();

	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): createdDate (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: seoSlug" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_seoSlugArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_seoSlugArray_&quot; + i);
	  String expString = vars.get(&quot;s_seoSlugArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): seoSlug REST (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: offeringsCount" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_offeringsCountArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_offeringsCountArray_&quot; + i);
	  String expString = vars.get(&quot;s_offeringsCountArray_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): offeringsCount REST (&quot; + resultString + &quot;) different from SOLR (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="SOLR Query (min, max, forEach)" enabled="true">
            <stringProp name="ForeachController.inputVal">s_consolidationGroupIdArray</stringProp>
            <stringProp name="ForeachController.returnVal">m_groupId</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">COUNTER</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOLR: minPrice" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/solr/collection1/select?q=s_consolidationGroupId%3A${m_groupId}${SOLR_Q2}&amp;sort=f_price+asc&amp;fl=f_price&amp;fq=s_contentType%3APRODUCT&amp;start=0&amp;rows=1&amp;wt=json&amp;indent=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get minPrice" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_minPrice</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;f_price&quot;:(.*?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: minPrice" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  String solrValue = vars.get(&quot;s_minPrice&quot;);
	  String restValue = vars.get(&quot;m_minPriceArray_&quot; + counter);

	  if (solrValue.equals(restValue))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + counter + &quot;): minPrice REST (&quot; + restValue + &quot;) different from SOLR (&quot; + solrValue + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOLR: maxPrice" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/solr/collection1/select?q=s_consolidationGroupId%3A${m_groupId}${SOLR_Q2}&amp;sort=f_price+desc&amp;fl=f_price&amp;fq=s_contentType%3APRODUCT&amp;start=0&amp;rows=1&amp;wt=json&amp;indent=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get maxPrice" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_maxPrice</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;f_price&quot;:(.*?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: maxPrice" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  String solrValue = vars.get(&quot;s_maxPrice&quot;);
	  String restValue = vars.get(&quot;m_maxPriceArray_&quot; + counter);

	  if (solrValue.equals(restValue))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + counter + &quot;): maxPrice REST (&quot; + restValue + &quot;) different from SOLR (&quot; + solrValue + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOLR: minEpointsEarned" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/solr/collection1/select?q=s_consolidationGroupId%3A${m_groupId}${SOLR_Q2}&amp;sort=i_epointsEarned+asc&amp;fl=i_epointsEarned&amp;fq=s_contentType%3APRODUCT&amp;start=0&amp;rows=1&amp;wt=json&amp;indent=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get minEpointsEarned" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_minEpointsEarned</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;i_epointsEarned&quot;:(.*?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: minEpointsEarned" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  String solrValue = vars.get(&quot;s_minEpointsEarned&quot;);
	  String restValue = vars.get(&quot;m_minEpointsEarnedArray_&quot; + counter);
print (restValue);

	  if (solrValue.equals(restValue))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + counter + &quot;): minEpointsEarned REST (&quot; + restValue + &quot;) different from SOLR (&quot; + solrValue + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOLR: maxEpointsEarned" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/solr/collection1/select?q=s_consolidationGroupId%3A${m_groupId}${SOLR_Q2}&amp;sort=i_epointsEarned+desc&amp;fl=i_epointsEarned&amp;fq=s_contentType%3APRODUCT&amp;start=0&amp;rows=1&amp;wt=json&amp;indent=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get maxEpointsEarned" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">s_maxEpointsEarned</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;i_epointsEarned&quot;:(.*?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: maxEpointsEarned" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  String solrValue = vars.get(&quot;s_maxEpointsEarned&quot;);
	  String restValue = vars.get(&quot;m_maxEpointsEarnedArray_&quot; + counter);
print (restValue);

	  if (solrValue.equals(restValue))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + counter + &quot;): maxEpointsEarned REST (&quot; + restValue + &quot;) different from SOLR (&quot; + solrValue + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CM-PH_S8|9" enabled="false">
        <stringProp name="TestPlan.comments">Getting updated/added products for an external client		

User_1 - S8 - Trying to get PRODUCTS history by external client - incorrect AUTHENTICATION provided (incorrect apiKey)
User_2 - S9 - Trying to get PRODUCTS history by external client - incorrect AUTHENTICATION provided (incorrect pass)

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DAILYDEAL_SEOSLUG" elementType="Argument">
              <stringProp name="Argument.name">DAILYDEAL_SEOSLUG</stringProp>
              <stringProp name="Argument.value">daily-deal</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STORE-PRESENTATION_URL" elementType="Argument">
              <stringProp name="Argument.name">STORE-PRESENTATION_URL</stringProp>
              <stringProp name="Argument.value">http://localhost:8080</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SOLR_HOST" elementType="Argument">
              <stringProp name="Argument.name">SOLR_HOST</stringProp>
              <stringProp name="Argument.value">10.10.30.141</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADMIN_HOST" elementType="Argument">
              <stringProp name="Argument.name">ADMIN_HOST</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTENT_API_HOST" elementType="Argument">
              <stringProp name="Argument.name">CONTENT_API_HOST</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DT_DATE_STR" elementType="Argument">
              <stringProp name="Argument.name">DT_DATE_STR</stringProp>
              <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DATE\, -1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); c.set(Calendar.MILLISECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;).format(c.getTime()) )}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DT_DATE_STR2" elementType="Argument">
              <stringProp name="Argument.name">DT_DATE_STR2</stringProp>
              <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DATE\, -1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); c.set(Calendar.MILLISECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(c.getTime()) )}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1312178872">SOLR_FQ</stringProp>
            <stringProp name="-1843443660">SOLR_Q</stringProp>
            <stringProp name="1683712677">SOLR_START</stringProp>
            <stringProp name="1716847382">SOLR_ROWS</stringProp>
            <stringProp name="1716877019">SOLR_SORT</stringProp>
            <stringProp name="-2022839318">SOLR_FQ2</stringProp>
            <stringProp name="-2022839317">SOLR_FQ3</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="955843610">REST_PAGE</stringProp>
            <stringProp name="955941260">REST_SIZE</stringProp>
            <stringProp name="-106983330">REST_KEYWORD</stringProp>
            <stringProp name="-835429307">REST_SOFTFIELD</stringProp>
            <stringProp name="1233258917">REST_SORTORDER</stringProp>
            <stringProp name="1725717469">REST_CREATEDSINCE</stringProp>
            <stringProp name="-1550160516">CATEGORY_SEO</stringProp>
            <stringProp name="505846025">REST_CATEGORY</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="446470996">REST_KEY</stringProp>
            <stringProp name="955605657">REST_HASH</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="-1831060066">HEADER_TXT</stringProp>
            <stringProp name="-1831066961">HEADER_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="455991983">
              <stringProp name="51509">401</stringProp>
              <stringProp name="1830496083">Authentication Failed: User could not be found with the supplied api key.</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258527">&amp;rows=25</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1486739482">IAT IncorrectApiKey</stringProp>
              <stringProp name="2064399036">UoRsMz23s8FYdZGVEv25wz9aHSiGTb3J8KpT/zLgFnY=</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
            </collectionProp>
            <collectionProp name="1409000697">
              <stringProp name="51509">401</stringProp>
              <stringProp name="-1031335146">Authentication Failed: Bad credentials</stringProp>
              <stringProp name="1617328247">&amp;fq=s_contentType%3APRODUCT</stringProp>
              <stringProp name="-1004979723">q=*%3A*</stringProp>
              <stringProp name="-94903153">&amp;start=0</stringProp>
              <stringProp name="-1105258527">&amp;rows=25</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-191076270">IAT 00c15942786d3ceb3ad0629ec2a84493</stringProp>
              <stringProp name="-1265654677">incorrect_pass</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CM-DDH_FAIL" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONTENT MANAGER Query" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${REST_KEY}:${REST_HASH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${CONTENT_API_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">8912</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get daily deals" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/dailydeals${REST_PAGE}${REST_SIZE}${REST_CATEGORY}${REST_KEYWORD}${REST_SOFTFIELD}${REST_SORTORDER}${REST_CREATEDSINCE}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="91411816">${HEADER_TXT}</stringProp>
                  <stringProp name="91198071">${HEADER_MSG}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
