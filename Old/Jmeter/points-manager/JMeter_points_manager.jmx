<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SERVER_URL" elementType="Argument">
            <stringProp name="Argument.name">SERVER_URL</stringProp>
            <stringProp name="Argument.value">http://epoints-com-qa-elb.iatlimited.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EMAIL_SENTTO_1" elementType="Argument">
            <stringProp name="Argument.name">EMAIL_SENTTO_1</stringProp>
            <stringProp name="Argument.value">iatesting1234@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EMAIL_SENTTO_2" elementType="Argument">
            <stringProp name="Argument.name">EMAIL_SENTTO_2</stringProp>
            <stringProp name="Argument.value">iatesting5678@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FAR_IN_THE_PAST_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_FAR_IN_THE_PAST_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.YEAR\, 1910); c.set(Calendar.MONTH\, 0); c.set(Calendar.DAY_OF_MONTH\, 1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FAR_IN_THE_FUTURE_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_FAR_IN_THE_FUTURE_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.YEAR\, 2100); c.set(Calendar.MONTH\, 0); c.set(Calendar.DAY_OF_MONTH\, 1); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_CURRENT_DATE_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_CURRENT_DATE_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date()))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_CURRENT_DATE_EPOCH" elementType="Argument">
            <stringProp name="Argument.name">DT_CURRENT_DATE_EPOCH</stringProp>
            <stringProp name="Argument.value">${__BeanShell(long epoch = new Date().getTime(); return epoch;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_HOUR_OF_YESTERDAY_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_HOUR_OF_YESTERDAY_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY\, 23); c.set(Calendar.MINUTE\, 59);  c.set(Calendar.SECOND\, 59);  c.add(Calendar.DATE\, -1); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_HOUR_OF_TODAY_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_HOUR_OF_TODAY_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0);  new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_HOUR_OF_TODAY_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_HOUR_OF_TODAY_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY\, 23); c.set(Calendar.MINUTE\, 59);  c.set(Calendar.SECOND\, 59);  new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_HOUR_OF_TOMORROW_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_HOUR_OF_TOMORROW_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0);  c.add(Calendar.DATE\, 1); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_DAY_OF_PREVIOUS_MONTH_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_DAY_OF_PREVIOUS_MONTH_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date(new Date().getYear()\, new Date().getMonth()-1\, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH)-1\, 23\, 59\, 59)))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_DAY_OF_PREVIOUS_MONTH_EPOCH" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_DAY_OF_PREVIOUS_MONTH_EPOCH</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Date d = new Date(); long epoch = new Date(new Date().getYear()\, new Date().getMonth()-1\, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH)-1\, 23\, 59\, 59).getTime(); return epoch)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_DAY_OF_CURRENT_MONTH_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_DAY_OF_CURRENT_MONTH_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date(new Date().getYear()\, new Date().getMonth()\, 1\, 0\, 0\, 0)))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_DAY_OF_CURRENT_MONTH_STR_SHORT" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_DAY_OF_CURRENT_MONTH_STR_SHORT</stringProp>
            <stringProp name="Argument.value">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date(new Date().getYear()\, new Date().getMonth()\, 1)))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Date d = new Date(); long epoch = new Date(d.getYear()\, d.getMonth()\, 1\, 0\, 0\, 0).getTime(); return epoch)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_DAY_OF_CURRENT_MONTH_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_DAY_OF_CURRENT_MONTH_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date(new Date().getYear()\, new Date().getMonth()\, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH)\, 23\, 59\, 59)))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_DAY_OF_CURRENT_MONTH_STR_SHORT" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_DAY_OF_CURRENT_MONTH_STR_SHORT</stringProp>
            <stringProp name="Argument.value">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date(new Date().getYear()\, new Date().getMonth()\, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH))))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Date d = new Date(); long epoch = new Date(d.getYear()\, d.getMonth()\, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH)\, 23\, 59\, 59).getTime(); return epoch)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_DAY_OF_NEXT_MONTH_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_DAY_OF_NEXT_MONTH_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Date d = new Date(); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date(d.getYear()\, d.getMonth()+1\, 1\, 0\, 0\, 0)))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_DAY_OF_NEXT_MONTH_EPOCH" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_DAY_OF_NEXT_MONTH_EPOCH</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Date d = new Date(); long epoch = new Date(d.getYear()\, d.getMonth()+1\, 1\, 0\, 0\, 0).getTime(); return epoch)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_DAY_OF_PREVIOUS_WEEK_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_DAY_OF_PREVIOUS_WEEK_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY\, 23); c.set(Calendar.MINUTE\, 59);  c.set(Calendar.SECOND\, 59);  int dayOfWeek = c.get(Calendar.DAY_OF_WEEK); c.add(Calendar.DATE\, -1 * dayOfWeek); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_DAY_OF_CURRENT_WEEK_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_DAY_OF_CURRENT_WEEK_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0);  int  dayOfWeek = c.get(Calendar.DAY_OF_WEEK);  if (dayOfWeek != Calendar.SUNDAY) {c.add(Calendar.DATE\, -1 * (dayOfWeek - 1));} new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_LAST_DAY_OF_CURRENT_WEEK_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_LAST_DAY_OF_CURRENT_WEEK_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY\, 23); c.set(Calendar.MINUTE\, 59);  c.set(Calendar.SECOND\, 59);   c.set(Calendar.DAY_OF_WEEK\, Calendar.SATURDAY); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DT_FIRST_DAY_OF_NEXT_WEEK_STR" elementType="Argument">
            <stringProp name="Argument.name">DT_FIRST_DAY_OF_NEXT_WEEK_STR</stringProp>
            <stringProp name="Argument.value">${__BeanShell(Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0);   c.set(Calendar.DAY_OF_WEEK\, Calendar.SATURDAY); c.add(Calendar.DATE\, 1); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">localhost</stringProp>
        <stringProp name="HTTPSampler.port">8913</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">X-IAT-Security-Required</stringProp>
            <stringProp name="Header.value">true</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySQL Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">MySQL</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://localhost:3306/points_manager</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">ya8Kqpx8</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">pointsmanager</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp test data" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1368696349000</longProp>
        <longProp name="ThreadGroup.end_time">1368696349000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="clear tables" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table request" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM request;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table user_pointsmap" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM user_pointsmap;




</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM points;




</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table userid" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM userid;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM usertoken;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table product" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM product;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table redemptionorder" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM redemptionorder;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table address" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM address;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table user" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM user;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table tag" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM tag;




</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table partner" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM partner;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="-clear table usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM usertoken;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load partner" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;1&apos;, 1, &apos;101&apos;, &apos;p1aKey&apos;, &apos;partner01&apos;, &apos;p01&apos;, &apos;PRE_PAY&apos;, &apos;p1aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;2&apos;, 1, &apos;200&apos;, &apos;p2aKey&apos;, &apos;partner02&apos;, &apos;p2&apos;, &apos;PRE_PAY&apos;, &apos;p2aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner3" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;3&apos;, 1, &apos;300&apos;, &apos;p3aKey&apos;, &apos;partner03&apos;, &apos;p3&apos;, &apos;PRE_PAY&apos;, &apos;p3aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner4 (inactive)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;4&apos;, 0, &apos;300&apos;, &apos;p4aKey&apos;, &apos;partner03deleted&apos;, &apos;p4&apos;, &apos;PRE_PAY&apos;, &apos;p4aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner5" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;5&apos;, 1, &apos;300&apos;, &apos;p5aKey&apos;, &apos;partner05&apos;, &apos;p5&apos;, &apos;PRE_PAY&apos;, &apos;p5aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner6" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;6&apos;, 1, &apos;100&apos;, &apos;p6aKey&apos;, &apos;partner06&apos;, &apos;p6&apos;, &apos;PRE_PAY&apos;, &apos;p6aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner7" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;7&apos;, 1, &apos;100&apos;, &apos;p7aKey&apos;, &apos;partner07&apos;, &apos;p7&apos;, &apos;PRE_PAY&apos;, &apos;p7aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner10" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;10&apos;, 1, &apos;100&apos;, &apos;p10aKey&apos;, &apos;partner10&apos;, &apos;p10&apos;, &apos;PRE_PAY&apos;, &apos;p10aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner11" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;11&apos;, 1, &apos;100&apos;, &apos;p11aKey&apos;, &apos;partner11&apos;, &apos;p11&apos;, &apos;PRE_PAY&apos;, &apos;p11aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner12" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;12&apos;, 1, &apos;100&apos;, &apos;p12aKey&apos;, &apos;partner12&apos;, &apos;p12&apos;, &apos;PRE_PAY&apos;, &apos;p12aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner13" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;13&apos;, 1, &apos;100&apos;, &apos;p13aKey&apos;, &apos;partner13&apos;, &apos;p13&apos;, &apos;PRE_PAY&apos;, &apos;p13aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner20" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;20&apos;, 1, &apos;100&apos;, &apos;p20aKey&apos;, &apos;partner20&apos;, &apos;p20&apos;, &apos;PRE_PAY&apos;, &apos;p20aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner22" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;22&apos;, 1, &apos;100&apos;, &apos;p22aKey&apos;, &apos;partner22&apos;, &apos;p22&apos;, &apos;PRE_PAY&apos;, &apos;p22aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner30" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, siteUrl, secret) VALUES (&apos;30&apos;, 1, &apos;1000&apos;, &apos;p30aKey&apos;, &apos;partner30&apos;, &apos;p30&apos;, &apos;PRE_PAY&apos;, &apos;http://partner30.com&apos;, &apos;p30aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner40 - POST_PAY" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;40&apos;, 1, &apos;0&apos;, &apos;p40aKey&apos;, &apos;partner40&apos;, &apos;p40&apos;, &apos;POST_PAY&apos;, &apos;p40aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner50" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;50&apos;, 1, &apos;1000&apos;, &apos;p50aKey&apos;, &apos;partner50&apos;, &apos;p50&apos;, &apos;PRE_PAY&apos;, &apos;p50aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner60" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, siteUrl, secret) VALUES (&apos;60&apos;, 1, &apos;1000&apos;, &apos;p60aKey&apos;, &apos;partner60&apos;, &apos;p60&apos;, &apos;PRE_PAY&apos;, &apos;http://partner60.com&apos;, &apos;p60aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner61" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, siteUrl, secret) VALUES (&apos;61&apos;, 1, &apos;1000&apos;, &apos;p61aKey&apos;, &apos;partner61&apos;, &apos;p61&apos;, &apos;PRE_PAY&apos;, &apos;http://partner61.com&apos;, &apos;p61aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner70" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, secret) VALUES (&apos;70&apos;, 1, &apos;1000&apos;, &apos;p70aKey&apos;, &apos;partner70&apos;, &apos;p70&apos;, &apos;PRE_PAY&apos;, &apos;p70aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner80" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, siteUrl, secret) VALUES (&apos;80&apos;, 1, &apos;10000&apos;, &apos;p80aKey&apos;, &apos;partner80&apos;, &apos;p80&apos;, &apos;PRE_PAY&apos;, &apos;http://partner80.com&apos;, &apos;p80aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner90 - POST PAY" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, currentTotal, accessKey, name, shortName, paymentType, siteUrl, secret) VALUES (&apos;90&apos;, 1, &apos;0&apos;, &apos;p90aKey&apos;, &apos;partner90&apos;, &apos;p90&apos;, &apos;POST_PAY&apos;, &apos;http://partner90.com&apos;, &apos;p90aKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner AffiliateManager" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, createdAt, currentTotal, accessKey, name, shortName, paymentType, siteUrl, secret) 
VALUES (&apos;1000&apos;, 1, ?, &apos;10000&apos;, &apos;affiliateKey&apos;, &apos;Affiliate Manager&apos;, &apos;affiliateManager&apos;, &apos;POST_PAY&apos;, &apos;http://epoints-com-qa-elb.iatlimited.com/&apos;, &apos;affiliateKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load partner Partner 1 (ePoints)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO partner (id, active, createdAt, currentTotal, accessKey, name, shortName, paymentType, siteUrl, secret) 
VALUES (&apos;1001&apos;, 1, ?, &apos;10000&apos;, &apos;accessKey&apos;, &apos;Partner 1&apos;, &apos;P1&apos;, &apos;PRE_PAY&apos;, &apos;http://partner-2.com&apos;, &apos;accessKeySecret&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PARTNER" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&quot;name&quot; : &quot;PartnerFromWS&quot;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/clients</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1601759544">Created</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load user" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified, userKey) VALUES (1, 1, &apos;user1@test.com&apos;, &apos;user01&apos;, true, true, &apos;UUID_1&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (2, 1, &apos;user2@test.com&apos;, &apos;user02&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user3" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (3, 1, &apos;user3@test.com&apos;, &apos;user03&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user4 (inactive)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified, password,confirmed, pending, declined, redeemed, spent) 
VALUES (4, 0, &apos;user4@test.com&apos;, &apos;user04_inactive&apos;, true, true, &apos;some_password&apos;, &apos;11&apos;, &apos;6&apos;, &apos;12&apos;, &apos;1&apos;, &apos;0&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user5" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (5, 1, &apos;user5@test.com&apos;, &apos;user05&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user6" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (6, 1, &apos;user6@test.com&apos;, &apos;user06&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user7" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (7, 1, &apos;user7@test.com&apos;, &apos;user07&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user8" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (8, 1, &apos;user8@test.com&apos;, &apos;user08&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user10" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (10, 1, &apos;user10@test.com&apos;, &apos;user10&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user11" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (11, 1, &apos;user11@test.com&apos;, &apos;user11&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user12" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (12, 1, &apos;user12@test.com&apos;, &apos;user12&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user13" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (13, 1, &apos;user13@test.com&apos;, &apos;user13&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user20" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified, confirmed, pending, declined, redeemed, spent) 
VALUES (20, 1, &apos;user20@test.com&apos;, &apos;user20&apos;, true, true, &apos;20&apos;, &apos;15&apos;, &apos;10&apos;, &apos;5&apos;, &apos;0&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user21 (inactive partner)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified, confirmed, pending, declined, redeemed, spent) 
VALUES (21, 1, &apos;user21@test.com&apos;, &apos;user21&apos;, true, true, &apos;26&apos;, &apos;12&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user22" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstname, emailVerified, verified) VALUES (22, 1, &apos;user22@test.com&apos;, &apos;user22&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user30" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, emailVerified, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, password, registrationSiteId, passwordChangedAt, registrationAt, verified, region, optInContactByOthers, optInContactByUs, userKey) 
VALUES (30, 1, &apos;iatesting1234@gmail.com&apos;, 1, &apos;first_name_30&apos;, &apos;last_name_30&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-02 17:59:59&apos;, &apos;mobile_30&apos;, &apos;housenum_30&apos;, &apos;street_30&apos;, &apos;town_30&apos;, &apos;county_30&apos;, &apos;country_30&apos;, &apos;postcode_30&apos;, &apos;password&apos;, &apos;30&apos;, &apos;2003-01-01 17:59:59&apos;, &apos;2003-12-12 17:59:59&apos;, true, &apos;region_30&apos;, true, false, &apos;UUID_30&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user31" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified, region, optInContactByOthers, optInContactByUs, userKey) 
VALUES (31, 0, &apos;user31@test.com&apos;, &apos;first_name_31&apos;, &apos;last_name_31&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-02 17:31:59&apos;, &apos;mobile_31&apos;, &apos;housenum_31&apos;, &apos;street_31&apos;, &apos;town_31&apos;, &apos;county_31&apos;, &apos;country_31&apos;, &apos;postcode_31&apos;, true, true, &apos;region_31&apos;, true, true, &apos;UUID_31&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user32" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, emailVerified, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, password, registrationSiteId, passwordChangedAt, registrationAt, verified) 
VALUES (32, 1, &apos;iatesting1234+user32@gmail.com&apos;, 1, &apos;first_name_32&apos;, &apos;last_name_32&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2001-11-02 17:59:50&apos;, &apos;mobile_32&apos;, &apos;housenum_32&apos;, &apos;street_32&apos;, &apos;town_32&apos;, &apos;county_32&apos;, &apos;country_32&apos;, &apos;postcode_32&apos;, &apos;password32&apos;, &apos;30&apos;, &apos;2001-01-01 17:59:59&apos;, &apos;2001-12-12 17:59:59&apos;, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user40" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified) 
VALUES (40, 1, &apos;user40@test.com&apos;, &apos;first_name_40&apos;, &apos;last_name_40&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-02 18:31:59&apos;, &apos;mobile_40&apos;, &apos;housenum_40&apos;, &apos;street_40&apos;, &apos;town_40&apos;, &apos;county_40&apos;, &apos;country_40&apos;, &apos;postcode_40&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user41" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified) 
VALUES (41, 1, &apos;user41@test.com&apos;, &apos;first_name_41&apos;, &apos;last_name_41&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-03 11:31:59&apos;, &apos;mobile_41&apos;, &apos;housenum_41&apos;, &apos;street_41&apos;, &apos;town_41&apos;, &apos;county_41&apos;, &apos;country_41&apos;, &apos;postcode_41&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user50" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified) 
VALUES (50, 1, &apos;user50@test.com&apos;, &apos;first_name_50&apos;, &apos;last_name_50&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2002-11-02 18:31:59&apos;, &apos;mobile_50&apos;, &apos;housenum_50&apos;, &apos;street_50&apos;, &apos;town_50&apos;, &apos;county_50&apos;, &apos;country_50&apos;, &apos;postcode_50&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user51" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified) 
VALUES (51, 1, &apos;user51@test.com&apos;, &apos;first_name_51&apos;, &apos;last_name_51&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2001-11-03 11:31:59&apos;, &apos;mobile_51&apos;, &apos;housenum_51&apos;, &apos;street_51&apos;, &apos;town_51&apos;, &apos;county_51&apos;, &apos;country_51&apos;, &apos;postcode_51&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user60" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, emailVerified, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, password, registrationSiteId, passwordChangedAt, registrationAt, verified, region, optInContactByOthers, optInContactByUs, userKey) 
VALUES (60, 1, &apos;user60@test.com&apos;, 1, &apos;first_name_60&apos;, &apos;last_name_60&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-02 17:59:59&apos;, &apos;mobile_60&apos;, &apos;housenum_60&apos;, &apos;street_60&apos;, &apos;town_60&apos;, &apos;county_60&apos;, &apos;country_60&apos;, &apos;postcode_60&apos;, &apos;password&apos;, &apos;60&apos;, &apos;2003-01-01 17:59:59&apos;, &apos;2003-12-12 17:59:59&apos;, true, &apos;region_60&apos;, true, false, &apos;UUID_60&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user70" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified) 
VALUES (70, 1, &apos;user70@test.com&apos;, &apos;first_name_70&apos;, &apos;last_name_70&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-02 15:11:59&apos;, &apos;mobile_70&apos;, &apos;housenum_70&apos;, &apos;street_70&apos;, &apos;town_70&apos;, &apos;county_70&apos;, &apos;country_70&apos;, &apos;postcode_70&apos;, true, true);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user71 (unverified)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified, password, registrationSiteId, passwordChangedAt, registrationAt, region, optInContactByOthers, optInContactByUs, userKey) 
VALUES (71, 1, &apos;user71_id1@test.com&apos;, &apos;first_name_71&apos;, &apos;last_name_71&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-02 15:15:59&apos;, &apos;mobile_71&apos;, &apos;housenum_71&apos;, &apos;street_71&apos;, &apos;town_71&apos;, &apos;county_71&apos;, &apos;country_71&apos;, &apos;postcode_71&apos;, true, false, &apos;password_that_should_not_be&apos;, 30, &apos;2001-01-01 17:59:59&apos;, &apos;2002-12-12 17:59:59&apos;, &apos;region_71&apos;, false, false, &apos;UUID_71&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user72 (unverified / email capable)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified, password, registrationSiteId, passwordChangedAt, registrationAt) 
VALUES (72, 1, &apos;iatesting1234+user72@gmail.com&apos;, &apos;first_name_72&apos;, &apos;last_name_72&apos;, &apos;Mrs&apos;, &apos;FEMALE&apos;, &apos;2001-01-02 15:15:59&apos;, &apos;mobile_72&apos;, &apos;housenum_72&apos;, &apos;street_72&apos;, &apos;town_72&apos;, &apos;county_72&apos;, &apos;country_72&apos;, &apos;postcode_72&apos;, true, false, &apos;password_that_should_not_be72&apos;, 30, &apos;2001-01-01 17:59:59&apos;, &apos;2002-12-12 17:59:59&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user80" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified, registrationSiteId) 
VALUES (80, 1, &apos;iatesting1234+user80@gmail.com&apos;, &apos;first_name_80&apos;, &apos;last_name_80&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-15 15:11:59&apos;, &apos;mobile_80&apos;, &apos;housenum_80&apos;, &apos;street_80&apos;, &apos;town_80&apos;, &apos;county_80&apos;, &apos;country_80&apos;, &apos;postcode_80&apos;, true, true, 80);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user90" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user (id, active, email, firstName, lastName, title, gender ,birthDate, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, emailVerified, verified, registrationSiteId) 
VALUES (90, 1, &apos;iatesting1234+user90@gmail.com&apos;, &apos;first_name_90&apos;, &apos;last_name_90&apos;, &apos;Mr&apos;, &apos;MALE&apos;, &apos;2003-11-15 15:11:49&apos;, &apos;mobile_90&apos;, &apos;housenum_90&apos;, &apos;street_90&apos;, &apos;town_90&apos;, &apos;county_90&apos;, &apos;country_90&apos;, &apos;postcode_90&apos;, true, true, 90);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load userid" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user1_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user1_id1@test.com&apos;, &apos;EMAIL&apos;, 1);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user1_id2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user1@test.com&apos;, &apos;EMAIL&apos;, 1);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user1_id3" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;UUID_1&apos;, &apos;UUID&apos;, 1);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user2_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user2_id1@test.com&apos;, &apos;EMAIL&apos;, 2);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user3_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user3_id1@test.com&apos;, &apos;EMAIL&apos;, 3);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user4_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user4_id1@test.com&apos;, &apos;EMAIL&apos;, 4);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user4_id2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user4@test.com&apos;, &apos;EMAIL&apos;, 4);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user5_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user5_id1@test.com&apos;, &apos;EMAIL&apos;, 5);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user6_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user6_id1@test.com&apos;, &apos;EMAIL&apos;, 6);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user7_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user7_id1@test.com&apos;, &apos;EMAIL&apos;, 7);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user8_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user8_id1@test.com&apos;, &apos;EMAIL&apos;, 8);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user10_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user10_id1@test.com&apos;, &apos;EMAIL&apos;, 10);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user11_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user11_id1@test.com&apos;, &apos;EMAIL&apos;, 11);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user12_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user12_id1@test.com&apos;, &apos;EMAIL&apos;, 12);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user13_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user13_id1@test.com&apos;, &apos;EMAIL&apos;, 13);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user20_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user20_id1@test.com&apos;, &apos;EMAIL&apos;, 20);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user21_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user21_id1@test.com&apos;, &apos;EMAIL&apos;, 21);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user22_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user22_id1@test.com&apos;, &apos;EMAIL&apos;, 22);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user30_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user30_id1@test.com&apos;, &apos;EMAIL&apos;, 30);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user30_id2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;UUID_30&apos;, &apos;UUID&apos;, 30);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user31_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user31_id1@test.com&apos;, &apos;EMAIL&apos;, 31);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user31_id2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;UUID_31&apos;, &apos;UUID&apos;, 31);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user32_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;iatesting1234+user32@gmail.com&apos;, &apos;EMAIL&apos;, 32);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user40_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user40_id1@test.com&apos;, &apos;EMAIL&apos;, 40);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user41_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user41_id1@test.com&apos;, &apos;EMAIL&apos;, 41);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user50_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user50_id1@test.com&apos;, &apos;EMAIL&apos;, 50);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user51_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user51_id1@test.com&apos;, &apos;EMAIL&apos;, 51);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user60_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user60_id1@test.com&apos;, &apos;EMAIL&apos;, 60);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user60_id2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;UUID_60&apos;, &apos;UUID&apos;, 60);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user70_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user70_id1@test.com&apos;, &apos;EMAIL&apos;, 70);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user71_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;user71_id1@test.com&apos;, &apos;EMAIL&apos;, 71);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user71_id2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;UUID_71&apos;, &apos;UUID&apos;, 71);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user72_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;iatesting1234+user72@gmail.com&apos;, &apos;EMAIL&apos;, 72);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user80_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;iatesting1234+user80@gmail.com&apos;, &apos;EMAIL&apos;, 80);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user80_id2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;UUID_80&apos;, &apos;UUID&apos;, 80);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user90_id1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;iatesting1234+user90@gmail.com&apos;, &apos;EMAIL&apos;, 90);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load user90_id2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO userid (createdAt, userId, UserIdType, user_id) VALUES (?, &apos;UUID_90&apos;, &apos;UUID&apos;, 90);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load tag" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;1&apos;, &apos;100&apos;, &apos;MONTHLY&apos;, &apos;COMMENT&apos;, &apos;ACTIVE&apos;, &apos;1&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;2&apos;, &apos;110&apos;, &apos;MONTHLY&apos;, &apos;LIKE&apos;, &apos;ACTIVE&apos;, &apos;1&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag3 (deleted partner)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;3&apos;, &apos;120&apos;, &apos;MONTHLY&apos;, &apos;LIKE2&apos;, &apos;ACTIVE&apos;, &apos;4&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag4 (inactive)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;4&apos;, &apos;130&apos;, &apos;MONTHLY&apos;, &apos;LIKE3&apos;, &apos;INACTIVE&apos;, &apos;1&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag5 (deleted)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;5&apos;, &apos;140&apos;, &apos;MONTHLY&apos;, &apos;LIKE4&apos;, &apos;ACTIVE&apos;, &apos;1&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag6" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;6&apos;, &apos;100&apos;, &apos;MONTHLY&apos;, &apos;COMMENT2&apos;, &apos;ACTIVE&apos;, &apos;5&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag7" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;7&apos;, &apos;150&apos;, &apos;MONTHLY&apos;, &apos;COMMENT3&apos;, &apos;ACTIVE&apos;, &apos;6&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag8" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;8&apos;, &apos;150&apos;, &apos;MONTHLY&apos;, &apos;COMMENT4&apos;, &apos;ACTIVE&apos;, &apos;7&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag10" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;10&apos;, &apos;100&apos;, &apos;MONTHLY&apos;, &apos;TAG10&apos;, &apos;ACTIVE&apos;, &apos;10&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag11" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;11&apos;, &apos;50&apos;, &apos;MONTHLY&apos;, &apos;TAG11&apos;, &apos;ACTIVE&apos;, &apos;11&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag12" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;12&apos;, &apos;150&apos;, &apos;MONTHLY&apos;, &apos;TAG12&apos;, &apos;ACTIVE&apos;, &apos;12&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag13" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;13&apos;, &apos;150&apos;, &apos;MONTHLY&apos;, &apos;TAG13&apos;, &apos;ACTIVE&apos;, &apos;13&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag20" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;20&apos;, &apos;150&apos;, &apos;MONTHLY&apos;, &apos;TAG20&apos;, &apos;ACTIVE&apos;, &apos;20&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag22" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;22&apos;, &apos;122&apos;, &apos;MONTHLY&apos;, &apos;TAG22&apos;, &apos;ACTIVE&apos;, &apos;22&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag40" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;40&apos;, &apos;100&apos;, &apos;MONTHLY&apos;, &apos;TAG40&apos;, &apos;ACTIVE&apos;, &apos;40&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag50" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;50&apos;, &apos;100&apos;, &apos;MONTHLY&apos;, &apos;TAG50&apos;, &apos;ACTIVE&apos;, &apos;50&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag60_1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;60&apos;, &apos;1000&apos;, &apos;MONTHLY&apos;, &apos;TAG60_1&apos;, &apos;ACTIVE&apos;, &apos;60&apos;, &apos;http://TAG60_1.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag60_2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;61&apos;, &apos;100&apos;, &apos;MONTHLY&apos;, &apos;TAG60_2&apos;, &apos;ACTIVE&apos;, &apos;60&apos;, &apos;http://TAG60_2.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag60_3" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;62&apos;, &apos;100&apos;, &apos;MONTHLY&apos;, &apos;TAG60_3&apos;, &apos;ACTIVE&apos;, &apos;60&apos;, &apos;http://TAG60_3.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag61_1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;63&apos;, &apos;1000&apos;, &apos;MONTHLY&apos;, &apos;TAG61_1&apos;, &apos;ACTIVE&apos;, &apos;61&apos;, &apos;http://TAG61_1.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag70_1_MONTHLY" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;70&apos;, &apos;1000&apos;, &apos;MONTHLY&apos;, &apos;TAG70_1&apos;, &apos;ACTIVE&apos;, &apos;70&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag70_2_WEEKLY" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;71&apos;, &apos;100&apos;, &apos;WEEKLY&apos;, &apos;TAG70_2&apos;, &apos;ACTIVE&apos;, &apos;70&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag70_3_DAILY" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;72&apos;, &apos;200&apos;, &apos;DAILY&apos;, &apos;TAG70_3&apos;, &apos;ACTIVE&apos;, &apos;70&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag70_4_ONCE" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;73&apos;, &apos;300&apos;, &apos;ONCE&apos;, &apos;TAG70_4&apos;, &apos;ACTIVE&apos;, &apos;70&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag70_5_NONE" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;74&apos;, &apos;10&apos;, &apos;NONE&apos;, &apos;TAG70_5&apos;, &apos;ACTIVE&apos;, &apos;70&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag70_5_ONCE_NO_TRANS" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId) VALUES (&apos;75&apos;, &apos;20&apos;, &apos;ONCE&apos;, &apos;TAG70_6&apos;, &apos;ACTIVE&apos;, &apos;70&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag affiliateManager" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, createdAt, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;1000&apos;, ?, &apos;100000&apos;, &apos;NONE&apos;, &apos;affiliateManager&apos;, &apos;ACTIVE&apos;, &apos;1000&apos;, &apos;http://lorempixel.com/24/24/&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag2_2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;76&apos;, &apos;100&apos;, &apos;DAILY&apos;, &apos;TAG2_2&apos;, &apos;ACTIVE&apos;, &apos;2&apos;, &apos;http://TAG2_2.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag2_3" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;77&apos;, &apos;300&apos;, &apos;DAILY&apos;, &apos;TAG2_3&apos;, &apos;ACTIVE&apos;, &apos;2&apos;, &apos;http://TAG2_3.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag80_1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;78&apos;, &apos;1000&apos;, &apos;DAILY&apos;, &apos;TAG80_1&apos;, &apos;ACTIVE&apos;, &apos;80&apos;, &apos;http://TAG80_1.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag90_1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;79&apos;, &apos;1000&apos;, &apos;DAILY&apos;, &apos;TAG90_1&apos;, &apos;ACTIVE&apos;, &apos;90&apos;, &apos;http://TAG90_1.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag90_2" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;80&apos;, &apos;1000&apos;, &apos;DAILY&apos;, &apos;TAG90_2&apos;, &apos;ACTIVE&apos;, &apos;90&apos;, &apos;http://TAG90_2.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag90_3" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, cap, frequency, tagKey, tagStatus, partnerId, imageUrl) VALUES (&apos;81&apos;, &apos;1000&apos;, &apos;DAILY&apos;, &apos;TAG90_3&apos;, &apos;ACTIVE&apos;, &apos;90&apos;, &apos;http://TAG90_3.com&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag epointsFacebook" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, createdAt, cap, frequency, tagKey, tagStatus, partnerId, description, autoConfirm) 
VALUES (&apos;1001&apos;, ?, &apos;10&apos;, &apos;ONCE&apos;, &apos;epointsFacebook&apos;, &apos;ACTIVE&apos;, &apos;1001&apos;, &apos;liked epoints.com on facebook&apos;, &apos;1&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag epointsTwitter" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, createdAt, cap, frequency, tagKey, tagStatus, partnerId, description, autoConfirm) 
VALUES (&apos;1002&apos;, ?, &apos;10&apos;, &apos;ONCE&apos;, &apos;epointsTwitter&apos;, &apos;ACTIVE&apos;, &apos;1001&apos;, &apos;shared epoints.com on twitter&apos;, &apos;1&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag epointsLogin" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, createdAt, cap, frequency, tagKey, tagStatus, partnerId, description, autoConfirm) 
VALUES (&apos;1003&apos;, ?, &apos;1&apos;, &apos;DAILY&apos;, &apos;epointsLogin&apos;, &apos;ACTIVE&apos;, &apos;1001&apos;, &apos;logged into epoints&apos;, &apos;1&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag epointsRegistration" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, createdAt, cap, frequency, tagKey, tagStatus, partnerId, description, autoConfirm) 
VALUES (&apos;1004&apos;, ?, &apos;50&apos;, &apos;ONCE&apos;, &apos;epointsRegistration&apos;, &apos;ACTIVE&apos;, &apos;1001&apos;, &apos;completed registration of epoints&apos;, &apos;1&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag epointsPersonalDetails" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, createdAt, cap, frequency, tagKey, tagStatus, partnerId, description, autoConfirm) 
VALUES (&apos;1005&apos;, ?, &apos;5&apos;, &apos;ONCE&apos;, &apos;epointsPersonalDetails&apos;, &apos;ACTIVE&apos;, &apos;1001&apos;, &apos;completed personal details part of account&apos;, &apos;1&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load tag epointsContactDetails" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO tag (id, createdAt, cap, frequency, tagKey, tagStatus, partnerId, description, autoConfirm) 
VALUES (&apos;1006&apos;, ?, &apos;5&apos;, &apos;ONCE&apos;, &apos;epointsContactDetails&apos;, &apos;ACTIVE&apos;, &apos;1001&apos;, &apos;completed contact details part of account&apos;, &apos;1&apos;);</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load user_pointsmap" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user1 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;1&apos;, &apos;20&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user1 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;1&apos;, &apos;85&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user1 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;1&apos;, &apos;10&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user1 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;1&apos;, &apos;5&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user1 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;1&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user2 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;2&apos;, &apos;22&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user2 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;2&apos;, &apos;12&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user2 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;2&apos;, &apos;2&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user2 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;2&apos;, &apos;32&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user2 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;2&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user4_deleted - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;4&apos;, &apos;11&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user4_deleted - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;4&apos;, &apos;6&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user4_deleted - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;4&apos;, &apos;12&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user4_deleted - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;4&apos;, &apos;1&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user4_deleted - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;4&apos;, &apos;0&apos;, &apos;SPENT&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user5 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;5&apos;, &apos;1&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user5 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;5&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user5 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;5&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user5 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;5&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user5 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;5&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user6 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;6&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user6 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;6&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user6 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;6&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user6 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;6&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user6 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;6&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user7 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;7&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user7 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;7&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user7 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;7&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user7 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;7&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user7 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;7&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user8 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;8&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user8 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;8&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user8 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;8&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user8 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;8&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user8 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;8&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user10 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;10&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user10 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;10&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user10 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;10&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user10 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;10&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user10 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;10&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user11 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;11&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user11 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;11&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user11 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;11&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user11 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;11&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user11 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;11&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user12 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;12&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user12 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;12&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user12 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;12&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user12 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;12&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user12 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;12&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user13 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;13&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user13 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;13&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user13 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;13&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user13 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;13&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user13 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;13&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user20 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;20&apos;, &apos;20&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user20 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;20&apos;, &apos;15&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user20 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;20&apos;, &apos;10&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user20 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;20&apos;, &apos;5&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user20 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;20&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user21 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;21&apos;, &apos;26&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user21 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;21&apos;, &apos;12&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user21 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;21&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user21 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;21&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user21 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;21&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user22 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;22&apos;, &apos;122&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user22 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;22&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user22 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;22&apos;, &apos;0&apos;, &apos;DECLINED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user22 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;22&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user22 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;22&apos;, &apos;0&apos;, &apos;SPENT&apos;);






</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user40 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;40&apos;, &apos;30&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user50 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;50&apos;, &apos;40&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user50 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;50&apos;, &apos;30&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user50 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;50&apos;, &apos;6&apos;, &apos;DECLINED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user50 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;50&apos;, &apos;17&apos;, &apos;REDEEMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user50 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;50&apos;, &apos;12&apos;, &apos;SPENT&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user60 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;60&apos;, &apos;17&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user60 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;60&apos;, &apos;30&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user60 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;60&apos;, &apos;6&apos;, &apos;DECLINED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user60 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;60&apos;, &apos;9&apos;, &apos;REDEEMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user60 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;60&apos;, &apos;3&apos;, &apos;SPENT&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user70 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;70&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user70 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;70&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user70 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;70&apos;, &apos;0&apos;, &apos;DECLINED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user70 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;70&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user70 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;70&apos;, &apos;0&apos;, &apos;SPENT&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user71 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;71&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user71 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;71&apos;, &apos;1&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user71 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;71&apos;, &apos;0&apos;, &apos;DECLINED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user71 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;71&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user71 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;71&apos;, &apos;0&apos;, &apos;SPENT&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user72 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;72&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user72 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;72&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user72 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;72&apos;, &apos;0&apos;, &apos;DECLINED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user72 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;72&apos;, &apos;1&apos;, &apos;REDEEMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user72 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;72&apos;, &apos;0&apos;, &apos;SPENT&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user80 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;80&apos;, &apos;0&apos;, &apos;CONFIRMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user80 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;80&apos;, &apos;0&apos;, &apos;PENDING&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user80 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;80&apos;, &apos;0&apos;, &apos;DECLINED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user80 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;80&apos;, &apos;0&apos;, &apos;REDEEMED&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load pointsmap user80 - spent" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO user_pointsmap (User_id, pointsMap, pointsMap_KEY) VALUES (&apos;80&apos;, &apos;0&apos;, &apos;SPENT&apos;);





</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load points" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user1 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;1&apos;, ?, &apos;20&apos;, &apos;extTransId01&apos;, &apos;CONFIRMED&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;20&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user1 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;2&apos;, ?, &apos;15&apos;, &apos;extTransId02&apos;, &apos;PENDING&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;20&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user1 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;3&apos;, &apos;10&apos;, &apos;extTransId03&apos;, &apos;DECLINED&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user1 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;4&apos;, &apos;5&apos;, &apos;extTransId04&apos;, &apos;REDEEMED&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user1 - pending (deleted)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;5&apos;, &apos;15&apos;, &apos;extTransId05&apos;, &apos;PENDING&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user4_deleted - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;6&apos;, &apos;5&apos;, &apos;extTransId06&apos;, &apos;PENDING&apos;, &apos;3&apos;, &apos;1&apos;, &apos;4&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user1 - pending (deleted partner)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;7&apos;, &apos;35&apos;, &apos;extTransId07&apos;, &apos;PENDING&apos;, &apos;1&apos;, &apos;4&apos;, &apos;1&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user2 - confirmed (unlinked partner)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;8&apos;, &apos;22&apos;, &apos;extTransId08&apos;, &apos;CONFIRMED&apos;, &apos;1&apos;, &apos;3&apos;, &apos;2&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user2 - pending (unlinked partner)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;9&apos;, &apos;12&apos;, &apos;extTransId09&apos;, &apos;PENDING&apos;, &apos;1&apos;, &apos;3&apos;, &apos;2&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user2 - declined (unlinked partner)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;10&apos;, &apos;2&apos;, &apos;extTransId10&apos;, &apos;DECLINED&apos;, &apos;1&apos;, &apos;3&apos;, &apos;2&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user2 - redeemed (unlinked partner)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;11&apos;, &apos;32&apos;, &apos;extTransId11&apos;, &apos;REDEEMED&apos;, &apos;1&apos;, &apos;3&apos;, &apos;2&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user1 - pending (inactive tag)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;12&apos;, &apos;6&apos;, &apos;extTransId12&apos;, &apos;PENDING&apos;, &apos;4&apos;, &apos;1&apos;, &apos;1&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user1 - pending (deleted tag)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;13&apos;, &apos;14&apos;, &apos;extTransId13&apos;, &apos;PENDING&apos;, &apos;5&apos;, &apos;1&apos;, &apos;1&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user20 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;20&apos;, &apos;20&apos;, &apos;extTransId20&apos;, &apos;CONFIRMED&apos;, &apos;20&apos;, &apos;20&apos;, &apos;20&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user20 - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;21&apos;, &apos;15&apos;, &apos;extTransId21&apos;, &apos;PENDING&apos;, &apos;20&apos;, &apos;20&apos;, &apos;20&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user20 - declined" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;22&apos;, &apos;10&apos;, &apos;extTransId22&apos;, &apos;DECLINED&apos;, &apos;20&apos;, &apos;20&apos;, &apos;20&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user20 - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;23&apos;, &apos;5&apos;, &apos;extTransId23&apos;, &apos;REDEEMED&apos;, &apos;20&apos;, &apos;20&apos;, &apos;20&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user4_deleted - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;25&apos;, &apos;11&apos;, &apos;extTransId25&apos;, &apos;CONFIRMED&apos;, &apos;3&apos;, &apos;1&apos;, &apos;4&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user21_deleted_partner - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;26&apos;, &apos;26&apos;, &apos;extTransId26&apos;, &apos;CONFIRMED&apos;, &apos;3&apos;, &apos;4&apos;, &apos;21&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user22 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;27&apos;, &apos;122&apos;, &apos;extTransId27&apos;, &apos;CONFIRMED&apos;, &apos;22&apos;, &apos;22&apos;, &apos;22&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user21_deleted_partner - pending" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;28&apos;, &apos;12&apos;, &apos;extTransId28&apos;, &apos;PENDING&apos;, &apos;3&apos;, &apos;4&apos;, &apos;21&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user5 - confirmed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, delta, externalTransactionId, status, tagId, partnerId, userId) VALUES (&apos;29&apos;, &apos;1&apos;, &apos;extTransId29&apos;, &apos;CONFIRMED&apos;, &apos;6&apos;, &apos;5&apos;, &apos;5&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user40 - confirmed (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;30&apos;, ?,&apos;10&apos;, &apos;extTransId40&apos;, &apos;CONFIRMED&apos;, &apos;40&apos;, &apos;40&apos;, &apos;40&apos;, &apos;10&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user40 - confirmed (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;31&apos;, ? ,&apos;20&apos;, &apos;extTransId41&apos;, &apos;CONFIRMED&apos;, &apos;40&apos;, &apos;40&apos;, &apos;40&apos;, &apos;30&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - confirmed (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;32&apos;, ?, ?,&apos;15&apos;, &apos;extTransId50&apos;, &apos;CONFIRMED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;15&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR},${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - confirmed (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;33&apos;, ?, ? ,&apos;25&apos;, &apos;extTransId51&apos;, &apos;CONFIRMED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;40&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR},${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - pending (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;34&apos;, ?,&apos;10&apos;, &apos;extTransId52&apos;, &apos;PENDING&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;40&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - pending (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;35&apos;, ? ,&apos;20&apos;, &apos;extTransId53&apos;, &apos;PENDING&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;40&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - declined (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;36&apos;, ?, ?, &apos;2&apos;, &apos;extTransId50_declined1&apos;, &apos;DECLINED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR},${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - declined (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;37&apos;, ? , ?, &apos;4&apos;, &apos;extTransId50_declined2&apos;, &apos;DECLINED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR},${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - confirmed (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;38&apos;, ?,&apos;7&apos;, &apos;external_u60_01&apos;, &apos;CONFIRMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - confirmed (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;39&apos;, ? ,&apos;10&apos;, &apos;external_u60_02&apos;, &apos;CONFIRMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - pending (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;40&apos;, ?,&apos;10&apos;, &apos;external_u60_03&apos;, &apos;PENDING&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - pending (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;41&apos;, ? ,&apos;20&apos;, &apos;external_u60_04&apos;, &apos;PENDING&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - declined (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;42&apos;, ?, &apos;2&apos;, &apos;external_u60_05&apos;, &apos;DECLINED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - declined (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;43&apos;, ? ,&apos;4&apos;, &apos;external_u60_06&apos;, &apos;DECLINED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - redeemed (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;44&apos;, ?, &apos;3&apos;, &apos;external_u60_06&apos;, &apos;REDEEMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - redeemed (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;45&apos;, ? ,&apos;6&apos;, &apos;external_u60_07&apos;, &apos;REDEEMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - spent (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;46&apos;, ?, &apos;1&apos;, &apos;external_u60_06&apos;, &apos;SPENT&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user60 - spent (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;47&apos;, ? ,&apos;2&apos;, &apos;external_u60_07&apos;, &apos;SPENT&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user41 - pending (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;48&apos;, ? ,&apos;10&apos;, &apos;extTrans_pend_u41&apos;, &apos;PENDING&apos;, &apos;40&apos;, &apos;40&apos;, &apos;41&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_1 (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;49&apos;, ?,&apos;10&apos;, &apos;external_u70_01&apos;, &apos;CONFIRMED&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_1 (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;50&apos;, ? ,&apos;5&apos;, &apos;external_u70_02&apos;, &apos;CONFIRMED&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - pending TAG70_1 (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;51&apos;, ?,&apos;20&apos;, &apos;external_u70_03&apos;, &apos;PENDING&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - pending TAG70_1 (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;52&apos;, ? ,&apos;8&apos;, &apos;external_u70_04&apos;, &apos;PENDING&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - declined TAG70_1 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;53&apos;, ?, &apos;5&apos;, &apos;external_u70_05&apos;, &apos;DECLINED&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - redeemed TAG70_1 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;54&apos;, ?, &apos;8&apos;, &apos;external_u70_06&apos;, &apos;REDEEMED&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - spent TAG70_1 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;55&apos;, ?, &apos;10&apos;, &apos;external_u70_07&apos;, &apos;SPENT&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - redeemed (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;56&apos;, ?,&apos;12&apos;, &apos;extTransId50_redeemed1&apos;, &apos;REDEEMED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - redeemed (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;57&apos;, ? ,&apos;5&apos;, &apos;extTransId50_redeemed2&apos;, &apos;REDEEMED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - spent (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;58&apos;, ?,&apos;10&apos;, &apos;extTransId50_spent1&apos;, &apos;SPENT&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user50 - spent (first day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;59&apos;, ? ,&apos;2&apos;, &apos;extTransId50_spent2&apos;, &apos;SPENT&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_2 (end of previous week)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;60&apos;, ?, &apos;2&apos;, &apos;external_u70_T70_2_01&apos;, &apos;CONFIRMED&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_WEEK_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_2 (first day of current week)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;61&apos;, ? ,&apos;6&apos;, &apos;external_u70_T70_2_02&apos;, &apos;CONFIRMED&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_WEEK_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - pending TAG70_2 (end of previous week)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;62&apos;, ?,&apos;22&apos;, &apos;external_u70_T70_2_03&apos;, &apos;PENDING&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_WEEK_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - pending TAG70_2 (first day of current week)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;63&apos;, ? ,&apos;9&apos;, &apos;external_u70_T70_2_04&apos;, &apos;PENDING&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_DAY_OF_CURRENT_WEEK_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - declined TAG70_2 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;64&apos;, ?, &apos;2&apos;, &apos;external_u70_T70_2_05&apos;, &apos;DECLINED&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - redeemed TAG70_2 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;65&apos;, ?, &apos;5&apos;, &apos;external_u70_T70_2_06&apos;, &apos;REDEEMED&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - spent TAG70_2 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;66&apos;, ?, &apos;8&apos;, &apos;external_u70_T70_2_07&apos;, &apos;SPENT&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_3 (last hour of yesterday)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;67&apos;, ?, &apos;1&apos;, &apos;external_u70_T70_3_01&apos;, &apos;CONFIRMED&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_HOUR_OF_YESTERDAY_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_3 (first hour of today)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;68&apos;, ? ,&apos;3&apos;, &apos;external_u70_T70_3_02&apos;, &apos;CONFIRMED&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_HOUR_OF_TODAY_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - pending TAG70_3 (last hour of yesterday)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;69&apos;, ?, &apos;4&apos;, &apos;external_u70_T70_3_03&apos;, &apos;PENDING&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_HOUR_OF_YESTERDAY_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - pending TAG70_3 (first hour of today)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;70&apos;, ? ,&apos;5&apos;, &apos;external_u70_T70_3_04&apos;, &apos;PENDING&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_FIRST_HOUR_OF_TODAY_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - declined TAG70_3 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;71&apos;, ?, &apos;5&apos;, &apos;external_u70_T70_3_05&apos;, &apos;DECLINED&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - redeemed TAG70_3 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;72&apos;, ?, &apos;10&apos;, &apos;external_u70_T70_3_06&apos;, &apos;REDEEMED&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - spent TAG70_3 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;73&apos;, ?, &apos;15&apos;, &apos;external_u70_T70_3_07&apos;, &apos;SPENT&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_1 (last day of previous month/fisrt day of current month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;74&apos;, ?, ?, &apos;1&apos;, &apos;external_u70_08&apos;, &apos;CONFIRMED&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}, ${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_2 (end of previous week/start of current week)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;75&apos;, ?, ?, &apos;1&apos;, &apos;external_u70_T70_2_08&apos;, &apos;CONFIRMED&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_WEEK_STR},${DT_FIRST_DAY_OF_CURRENT_WEEK_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_3 (last hour of yesterday)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;76&apos;, ?, ?, &apos;1&apos;, &apos;external_u70_T70_3_08&apos;, &apos;CONFIRMED&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${DT_LAST_HOUR_OF_YESTERDAY_STR},${DT_FIRST_HOUR_OF_TODAY_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_4 (end of previous month/end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;77&apos;, ?, ?, &apos;10&apos;, &apos;external_u70_t70_4_01&apos;, &apos;CONFIRMED&apos;, &apos;73&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR},${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - confirmed TAG70_5 (end of previous month/end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;78&apos;, ?, ?, &apos;10&apos;, &apos;external_u70_t70_5_01&apos;, &apos;CONFIRMED&apos;, &apos;74&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR},${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - pending TAG70_5 (end of previous month)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;79&apos;, ?, &apos;50&apos;, &apos;external_u70_t70_5_02&apos;, &apos;PENDING&apos;, &apos;74&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);</stringProp>
            <stringProp name="queryArguments">${DT_LAST_DAY_OF_PREVIOUS_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - declined TAG70_5 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;80&apos;, ?, &apos;5&apos;, &apos;external_u70_t70_5_03&apos;, &apos;DECLINED&apos;, &apos;74&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - redeemed TAG70_5 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;81&apos;, ?, &apos;9&apos;, &apos;external_u70_t70_5_04&apos;, &apos;REDEEMED&apos;, &apos;74&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user70 - spent TAG70_5 (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;82&apos;, ?, &apos;11&apos;, &apos;external_u70_t70_5_05&apos;, &apos;SPENT&apos;, &apos;74&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user71 - pending COMMENT (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;83&apos;, ?, &apos;1&apos;, &apos;external_u71_COMMENT_01&apos;, &apos;PENDING&apos;, &apos;1&apos;, &apos;1&apos;, &apos;71&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user4_deleted - redeemed" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;84&apos;, ?, &apos;1&apos;, &apos;external_u4_t3_01&apos;, &apos;REDEEMED&apos;, &apos;3&apos;, &apos;1&apos;, &apos;4&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user72 - redeemed (current DT)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO points (id, createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (&apos;85&apos;, ?, &apos;1&apos;, &apos;external_u72_T_AM_01&apos;, &apos;REDEEMED&apos;, &apos;1000&apos;, &apos;1000&apos;, &apos;72&apos;, &apos;0&apos;);







</stringProp>
            <stringProp name="queryArguments">${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load request" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="dummy request" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO request (id, createdAt, apiAccessKey, requestType, success) VALUES (&apos;1&apos;, &apos;2013-05-22 13:00:00&apos;, &apos;dummy&apos;, &apos;dummy&apos;, 1);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load usertoken" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="dummy token" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO usertoken (id, active) VALUES (&apos;1&apos;, false);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="token TYPE REGISTER" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO usertoken (id, active, tokenType, tokenValue) VALUES (&apos;2&apos;, false, &apos;REGISTER&apos;, &apos;REGISTERtoken&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="token TYPE EMAIL_CHANGE" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO usertoken (id, active, tokenType, tokenValue) VALUES (&apos;3&apos;, false, &apos;EMAIL_CHANGE&apos;, &apos;EMAIL_CHANGEtoken&apos;);







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="modules (to be disabled)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370849118000</longProp>
        <longProp name="ThreadGroup.end_time">1370849118000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add/deduct STATUS points PASS" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add/deduct STATUS points PASS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:${POINTS},&quot;pointsType&quot;:&quot;${POINTS_STATUS}&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;${EXTTRANS_ID}&quot;,&quot;reasonText&quot;:&quot;${ACTIVITY_INFO}&quot;,&quot;autoConfirm&quot;: ${AUTOCONFIRM}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get points ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">pointsId</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add/deduct STATUS points FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add/deduct STATUS points FAIL" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:${POINTS},&quot;pointsType&quot;:&quot;${POINTS_STATUS}&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;${EXTTRANS_ID}&quot;,&quot;reasonText&quot;:&quot;${ACTIVITY_INFO}&quot;,&quot;autoConfirm&quot;: ${AUTOCONFIRM}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get points ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">pointsId</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="confirm STATUS points PASS" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: confirm STATUS points PASS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${EXTUSER_ID}&quot;,&quot;userIdType&quot;:&quot;${EXTUSER_ID_TYPE}&quot;,&quot;clientId&quot;: &quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;externalTransactionId&quot;:&quot;${EXTTRANS_ID}&quot;,&quot;reasonText&quot;:&quot;${REASON_TXT}&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/${TRANS_ID}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="confirm STATUS points FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: confirm STATUS points FAIL" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${EXTUSER_ID}&quot;,&quot;userIdType&quot;:&quot;${EXTUSER_ID_TYPE}&quot;,&quot;clientId&quot;: &quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;externalTransactionId&quot;:&quot;${EXTTRANS_ID}&quot;,&quot;reasonText&quot;:&quot;${REASON_TXT}&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/${TRANS_ID}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DECLINE PENDING points PASS" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: DECLINE PENDING points" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${EXTUSER_ID}&quot;,&quot;userIdType&quot;:&quot;${EXTUSER_ID_TYPE}&quot;,&quot;clientId&quot;: &quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;pointsType&quot;:&quot;DECLINED&quot;,&quot;externalTransactionId&quot;: &quot;${EXTTRANS_ID}&quot;,&quot;reasonText&quot;: &quot;${REASON_TXT}&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/${pointsId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DECLINE PENDING points FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: DECLINE PENDING points" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${EXTUSER_ID}&quot;,&quot;userIdType&quot;:&quot;${EXTUSER_ID_TYPE}&quot;,&quot;clientId&quot;: &quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;pointsType&quot;:&quot;DECLINED&quot;,&quot;externalTransactionId&quot;: &quot;${EXTTRANS_ID}&quot;,&quot;reasonText&quot;: &quot;${REASON_TXT}&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/${pointsId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="change email procedure (phase 1) PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userEmail, s_userEmailVerified, s_userActive</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX 1 (old)" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${OLD_EMAIL}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX 2 (new)" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${NEW_EMAIL}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update user EMAIL information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;email&quot;:&quot;${NEW_EMAIL}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get email" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_email</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get firstName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_firstName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-574047299">${s_userEmail_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_email</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userEmail, e_userEmailVerified, e_userActive</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-574047299">${s_userEmail_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmail_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">m_tokenId, m_tokenActive, m_tokenType, m_tokenValue, m_tokenUserId, m_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenNewValue" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824514103">${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenNewValue_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 15s" enabled="false">
            <stringProp name="BeanShellSampler.query">Thread.sleep(15000);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read EMAIL changed email from INBOX 1 (old) " enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${OLD_EMAIL}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-908514259">1 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: content" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="944475520">Hi, ${m_firstName}</stringProp>
                <stringProp name="-131229343">Your email addres was changed.</stringProp>
                <stringProp name="1046810383">From Your old email: ${s_userEmail_1} to new one: ${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read EMAIL changed email from INBOX 2 (new) " enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${NEW_EMAIL}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-908514259">1 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: content" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="944475520">Hi, ${m_firstName}</stringProp>
                <stringProp name="809878267">You have requested email change. To verify this please follow the link.</stringProp>
                <stringProp name="1046810383">From Your old email: ${s_userEmail_1} to new one: ${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmationLink" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-46524513">&lt;a href=&quot;${SERVER_URL}/registration/activate/${m_tokenValue_1}&quot;&gt;${SERVER_URL}/registration/activate/${m_tokenValue_1}&lt;/a&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell: pass token" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(token${__threadNum}, ${m_tokenValue_1})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_ADD_CP_U_S1|2|5|15|18|19" enabled="false">
        <stringProp name="TestPlan.comments">Adding CONFIRMED points for user REGISTERED in ePoints.com

User_1 - S1 - Adding CONFIRMED points for user REGISTERED in ePoints.com - below tag/partner cap limit
User_2 - S2 - Adding CONFIRMED points for user REGISTERED in ePoints.com - tag cap limit reached
User_3 - S5 - Adding CONFIRMED point for user REGISTERED in ePoints.com - partner cap limit reached
User_4 - S15 - Adding CONFIRMED points for user REGISTERED in ePoints.com - below tag/partner cap limit - user ACTIVE/NOT VERIFIED
User_5 - S18 - Adding CONFIRMED points for user REGISTERED in ePoints.com - below tag cap limit (POST_PAY)
User_5 - S19 - Adding CONFIRMED points for user REGISTERED in ePoints.com - tag cap limit reached (POST_PAY)
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">6</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369229778000</longProp>
        <longProp name="ThreadGroup.end_time">1369229778000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1511903523">ASSIGN_REF</stringProp>
            <stringProp name="2109326302">ACTIVITY_INFO</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="48343569">AUTOCONFIRM</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="426092030">
              <stringProp name="49">1</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1056380267">external_transaction for S1</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="541582407">assigner123_S1</stringProp>
              <stringProp name="-936395201">activity_info_S1</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="483488862">
              <stringProp name="53">5</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="-1036590717">p5aKey</stringProp>
              <stringProp name="985151748">user5_id1@test.com</stringProp>
              <stringProp name="180211155">COMMENT2</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1056380268">external_transaction for S2</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="541582408">assigner123_S2</stringProp>
              <stringProp name="-936395200">activity_info_S2</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3525">p5</stringProp>
              <stringProp name="1844523183">onbehalf_p5</stringProp>
              <stringProp name="-1731174930">http://www.domain.com/s2</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="26154724">
              <stringProp name="55">7</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="-1035667196">p6aKey</stringProp>
              <stringProp name="-25965502">user7_id1@test.com</stringProp>
              <stringProp name="180211156">COMMENT3</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1056380271">external_transaction for S5</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="541582411">assigner123_S5</stringProp>
              <stringProp name="-936395197">activity_info_S5</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3526">p6</stringProp>
              <stringProp name="1844523184">onbehalf_p6</stringProp>
              <stringProp name="-1731174929">http://www.domain.com/s3</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="2058595558">
              <stringProp name="1754">71</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1056380270">external_transaction for S4</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="541582410">assigner123_S4</stringProp>
              <stringProp name="-936395198">activity_info_S4</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731174928">http://www.domain.com/s4</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-2145292249">
              <stringProp name="1815">90</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="-830890109">TAG90_1</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950035">external_transaction for S18</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-390814511">assigner123_S18</stringProp>
              <stringProp name="1036519897">activity_info_S18</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="1345643997">onbehalf_p90</stringProp>
              <stringProp name="-2126815013">http://www.domain.com/s90</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="890339420">
              <stringProp name="1815">90</stringProp>
              <stringProp name="56601">999</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="-830890109">TAG90_1</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950034">external_transaction for S19</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-390814510">assigner123_S19</stringProp>
              <stringProp name="1036519898">activity_info_S19</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="1345643997">onbehalf_p90</stringProp>
              <stringProp name="-2126815013">http://www.domain.com/s90</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_ADD_CP_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONFIRMED points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;CONFIRMED&apos; AND partner.accessKey=?;
</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsConfirmedSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal, paymentType
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnerCurrentTotal,partnerPaymentType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get last request id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM request
ORDER BY createdAt DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_lastRequestId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: add CONFIRMED points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="47563919">add/deduct STATUS points PASS</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="790946370">${__javaScript(${s_pointsConfirmed_1}+${POINTS})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If points history exists" enabled="true">
            <stringProp name="IfController.condition">&quot;${s_pointsConfirmedSum_1}&quot; != &quot;\${s_pointsConfirmedSum_1}&quot; </stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s CONFIRMED points from points table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;CONFIRMED&apos; AND partner.accessKey=?;</stringProp>
              <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
              <stringProp name="variableNames">e_pointsConfirmedSum</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: CONFIRMED points = user_pointsmap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1102710593">${__javaScript(${s_pointsConfirmedSum_1}+${POINTS})}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pointsConfirmedSum_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnerCurrentTotal</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partner points" enabled="true">
              <stringProp name="BeanShellAssertion.query">
String paymentType = vars.get(&quot;partnerPaymentType_1&quot;);
Integer points = Integer.parseInt(vars.get(&quot;POINTS&quot;));

Integer s_partnerCurrentTotal = Integer.parseInt(vars.get(&quot;s_partnerCurrentTotal_1&quot;));
Integer e_partnerCurrentTotal = Integer.parseInt(vars.get(&quot;e_partnerCurrentTotal_1&quot;));

if (paymentType.equals(&quot;PRE_PAY&quot;))
{
  if (e_partnerCurrentTotal.equals(s_partnerCurrentTotal - points))
  {
    Failure = false;
  }
  else 
  {
    Failure = true;
    FailureMessage = &quot;partner: current_total not correct: &quot; + &quot;s_(&quot; + s_partnerCurrentTotal + &quot;) != e_(&quot; + e_partnerCurrentTotal + &quot;),  points: &quot; + points;
    print (FailureMessage);   // this goes to stdout
    log.warn(FailureMessage); // this goes to the JMeter log file
    break;
  }
}
else if (paymentType.equals(&quot;POST_PAY&quot;))
{
  if (e_partnerCurrentTotal.equals(s_partnerCurrentTotal))
  {
    Failure = false;
  }
  else 
  {
    Failure = true;
    FailureMessage = &quot;partner: current_total not correct: &quot; + &quot;s_(&quot; + s_partnerCurrentTotal + &quot;) != e_(&quot; + e_partnerCurrentTotal + &quot;),  points: &quot; + points;
    print (FailureMessage);   // this goes to stdout
    log.warn(FailureMessage); // this goes to the JMeter log file
    break;
  }
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, requestType, pointsId, success, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestType,e_requestPointsId,e_requestSuccess,e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1396641816">${pointsId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestPointsId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT delta, externalTransactionId, status, tag.tagKey, partner.accessKey, userId, activityInfo, sourceURI
FROM points
LEFT JOIN tag ON points.tagId=tag.id
LEFT JOIN partner ON points.partnerId=partner.id
WHERE points.id=?;</stringProp>
            <stringProp name="queryArguments">${pointsId}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_delta, e_extTransactionId, e_pointsStatus, e_tagKey, e_partnerKey, e_userId, e_pointsActivityInfo,e_sourceURI</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: delta" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-709167293">${POINTS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_delta_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ext transaction id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1432461823">${EXTTRANS_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_extTransactionId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="613703686">${POINTS_STATUS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tag key" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1710033510">${TAG_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partner key" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: user id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: activity_info" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="510523638">${ACTIVITY_INFO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsActivityInfo_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: sourceURI" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1177357026">${SOURCE_URI}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_sourceURI_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_ADD_CP_U_S3|4|6|7|8|9|10|11|12|13|14|16|17|20|21" enabled="false">
        <stringProp name="TestPlan.comments">Adding CONFIRMED points for user REGISTERED in ePoints.com

User_1 - S3 (S2 required) - Trying to ADD CONFIRMED points for user REGISTERED in ePoints.com - above tag cap limit (with points history)
User_2 - S4 - Trying to ADD CONFIRMED points for user REGISTERED in ePoints.com - above tag cap limit (without points history)
User_3 - S6 (S5 required) - Trying to ADD CONFIRMED point for user REGISTERED in ePoints.com - above partner cap limit (with points history)
User_4 - S7 - Trying to ADD CONFIRMED point for user REGISTERED in ePoints.com - above partner cap limit (without points history)
User_5 - S8 - Trying to ADD REDEEMED points for user REGISTERED in ePoints.com
User_6 - S9 - Trying to ADD DECLINED points for user REGISTERED in ePoints.com
User_7 - S10 - Trying to ADD CONFIRMED points for user REGISTERED in ePoints.com but marked as INACTIVE
User_8 - S11 - Trying to ADD CONFIRMED points for user REGISTERED in ePoints.com whose parter is marked as INACTIVE
User_9 - S12 - Trying to ADD CONFIRMED points for user REGISTERED in ePoints.com whose parter tag is INACTIVE
User_10 - S13 - Trying to ADD NEGATIVE BALANCE of CONFIRMED points for user REGISTERED in ePoints.com - below tag cap limit
User_11 - S14 - Trying to ADD 0 CONFIRMED points for user REGISTERED in ePoints.com - below tag cap limit
User_12 - S16 - Trying to ADD CONFIRMED points for user REGISTERED in ePoints.com - earn action will exceed tag cap limit
User_13 - S17 - Trying to ADD CONFIRMED points for user REGISTERED in ePoints.com - earn action will exceed partner cap limit
User_14 - S20 (S18|S19 required) - Trying to ADD CONFIRMED points for user REGISTERED in ePoints.com - above tag cap limit (POST_PAY)
User_15 - S21 - Trying to ADD NEGATIVE BALANCE of CONFIRMED points for user REGISTERED in ePoints.com - below tag cap limit (POST_PAY)
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1369229778000</longProp>
        <longProp name="ThreadGroup.end_time">1369229778000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="1511903523">ASSIGN_REF</stringProp>
            <stringProp name="2109326302">ACTIVITY_INFO</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="48343569">AUTOCONFIRM</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1893783701">
              <stringProp name="53">5</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1036590717">p5aKey</stringProp>
              <stringProp name="985151748">user5_id1@test.com</stringProp>
              <stringProp name="180211155">COMMENT2</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1056380269">external_transaction for S3</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-242904481">Cap for tag COMMENT2 has been exceeded</stringProp>
              <stringProp name="541582409">assigner123_S3</stringProp>
              <stringProp name="-936395199">activity_info_S3</stringProp>
              <stringProp name="-826229359">PUBLISHER_USER_CAP_EXCEEDED</stringProp>
              <stringProp name="3525">p5</stringProp>
              <stringProp name="1844523183">onbehalf_p5</stringProp>
              <stringProp name="-1731175020">http://www.domain.com/p5</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="513623545">
              <stringProp name="54">6</stringProp>
              <stringProp name="48626">101</stringProp>
              <stringProp name="-1036590717">p5aKey</stringProp>
              <stringProp name="479593123">user6_id1@test.com</stringProp>
              <stringProp name="180211155">COMMENT2</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1056380270">external_transaction for S4</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-242904481">Cap for tag COMMENT2 has been exceeded</stringProp>
              <stringProp name="541582410">assigner123_S4</stringProp>
              <stringProp name="-936395198">activity_info_S4</stringProp>
              <stringProp name="-826229359">PUBLISHER_USER_CAP_EXCEEDED</stringProp>
              <stringProp name="3525">p5</stringProp>
              <stringProp name="1844523183">onbehalf_p5</stringProp>
              <stringProp name="-1731175020">http://www.domain.com/p5</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-62598518">
              <stringProp name="55">7</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1035667196">p6aKey</stringProp>
              <stringProp name="-25965502">user7_id1@test.com</stringProp>
              <stringProp name="180211156">COMMENT3</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1056380272">external_transaction for S6</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-287379061">Insufficient balance: 0</stringProp>
              <stringProp name="541582412">assigner123_S6</stringProp>
              <stringProp name="-936395196">activity_info_S6</stringProp>
              <stringProp name="1108971037">INSUFFICIENT_PUBLISHER_BALANCE</stringProp>
              <stringProp name="3526">p6</stringProp>
              <stringProp name="1844523184">onbehalf_p6</stringProp>
              <stringProp name="-1731175019">http://www.domain.com/p6</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1883760213">
              <stringProp name="56">8</stringProp>
              <stringProp name="48626">101</stringProp>
              <stringProp name="-1034743675">p7aKey</stringProp>
              <stringProp name="-531524127">user8_id1@test.com</stringProp>
              <stringProp name="180211157">COMMENT4</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1056380273">external_transaction for S7</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-1293368180">Insufficient balance: 100</stringProp>
              <stringProp name="541582413">assigner123_S7</stringProp>
              <stringProp name="-936395195">activity_info_S7</stringProp>
              <stringProp name="1108971037">INSUFFICIENT_PUBLISHER_BALANCE</stringProp>
              <stringProp name="3527">p7</stringProp>
              <stringProp name="1844523185">onbehalf_p7</stringProp>
              <stringProp name="-1731175018">http://www.domain.com/p7</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-1605490856">
              <stringProp name="49">1</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="2408251">REDEEMED</stringProp>
              <stringProp name="1056380274">external_transaction for S8</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="1796609294">Invalid points value: 1</stringProp>
              <stringProp name="541582414">assigner123_S8</stringProp>
              <stringProp name="-936395194">activity_info_S8</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-2039453680">
              <stringProp name="49">1</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="1350822958">DECLINED</stringProp>
              <stringProp name="1056380275">external_transaction for S9</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="1796609294">Invalid points value: 1</stringProp>
              <stringProp name="541582415">assigner123_S9</stringProp>
              <stringProp name="-936395193">activity_info_S9</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1989889662">
              <stringProp name="52">4</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950043">external_transaction for S10</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="680436732">User with id user4_id1@test.com is invalid</stringProp>
              <stringProp name="-390814519">assigner123_S10</stringProp>
              <stringProp name="1036519889">activity_info_S10</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-1074428693">
              <stringProp name="49">1</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="72436603">LIKE2</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950042">external_transaction for S11</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="-390814518">assigner123_S11</stringProp>
              <stringProp name="1036519890">activity_info_S11</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="3524">p4</stringProp>
              <stringProp name="1844523182">onbehalf_p4</stringProp>
              <stringProp name="-1731175021">http://www.domain.com/p4</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-2107384358">
              <stringProp name="49">1</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="72436604">LIKE3</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950041">external_transaction for S12</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="1581744878">Tag with name LIKE3 not exists</stringProp>
              <stringProp name="-390814517">assigner123_S12</stringProp>
              <stringProp name="1036519891">activity_info_S12</stringProp>
              <stringProp name="2036351825">EVENT_NOT_FOUND</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="999739683">
              <stringProp name="49">1</stringProp>
              <stringProp name="1444">-1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950040">external_transaction for S13</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-139686809">Invalid points value: -1</stringProp>
              <stringProp name="-390814516">assigner123_S13</stringProp>
              <stringProp name="1036519892">activity_info_S13</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-104884334">
              <stringProp name="49">1</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950039">external_transaction for S14</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="1796609293">Invalid points value: 0</stringProp>
              <stringProp name="-390814515">assigner123_S14</stringProp>
              <stringProp name="1036519893">activity_info_S14</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-618435417">
              <stringProp name="49">1</stringProp>
              <stringProp name="48626">101</stringProp>
              <stringProp name="-1039361280">p2aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-1827923541">TAG2_2</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950037">external_transaction for S16</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-1531509001">Cap for tag TAG2_2 has been exceeded</stringProp>
              <stringProp name="-390814513">assigner123_S16</stringProp>
              <stringProp name="1036519895">activity_info_S16</stringProp>
              <stringProp name="-826229359">PUBLISHER_USER_CAP_EXCEEDED</stringProp>
              <stringProp name="3522">p2</stringProp>
              <stringProp name="1844523180">onbehalf_p2</stringProp>
              <stringProp name="-1731175023">http://www.domain.com/p2</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-864287835">
              <stringProp name="49">1</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1039361280">p2aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-1827923540">TAG2_3</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950036">external_transaction for S17</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-1293367219">Insufficient balance: 200</stringProp>
              <stringProp name="-390814512">assigner123_S17</stringProp>
              <stringProp name="1036519896">activity_info_S17</stringProp>
              <stringProp name="1108971037">INSUFFICIENT_PUBLISHER_BALANCE</stringProp>
              <stringProp name="3522">p2</stringProp>
              <stringProp name="1844523180">onbehalf_p2</stringProp>
              <stringProp name="-1731175023">http://www.domain.com/p2</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-933376691">
              <stringProp name="1815">90</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="-830890109">TAG90_1</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950012">external_transaction for S20</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-1276126375">Cap for tag TAG90_1 has been exceeded</stringProp>
              <stringProp name="-390814488">assigner123_S20</stringProp>
              <stringProp name="1036519920">activity_info_S20</stringProp>
              <stringProp name="-826229359">PUBLISHER_USER_CAP_EXCEEDED</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="1345643997">onbehalf_p90</stringProp>
              <stringProp name="-2126817896">http://www.domain.com/p90</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-1530309412">
              <stringProp name="1815">90</stringProp>
              <stringProp name="1444">-1</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="-830890109">TAG90_1</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1611950011">external_transaction for S21</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-139686809">Invalid points value: -1</stringProp>
              <stringProp name="-390814487">assigner123_S21</stringProp>
              <stringProp name="1036519921">activity_info_S21</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="1345643997">onbehalf_p90</stringProp>
              <stringProp name="-2126817896">http://www.domain.com/p90</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_ADD_CP_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONFIRMED points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;CONFIRMED&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsConfirmedSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: add CONFIRMED points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="47265692">add/deduct STATUS points FAIL</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If points history exists" enabled="true">
            <stringProp name="IfController.condition">&quot;${s_pointsConfirmedSum_1}&quot; != &quot;\${s_pointsConfirmedSum_1}&quot; </stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s CONFIRMED points from points table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;CONFIRMED&apos; AND partner.accessKey=?;</stringProp>
              <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
              <stringProp name="variableNames">e_pointsConfirmedSum</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: CONFIRMED points = user_pointsmap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="292717577">${__javaScript(${s_pointsConfirmedSum_1})}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pointsConfirmedSum_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2020228458">${__javaScript(${s_partnersPoints_1})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_partnersPoints_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, requestType, pointsId, success, userId, message, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestType,e_requestPointsId,e_requestSuccess,e_requestUserId,e_requestMsg,e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_ADD_PP_U_S1|2|5|13|16|17|18" enabled="false">
        <stringProp name="TestPlan.comments">Adding PENDING points for user REGISTERED in ePoints.com

User_1 - S1 - Adding PENDING points for user REGISTERED in ePoints.com - below tag/partner cap limit
User_2 - S2 - Adding PENDING points for user REGISTERED in ePoints.com - tag cap limit reached
User_3 - S5 - Adding PENDING points for user REGISTERED in ePoints.com - partner cap limit reached
User_4 - S13 - Adding PENDING points for user REGISTERED in ePoints.com - below tag/partner cap limit - user ACTIVE/NOT VERIFIED
User_5 - S16 - Adding PENDING points for user REGISTERED in ePoints.com for tag NONE
User_6 - S17 - Adding PENDING points for user REGISTERED in ePoints.com - below tag cap limit (POST_PAY)
User_7 - S18 - Adding PENDING points for user REGISTERED in ePoints.com - tag cap limit reached (POST_PAY)
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">7</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369229778000</longProp>
        <longProp name="ThreadGroup.end_time">1369229778000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1511903523">ASSIGN_REF</stringProp>
            <stringProp name="2109326302">ACTIVITY_INFO</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="48343569">AUTOCONFIRM</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1801777945">
              <stringProp name="1567">10</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="2066286925">p10aKey</stringProp>
              <stringProp name="-2121902172">user10_id1@test.com</stringProp>
              <stringProp name="79581977">TAG10</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380267">external_transaction for S1</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="541582407">assigner123_S1</stringProp>
              <stringProp name="-338598596">activity_info_PP_S1</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109199">p10</stringProp>
              <stringProp name="1345643749">onbehalf_p10</stringProp>
              <stringProp name="-2126818144">http://www.domain.com/p10</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1856526468">
              <stringProp name="1568">11</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="2067210446">p11aKey</stringProp>
              <stringProp name="1667506499">user11_id1@test.com</stringProp>
              <stringProp name="79581978">TAG11</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380268">external_transaction for S2</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="541582408">assigner123_S2</stringProp>
              <stringProp name="-338598595">activity_info_PP_S2</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109200">p11</stringProp>
              <stringProp name="1345643750">onbehalf_p11</stringProp>
              <stringProp name="-2126818143">http://www.domain.com/p11</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1166100616">
              <stringProp name="1569">12</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="2068133967">p12aKey</stringProp>
              <stringProp name="1161947874">user12_id1@test.com</stringProp>
              <stringProp name="79581979">TAG12</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380269">external_transaction for S3</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="541582409">assigner123_S3</stringProp>
              <stringProp name="-338598594">activity_info_PP_S3</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109201">p12</stringProp>
              <stringProp name="1345643751">onbehalf_p12</stringProp>
              <stringProp name="-2126818142">http://www.domain.com/p12</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="236840276">
              <stringProp name="1754">71</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380270">external_transaction for S4</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="541582410">assigner123_S4</stringProp>
              <stringProp name="-338598593">activity_info_PP_S4</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1345643749">onbehalf_p10</stringProp>
              <stringProp name="-2126818144">http://www.domain.com/p10</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1539652899">
              <stringProp name="1569">12</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="-1807187502">affiliateKey</stringProp>
              <stringProp name="1161947874">user12_id1@test.com</stringProp>
              <stringProp name="-1204092512">affiliateManager</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950037">external_transaction for S16</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-390814513">assigner123_S16</stringProp>
              <stringProp name="-1906621830">activity_info_PP_S16</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="-1204092512">affiliateManager</stringProp>
              <stringProp name="1844521750">onbehalf_AM</stringProp>
              <stringProp name="-2126817619">http://www.domain.com/pAM</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-746177210">
              <stringProp name="1815">90</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="-830890108">TAG90_2</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950036">external_transaction for S17</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-390814512">assigner123_S17</stringProp>
              <stringProp name="-1906621829">activity_info_PP_S17</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="1345643997">onbehalf_p90</stringProp>
              <stringProp name="-2126817896">http://www.domain.com/p90</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-348415355">
              <stringProp name="1815">90</stringProp>
              <stringProp name="56601">999</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="-830890108">TAG90_2</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950035">external_transaction for S18</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-390814511">assigner123_S18</stringProp>
              <stringProp name="-1906621828">activity_info_PP_S18</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="1345643997">onbehalf_p90</stringProp>
              <stringProp name="-2126817896">http://www.domain.com/p90</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_ADD_PP_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PENDING points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;PENDING&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsPendingSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal, paymentType
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnerCurrentTotal,partnerPaymentType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get last request id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM request
ORDER BY createdAt DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_lastRequestId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: add PENDING points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="47563919">add/deduct STATUS points PASS</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="806772618">${__javaScript(${s_pointsPending_1}+${POINTS})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If points history exists" enabled="true">
            <stringProp name="IfController.condition">&quot;${s_pointsPendingSum_1}&quot; != &quot;\${s_pointsPendingSum_1}&quot; </stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s PENDING points from points table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;PENDING&apos; AND partner.accessKey=?;</stringProp>
              <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
              <stringProp name="variableNames">e_pointsPendingSum</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: PENDING points = user_pointsmap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="136062201">${__javaScript(${s_pointsPendingSum_1}+${POINTS})}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pointsPendingSum_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnerCurrentTotal</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partner points" enabled="true">
              <stringProp name="BeanShellAssertion.query">
String paymentType = vars.get(&quot;partnerPaymentType_1&quot;);
Integer points = Integer.parseInt(vars.get(&quot;POINTS&quot;));

Integer s_partnerCurrentTotal = Integer.parseInt(vars.get(&quot;s_partnerCurrentTotal_1&quot;));
Integer e_partnerCurrentTotal = Integer.parseInt(vars.get(&quot;e_partnerCurrentTotal_1&quot;));

if (paymentType.equals(&quot;PRE_PAY&quot;))
{
  if (e_partnerCurrentTotal.equals(s_partnerCurrentTotal - points))
  {
    Failure = false;
  }
  else 
  {
    Failure = true;
    FailureMessage = &quot;partner: current_total not correct: &quot; + &quot;s_(&quot; + s_partnerCurrentTotal + &quot;) != e_(&quot; + e_partnerCurrentTotal + &quot;),  points: &quot; + points;
    print (FailureMessage);   // this goes to stdout
    log.warn(FailureMessage); // this goes to the JMeter log file
    break;
  }
}
else if (paymentType.equals(&quot;POST_PAY&quot;))
{
  if (e_partnerCurrentTotal.equals(s_partnerCurrentTotal))
  {
    Failure = false;
  }
  else 
  {
    Failure = true;
    FailureMessage = &quot;partner: current_total not correct: &quot; + &quot;s_(&quot; + s_partnerCurrentTotal + &quot;) != e_(&quot; + e_partnerCurrentTotal + &quot;),  points: &quot; + points;
    print (FailureMessage);   // this goes to stdout
    log.warn(FailureMessage); // this goes to the JMeter log file
    break;
  }
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, requestType, pointsId, success, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestType,e_requestPointsId,e_requestSuccess,e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1396641816">${pointsId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestPointsId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  delta, 
  externalTransactionId, 
  status,  
  tag.tagKey, 
  partner.accessKey, 
  userId, 
  activityInfo, 
  sourceURI, 
  p.autoConfirm, 
  DATE_FORMAT(p.autoConfirmDate,&apos;%Y-%m-%d %H:%i:%S&apos;)
FROM points p
LEFT JOIN tag ON p.tagId=tag.id
LEFT JOIN partner ON p.partnerId=partner.id
WHERE p.id=?;</stringProp>
            <stringProp name="queryArguments">${pointsId}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_delta, e_extTransactionId, e_pointsStatus, e_tagKey, e_partnerKey, e_userId, e_pointsActivityInfo, e_sourceURI, e_autoConfirm, e_autoConfirmDate</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: delta" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-709167293">${POINTS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_delta_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ext transaction id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1432461823">${EXTTRANS_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_extTransactionId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="613703686">${POINTS_STATUS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tag key" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1710033510">${TAG_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partner key" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: user id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: activity info" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="510523638">${ACTIVITY_INFO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsActivityInfo_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: sourceURI" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1177357026">${SOURCE_URI}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_sourceURI_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: autoConfirm" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1250422045">${AUTOCONFIRM}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_autoConfirm_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: autoConfirmDate" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-39844846">${__BeanShell(Calendar c = Calendar.getInstance(); c.add(Calendar.DAY_OF_MONTH\, ${AUTOCONFIRM}); c.set(Calendar.HOUR_OF_DAY\, 0); c.set(Calendar.MINUTE\, 0);  c.set(Calendar.SECOND\, 0); new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(c.getTime()) )}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_autoConfirmDate_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_ADD_PP_U_S3|4|6|7|8|9|10|11|12|14|15|19" enabled="false">
        <stringProp name="TestPlan.comments">Adding PENDING points for user REGISTERED in ePoints.com

User_1 - S3 (S2 required) - Trying to ADD PENDING points for user REGISTERED in ePoints.com - above tag cap limit (with points history)
User_2 - S4 - Trying to ADD PENDING points for user REGISTERED in ePoints.com - above tag cap limit (without points history)
User_3 - S6 (S5 required) - Trying to ADD PENDING points for user REGISTERED in ePoints.com - above partner cap limit (with points history)
User_4 - S7 - Trying to ADD PENDING points for user REGISTERED in ePoints.com - above partner cap limit (without points history)
User_5 - S8 - Trying to ADD PENDING points for user REGISTERED in ePoints.com but marked as INACTIVE
User_6 - S9 - Trying to ADD PENDING points for user REGISTERED in ePoints.com whose parter is marked as INACTIVE
User_7 - S10 - Trying to ADD PENDING points for user REGISTERED in ePoints.com whose parter tag is INACTIVE
User_8 - S11 - Trying to ADD NEGATIVE BALANCE of PENDING points for user REGISTERED in ePoints.com - below tag cap limit
User_9 - S12 - Trying to ADD 0 PENDING points for user REGISTERED in ePoints.com - below tag cap limit
User_10 - S14 - Trying to ADD PENDING points for user REGISTERED in ePoints.com - earn action will exceed tag cap limit
User_11 - S15 - Trying to ADD PENDING points for user REGISTERED in ePoints.com - earn action will exceed partner cap limit
User_12 - S19 - Trying to ADD PENDING points for user REGISTERED in ePoints.com - above tag cap limit (POST_PAY)
User_13 - S15 - Trying to ADD NEGATIVE BALANCE of PENDING points for user REGISTERED in ePoints.com - below tag cap limit (POST_PAY)
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">13</stringProp>
        <stringProp name="ThreadGroup.ramp_time">8</stringProp>
        <longProp name="ThreadGroup.start_time">1369229778000</longProp>
        <longProp name="ThreadGroup.end_time">1369229778000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="1511903523">ASSIGN_REF</stringProp>
            <stringProp name="2109326302">ACTIVITY_INFO</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="48343569">AUTOCONFIRM</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1059346806">
              <stringProp name="1568">11</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="2067210446">p11aKey</stringProp>
              <stringProp name="1667506499">user11_id1@test.com</stringProp>
              <stringProp name="79581978">TAG11</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380269">external_transaction for S3</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-901304208">Cap for tag TAG11 has been exceeded</stringProp>
              <stringProp name="541582409">assigner123_S3</stringProp>
              <stringProp name="-338598594">activity_info_PP_S3</stringProp>
              <stringProp name="-826229359">PUBLISHER_USER_CAP_EXCEEDED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109200">p11</stringProp>
              <stringProp name="1345643750">onbehalf_p11</stringProp>
              <stringProp name="-2126818143">http://www.domain.com/p11</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="10951757">
              <stringProp name="54">6</stringProp>
              <stringProp name="48626">101</stringProp>
              <stringProp name="-1036590717">p5aKey</stringProp>
              <stringProp name="479593123">user6_id1@test.com</stringProp>
              <stringProp name="180211155">COMMENT2</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380270">external_transaction for S4</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-242904481">Cap for tag COMMENT2 has been exceeded</stringProp>
              <stringProp name="541582410">assigner123_S4</stringProp>
              <stringProp name="-338598593">activity_info_PP_S4</stringProp>
              <stringProp name="-826229359">PUBLISHER_USER_CAP_EXCEEDED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3525">p5</stringProp>
              <stringProp name="1844523183">onbehalf_p5</stringProp>
              <stringProp name="-1731175020">http://www.domain.com/p5</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1757110049">
              <stringProp name="1569">12</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="2068133967">p12aKey</stringProp>
              <stringProp name="1161947874">user12_id1@test.com</stringProp>
              <stringProp name="79581979">TAG12</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380272">external_transaction for S6</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-287379061">Insufficient balance: 0</stringProp>
              <stringProp name="541582412">assigner123_S6</stringProp>
              <stringProp name="-338598591">activity_info_PP_S6</stringProp>
              <stringProp name="1108971037">INSUFFICIENT_PUBLISHER_BALANCE</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109201">p12</stringProp>
              <stringProp name="1345643751">onbehalf_p12</stringProp>
              <stringProp name="-2126818142">http://www.domain.com/p12</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-139534566">
              <stringProp name="1570">13</stringProp>
              <stringProp name="48626">101</stringProp>
              <stringProp name="2069057488">p13aKey</stringProp>
              <stringProp name="656389249">user13_id1@test.com</stringProp>
              <stringProp name="79581980">TAG13</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380273">external_transaction for S7</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-1293368180">Insufficient balance: 100</stringProp>
              <stringProp name="541582413">assigner123_S7</stringProp>
              <stringProp name="-338598590">activity_info_PP_S7</stringProp>
              <stringProp name="1108971037">INSUFFICIENT_PUBLISHER_BALANCE</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109202">p13</stringProp>
              <stringProp name="1345643752">onbehalf_p13</stringProp>
              <stringProp name="-2126818141">http://www.domain.com/p13</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-600095382">
              <stringProp name="52">4</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380274">external_transaction for S8</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="680436732">User with id user4_id1@test.com is invalid</stringProp>
              <stringProp name="541582414">assigner123_S8</stringProp>
              <stringProp name="-338598589">activity_info_PP_S8</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-488325976">
              <stringProp name="49">1</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="72436603">LIKE2</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1056380275">external_transaction for S9</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="541582415">assigner123_S9</stringProp>
              <stringProp name="-338598588">activity_info_PP_S9</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3524">p4</stringProp>
              <stringProp name="1844523182">onbehalf_p4</stringProp>
              <stringProp name="-1731175021">http://www.domain.com/p4</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="2033599508">
              <stringProp name="49">1</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="72436604">LIKE3</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950043">external_transaction for S10</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="1581744878">Tag with name LIKE3 not exists</stringProp>
              <stringProp name="-390814519">assigner123_S10</stringProp>
              <stringProp name="-1906621836">activity_info_PP_S10</stringProp>
              <stringProp name="2036351825">EVENT_NOT_FOUND</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1453400339">
              <stringProp name="49">1</stringProp>
              <stringProp name="1444">-1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950042">external_transaction for S11</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-139686809">Invalid points value: -1</stringProp>
              <stringProp name="-390814518">assigner123_S11</stringProp>
              <stringProp name="-1906621835">activity_info_PP_S11</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="615550657">
              <stringProp name="49">1</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="1668381247">COMMENT</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950041">external_transaction for S12</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="1796609293">Invalid points value: 0</stringProp>
              <stringProp name="-390814517">assigner123_S12</stringProp>
              <stringProp name="-1906621834">activity_info_PP_S12</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-1243061971">
              <stringProp name="49">1</stringProp>
              <stringProp name="48626">101</stringProp>
              <stringProp name="-1039361280">p2aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-1827923541">TAG2_2</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950039">external_transaction for S14</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-1531509001">Cap for tag TAG2_2 has been exceeded</stringProp>
              <stringProp name="-390814515">assigner123_S14</stringProp>
              <stringProp name="-1906621832">activity_info_PP_S14</stringProp>
              <stringProp name="-826229359">PUBLISHER_USER_CAP_EXCEEDED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3522">p2</stringProp>
              <stringProp name="1844523180">onbehalf_p2</stringProp>
              <stringProp name="-1731175023">http://www.domain.com/p2</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-881270303">
              <stringProp name="49">1</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1039361280">p2aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-1827923540">TAG2_3</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950038">external_transaction for S15</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-1293367219">Insufficient balance: 200</stringProp>
              <stringProp name="-390814514">assigner123_S15</stringProp>
              <stringProp name="-1906621831">activity_info_PP_S15</stringProp>
              <stringProp name="1108971037">INSUFFICIENT_PUBLISHER_BALANCE</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3522">p2</stringProp>
              <stringProp name="1844523180">onbehalf_p2</stringProp>
              <stringProp name="-1731175023">http://www.domain.com/p2</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="312890418">
              <stringProp name="1815">90</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="-830890108">TAG90_2</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950034">external_transaction for S19</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-2120598246">Cap for tag TAG90_2 has been exceeded</stringProp>
              <stringProp name="-390814510">assigner123_S19</stringProp>
              <stringProp name="-1906621827">activity_info_PP_S19</stringProp>
              <stringProp name="-826229359">PUBLISHER_USER_CAP_EXCEEDED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="1345643997">onbehalf_p90</stringProp>
              <stringProp name="-2126817896">http://www.domain.com/p90</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="417382923">
              <stringProp name="1815">90</stringProp>
              <stringProp name="1444">-1</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="-830890108">TAG90_2</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1611950012">external_transaction for S20</stringProp>
              <stringProp name="789737057">ADD_POINTS</stringProp>
              <stringProp name="-139686809">Invalid points value: -1</stringProp>
              <stringProp name="-390814488">assigner123_S20</stringProp>
              <stringProp name="-1906621805">activity_info_PP_S20</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="1345643997">onbehalf_p90</stringProp>
              <stringProp name="-2126817896">http://www.domain.com/p90</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_ADD_CP_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PENDING points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;PENDING&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsConfirmedSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: add PENDING points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="47265692">add/deduct STATUS points FAIL</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If points history exists" enabled="true">
            <stringProp name="IfController.condition">&quot;${s_pointsConfirmedSum_1}&quot; != &quot;\${s_pointsConfirmedSum_1}&quot; </stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s PENDING points from points table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;PENDING&apos; AND partner.accessKey=?;</stringProp>
              <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
              <stringProp name="variableNames">e_pointsConfirmedSum</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: PENDING points = user_pointsmap" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="292717577">${__javaScript(${s_pointsConfirmedSum_1})}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_pointsConfirmedSum_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2020228458">${__javaScript(${s_partnersPoints_1})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_partnersPoints_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, requestType, pointsId, success, userId, message, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestType,e_requestPointsId,e_requestSuccess,e_requestUserId,e_requestMsg, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_DCT_CP_U_S1|2|3|6|7" enabled="false">
        <stringProp name="TestPlan.comments">Deducting CONFIRMED points for user REGISTERED in ePoints.com

User_1 - S1 - Trying to deduct MORE CONFIRMED points THAN ALLOWED for user registered in ePoints.com
User_2 - S2 - Trying to deduct CONFIRMED points for user registered in ePoints.com but marked as INACTIVE
User_3 - S3 - Trying to deduct CONFIRMED points for user registered in ePoints.com whose patner is marked as INACTIVE
User_4 - S6 - Trying to deduct CONFIRMED points for ACTIVE user registered in ePoints.com but UNVERIFIED
User_5 - S7 - Trying to deduct CONFIRMED points for user registered in ePoints.com sending positive number of points

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369204338000</longProp>
        <longProp name="ThreadGroup.end_time">1369204338000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1511903523">ASSIGN_REF</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="2109326302">ACTIVITY_INFO</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-2056835445">PRODUCT_ID</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="48343569">AUTOCONFIRM</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-725099149">
              <stringProp name="44844">-21</stringProp>
              <stringProp name="2094916076">p20aKey</stringProp>
              <stringProp name="-614350363">user20_id1@test.com</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="863933390">AssignerReference_S1</stringProp>
              <stringProp name="-1918074609">INVALID_REDEMPTION_POINTS</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="-936395201">activity_info_S1</stringProp>
              <stringProp name="-1313381769">User has no enough points to deduct</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109230">p20</stringProp>
              <stringProp name="1345643780">onbehalf_p20</stringProp>
              <stringProp name="-1391237642">http://www.WS-PM_DCT_CP_R.com/s1</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="1141563648">ext_transid_deduct_s1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-1645654453">
              <stringProp name="1444">-1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="52">4</stringProp>
              <stringProp name="863933391">AssignerReference_S2</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="-936395200">activity_info_S2</stringProp>
              <stringProp name="-1076932840">User with userId=[user4_id1@test.com] is not active</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1391237641">http://www.WS-PM_DCT_CP_R.com/s2</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="1141563649">ext_transid_deduct_s2</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1330850220">
              <stringProp name="1444">-1</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-1119908988">user21_id1@test.com</stringProp>
              <stringProp name="1599">21</stringProp>
              <stringProp name="863933392">AssignerReference_S3</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="-936395199">activity_info_S3</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3524">p4</stringProp>
              <stringProp name="1844523182">onbehalf_p4</stringProp>
              <stringProp name="-1391237640">http://www.WS-PM_DCT_CP_R.com/s3</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="1141563650">ext_transid_deduct_s3</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-1033290034">
              <stringProp name="1444">-1</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="1754">71</stringProp>
              <stringProp name="863933393">AssignerReference_S4</stringProp>
              <stringProp name="-1427684523">USER_IS_NOT_VERIFIED</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="-936395198">activity_info_S4</stringProp>
              <stringProp name="203259368">User with userId=[user71_id1@test.com] is not verified</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1391237639">http://www.WS-PM_DCT_CP_R.com/s4</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="1141563651">ext_transid_deduct_s4</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-1070841515">
              <stringProp name="49">1</stringProp>
              <stringProp name="2094916076">p20aKey</stringProp>
              <stringProp name="-614350363">user20_id1@test.com</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="863933396">AssignerReference_S7</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="-936395195">activity_info_S7</stringProp>
              <stringProp name="1796609294">Invalid points value: 1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109230">p20</stringProp>
              <stringProp name="1345643780">onbehalf_p20</stringProp>
              <stringProp name="-1391238628">http://www.WS-PM_DCT_CP_R.com/S7</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="1141563654">ext_transid_deduct_s7</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_DCT_CP_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONFIRMED points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(SUM(points.delta), 0)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;CONFIRMED&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsConfirmedSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: CONFIRMED points = user_pointsmap" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_pointsConfirmedSum_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get last request id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM request
ORDER BY createdAt DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_lastRequestId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: deduct points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="47265692">add/deduct STATUS points FAIL</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s CONFIRMED points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(SUM(points.delta), 0)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;CONFIRMED&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">e_pointsConfirmedSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: CONFIRMED points = user_pointsmap" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-956883911">${s_pointsConfirmedSum_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmedSum_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2020228458">${__javaScript(${s_partnersPoints_1})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_partnersPoints_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check SPENT points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(points.id)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;SPENT&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">e_pointsSpentCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points SPENT count null" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpentCount_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, requestType, pointsId, success, userId, message, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestType,e_requestPointsId,e_requestSuccess,e_requestUserId,e_requestMsg, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_DCT_CP_U_S4|5" enabled="false">
        <stringProp name="TestPlan.comments">Deducting CONFIRMED points for user REGISTERED in ePoints.com

User_1 - S4 - Deducting SOME CONFIRMED points for user registered in ePoints.com
User_2 - S5 - Deducting ALL CONFIRMED points for user registered in ePoints.com (exp. SPENT)
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369204338000</longProp>
        <longProp name="ThreadGroup.end_time">1369204338000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="2109326302">ACTIVITY_INFO</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-2056835445">PRODUCT_ID</stringProp>
            <stringProp name="2038459508">EXP_STATUS</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="48343569">AUTOCONFIRM</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="471781091">
              <stringProp name="1444">-1</stringProp>
              <stringProp name="2094916076">p20aKey</stringProp>
              <stringProp name="-614350363">user20_id1@test.com</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1779170718">Activity_info_S4</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="1178024204">&quot;productId&quot;:&quot;&quot;,</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109230">p20</stringProp>
              <stringProp name="1345643780">onbehalf_p20</stringProp>
              <stringProp name="-1391237639">http://www.WS-PM_DCT_CP_R.com/s4</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="1141563651">ext_transid_deduct_s4</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-234120621">
              <stringProp name="44821">-19</stringProp>
              <stringProp name="2094916076">p20aKey</stringProp>
              <stringProp name="-614350363">user20_id1@test.com</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1779170717">Activity_info_S5</stringProp>
              <stringProp name="688679903">DEDUCT_POINTS</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109230">p20</stringProp>
              <stringProp name="1345643780">onbehalf_p20</stringProp>
              <stringProp name="-1391237638">http://www.WS-PM_DCT_CP_R.com/s5</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="1141563652">ext_transid_deduct_s5</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109066600">HTTP/1.1 201 Created</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_DCT_CP_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONFIRMED points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;CONFIRMED&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsConfirmedSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s SPENT points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;SPENT&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsSpentSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s REDEEMED points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;REDEEMED&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsRedeemedSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: deduct points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="47563919">add/deduct STATUS points PASS</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="790946370">${__javaScript(${s_pointsConfirmed_1}+${POINTS})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1892208900">${__javaScript(${s_pointsSpent_1}-(${POINTS}))}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s CONFIRMED points from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(points.delta)
FROM points, partner
WHERE points.userId=? AND points.status=&apos;CONFIRMED&apos; AND partner.accessKey=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">e_pointsConfirmedSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: CONFIRMED points" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-956883911">${s_pointsConfirmedSum_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmedSum_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2020228458">${__javaScript(${s_partnersPoints_1})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_partnersPoints_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, requestType, pointsId, success, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestType,e_requestPointsId,e_requestSuccess,e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check SPENT points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT delta, externalTransactionId, userId, partner.accessKey, activityInfo, status, sourceURI
FROM points, partner
WHERE points.partnerId=partner.id AND points.id=?;</stringProp>
            <stringProp name="queryArguments">${e_requestPointsId_1}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsDelta,e_pointsExtTrs, e_pointsUserId, e_pointsPartnerKey, e_pointsActivityInfo, e_pointsStatus, e_sourceURI</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: activityInfo" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="510523638">${ACTIVITY_INFO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsActivityInfo_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: delta" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1405837778">${__javaScript(Math.abs(${POINTS}))}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDelta_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ext transaction id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1432461823">${EXTTRANS_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsExtTrs_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partner" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPartnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: user" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: sourceURI" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1177357026">${SOURCE_URI}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_sourceURI_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_CFM_PP_U_S1|2|3|5|6|9" enabled="false">
        <stringProp name="TestPlan.comments">Confirming PENDING points for user REGISTERED in ePoints.com

User_1 - S1 - Trying to confirm CONFIRMED points for user registered in ePoints.com
User_2 - S2 - Trying to confirm DECLINED points for user registered in ePoints.com
User_3 - S3 - Trying to confirm REDEEMED points for user registered in ePoints.com
User_4 - S5 - Trying to confirm PENDING points for user registered in ePoints.com whose patner is marked as INACTIVE
User_5 - S6 - Trying to confirm PENDING points for user registered in ePoints.com whose partner&apos;s tag is INACTIVE
User_6 - S9 - Trying to confirm PENDING points for user registered in ePoints.com by CLIENT not associated with PENDING points
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">6</stringProp>
        <stringProp name="ThreadGroup.ramp_time">7</stringProp>
        <longProp name="ThreadGroup.start_time">1369204338000</longProp>
        <longProp name="ThreadGroup.end_time">1369204338000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1209022933">REASON_TXT</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="2063533618">TRANS_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1243317108">
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="1001682435">extTransId01</stringProp>
              <stringProp name="-852441335">INVALID_POINT_STATUS</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="-1578819691">Points with externalTransactionId=extTransId01 are in status=CONFIRMED so can not be confirmed</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1988384531">reason_negative_s1</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <collectionProp name="-826279582">
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1350822958">DECLINED</stringProp>
              <stringProp name="1001682437">extTransId03</stringProp>
              <stringProp name="-852441335">INVALID_POINT_STATUS</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="-1629563652">Points with externalTransactionId=extTransId03 are in status=DECLINED so can not be confirmed</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1988384530">reason_negative_s2</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="51">3</stringProp>
            </collectionProp>
            <collectionProp name="998811589">
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="2408251">REDEEMED</stringProp>
              <stringProp name="1001682438">extTransId04</stringProp>
              <stringProp name="-852441335">INVALID_POINT_STATUS</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="775238376">Points with externalTransactionId=extTransId04 are in status=REDEEMED so can not be confirmed</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1988384529">reason_negative_s3</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="52">4</stringProp>
            </collectionProp>
            <collectionProp name="-807373960">
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-1119908988">user21_id1@test.com</stringProp>
              <stringProp name="1599">21</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1001682504">extTransId28</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-1988384527">reason_negative_s5</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3524">p4</stringProp>
              <stringProp name="1844523182">onbehalf_p4</stringProp>
              <stringProp name="-1731175021">http://www.domain.com/p4</stringProp>
              <stringProp name="1606">28</stringProp>
            </collectionProp>
            <collectionProp name="1303375209">
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1001682467">extTransId12</stringProp>
              <stringProp name="2078470083">INVALID_POINT_TAG</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="1033660986">Points with externalTransactionId=extTransId12 are associated with Tag=LIKE3 which is inactive</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1988384526">reason_negative_s6</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="1569">12</stringProp>
            </collectionProp>
            <collectionProp name="336980062">
              <stringProp name="-1039361280">p2aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1001682436">extTransId02</stringProp>
              <stringProp name="-798806048">INVALID_POINT_UPDATE</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="-268761625">Can not find points with transactionId=2</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1988384523">reason_negative_s9</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3522">p2</stringProp>
              <stringProp name="1844523180">onbehalf_p2</stringProp>
              <stringProp name="-1731175023">http://www.domain.com/p2</stringProp>
              <stringProp name="50">2</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_CFM_PP_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get points to be CONFIRMED and their status" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT delta, status 
FROM points 
WHERE externalTransactionId=?;</stringProp>
            <stringProp name="queryArguments">${EXTTRANS_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_delta,s_deltaStatus</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="613703686">${POINTS_STATUS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_deltaStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: confirm PENDING points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="2116576877">confirm STATUS points FAIL</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-373978150">${s_partnersPoints_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_partnersPoints_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check points status" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT delta, status, reasonText
FROM points
WHERE externalTransactionId=?;</stringProp>
            <stringProp name="queryArguments">${EXTTRANS_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_delta,e_deltaStatus,e_reasonTxt</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="613703686">${POINTS_STATUS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_deltaStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: delta correct" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1830380874">${s_delta_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_delta_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_CFM_PP_U_S7|8|4" enabled="false">
        <stringProp name="TestPlan.comments">Confirming PENDING points for user REGISTERED in ePoints.com

User_1 - S7 - Confirming PENDING points for user registered in ePoints.com
User_2 - S8 - Confirming PENDING points for ACTIVE user registered in ePoints.com but UNVERIFIED
User_3 - S4 - Confirming PENDING points for user registered in ePoints.com but marked as INACTIVE				

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369204338000</longProp>
        <longProp name="ThreadGroup.end_time">1369204338000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="1067786020">POINTS_STATUS2</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1209022933">REASON_TXT</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="2063533618">TRANS_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1223370267">
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="1001682436">extTransId02</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1885475023">reason_positive_S7</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="50">2</stringProp>
            </collectionProp>
            <collectionProp name="-569175665">
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="1754">71</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="271611685">external_u71_COMMENT_01</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1885475024">reason_positive_S8</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="1787">83</stringProp>
            </collectionProp>
            <collectionProp name="998667688">
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="52">4</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-191714958">CHANGE_PENDING_TO_CONFIRMED</stringProp>
              <stringProp name="1001682440">extTransId06</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1885475020">reason_positive_S4</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109169">p01</stringProp>
              <stringProp name="1844523179">onbehalf_p1</stringProp>
              <stringProp name="-1731175024">http://www.domain.com/p1</stringProp>
              <stringProp name="54">6</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_CFM_PP_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get points to be CONFIRMED and their status" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id, delta, status, balance
FROM points 
WHERE externalTransactionId=?;</stringProp>
            <stringProp name="queryArguments">${EXTTRANS_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsId, s_delta,s_deltaStatus, s_pointsBalance</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="613703686">${POINTS_STATUS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_deltaStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: confirm PENDING points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="2116875104">confirm STATUS points PASS</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="143259775">${__javaScript(${s_pointsConfirmed_1}+${s_delta_1})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2103252295">${__javaScript(${s_pointsPending_1}-${s_delta_1})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2020228458">${__javaScript(${s_partnersPoints_1})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_partnersPoints_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check points status" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id, delta, status, reasonText, balance
FROM points
WHERE externalTransactionId=?;</stringProp>
            <stringProp name="queryArguments">${EXTTRANS_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_pointsId, e_delta,e_deltaStatus,e_reasonTxt, e_pointsBalance</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1844942882">${POINTS_STATUS2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_deltaStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: delta correct" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1830380874">${s_delta_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_delta_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: reason text" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-155295727">${REASON_TXT}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_reasonTxt_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="877936020">${TRANS_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestPointsId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_DCL_PP_U_S1|5|8|9|10|6" enabled="false">
        <stringProp name="TestPlan.comments">Declining PENDING points for user REGISTERED in ePoints.com

User_1 - S1 - DECLINING PENDING points for user registered in ePoints.com
User_2 - S5 - DECLINING PENDING points for INACTIVE user registered in ePoints.com
User_3 - S8 - DECLINING PENDING points for user registered in ePoints.com (POST_PAY)
User_4 - S9 - DECLINING PENDING points for INACTIVE user registered in ePoints.com (POST_PAY)
User_5 - S10 - DECLINING PENDING points for ACTIVE/UNVERIFIED user registered in ePoints.com (POST_PAY)
User_6 - S6 - DECLINING PENDING points for ACTIVE/UNVERIFIED user registered in ePoints.com

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">6</stringProp>
        <stringProp name="ThreadGroup.ramp_time">7</stringProp>
        <longProp name="ThreadGroup.start_time">1369204338000</longProp>
        <longProp name="ThreadGroup.end_time">1369204338000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1209022933">REASON_TXT</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-1552851861">EXTTRANS_ID_PENDING</stringProp>
            <stringProp name="1617121549">REASON_TXT_PENDING</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-759071446">
              <stringProp name="1567">10</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1888450865">decline_pending_S1</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-1145255841">onbehalf_p80_S1</stringProp>
              <stringProp name="3917944">http://www.WS-PM_DCL_PP_U.com/S1</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1696489557">ext_transid_declined_S1</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1665901424">pendingAdded_${TAG_KEY}_2BDeclined_S1</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
            </collectionProp>
            <collectionProp name="598748978">
              <stringProp name="1567">10</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1888450861">decline_pending_S5</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-1145255837">onbehalf_p80_S5</stringProp>
              <stringProp name="3917948">http://www.WS-PM_DCL_PP_U.com/S5</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1696489561">ext_transid_declined_S5</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1665901428">pendingAdded_${TAG_KEY}_2BDeclined_S5</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
            </collectionProp>
            <collectionProp name="1213491877">
              <stringProp name="1567">10</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="1815">90</stringProp>
              <stringProp name="-1888450858">decline_pending_S8</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="-1144332313">onbehalf_p90_S8</stringProp>
              <stringProp name="3917951">http://www.WS-PM_DCL_PP_U.com/S8</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1696489564">ext_transid_declined_S8</stringProp>
              <stringProp name="-830890107">TAG90_3</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1665901431">pendingAdded_${TAG_KEY}_2BDeclined_S8</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
            </collectionProp>
            <collectionProp name="-967353521">
              <stringProp name="1567">10</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="1815">90</stringProp>
              <stringProp name="-1888450857">decline_pending_S9</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="-1145255833">onbehalf_p80_S9</stringProp>
              <stringProp name="3917952">http://www.WS-PM_DCL_PP_U.com/S9</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1696489565">ext_transid_declined_S9</stringProp>
              <stringProp name="-830890107">TAG90_3</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1665901432">pendingAdded_${TAG_KEY}_2BDeclined_S9</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
            </collectionProp>
            <collectionProp name="-1021064265">
              <stringProp name="1567">10</stringProp>
              <stringProp name="-1999647163">p90aKey</stringProp>
              <stringProp name="-20392252">iatesting1234+user90@gmail.com</stringProp>
              <stringProp name="1815">90</stringProp>
              <stringProp name="1587565377">decline_pending_S10</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109447">p90</stringProp>
              <stringProp name="-1114563504">onbehalf_p90_S10</stringProp>
              <stringProp name="121456312">http://www.WS-PM_DCL_PP_U.com/S10</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1051568763">ext_transid_declined_S10</stringProp>
              <stringProp name="-830890107">TAG90_3</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="103336640">pendingAdded_${TAG_KEY}_2BDeclined_S10</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
            </collectionProp>
            <collectionProp name="1227657940">
              <stringProp name="1567">10</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1888450860">decline_pending_S6</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-1145255836">onbehalf_p80_S6</stringProp>
              <stringProp name="3917949">http://www.WS-PM_DCL_PP_U.com/S6</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1696489562">ext_transid_declined_S6</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1665901429">pendingAdded_${TAG_KEY}_2BDeclined_S6</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING points" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:${POINTS},&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;${EXTTRANS_ID_PENDING}&quot;,&quot;reasonText&quot;:&quot;${REASON_TXT_PENDING}&quot;,&quot;autoConfirm&quot;: 30}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1601759544">Created</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get points ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">pointsId</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user == 2 || 4" enabled="true">
            <stringProp name="IfController.condition">(${__threadNum} == 2) || (${__threadNum} == 4)</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user == 5 || 6" enabled="true">
            <stringProp name="IfController.condition">(${__threadNum} == 5) || (${__threadNum} == 6)</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="unverify user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.verified=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_DCL_PP_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s last PENDING points ID from points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT p.id
FROM points p, partner pr
WHERE p.userId=? AND p.status = &apos;PENDING&apos; AND pr.accessKey=?
ORDER BY p.id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsLastId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal, paymentType
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnerCurrentTotal,partnerPaymentType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: DECLINE points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="780255163">DECLINE PENDING points PASS</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1064938056">${__javaScript(${s_pointsPending_1}-${POINTS})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-466244545">${__javaScript(${s_pointsDeclined_1}+${POINTS})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s DECLINED points in points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(updatedAt) *1000 updatedAt,
  activityInfo,
  delta,
  externalTransactionId,
  reasonText,
  status
FROM points p
WHERE p.id = ?;</stringProp>
            <stringProp name="queryArguments">${s_pointsLastId_1}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_pointsUpdatedAt, e_pointsActivityInfo, e_pointsDelta, e_pointsExtTransId, e_pointsReasonTxt, e_pointsStatus</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: updatedAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbUpdatedAt = Long.parseLong(vars.get(&quot;e_pointsUpdatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbUpdatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbUpdatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;updatedAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: activityInfo" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1135913255">${REASON_TXT_PENDING}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsActivityInfo_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: delta" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-709167293">${POINTS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDelta_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: extTransId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1022991159">${EXTTRANS_ID_PENDING}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsExtTransId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: reasonTxt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-155295727">${REASON_TXT}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsReasonTxt_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1350822958">DECLINED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnerCurrentTotal</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partner points" enabled="true">
              <stringProp name="BeanShellAssertion.query">
String paymentType = vars.get(&quot;partnerPaymentType_1&quot;);
Integer points = Integer.parseInt(vars.get(&quot;POINTS&quot;));

Integer s_partnerCurrentTotal = Integer.parseInt(vars.get(&quot;s_partnerCurrentTotal_1&quot;));
Integer e_partnerCurrentTotal = Integer.parseInt(vars.get(&quot;e_partnerCurrentTotal_1&quot;));

if (paymentType.equals(&quot;PRE_PAY&quot;))
{
  if (e_partnerCurrentTotal.equals(s_partnerCurrentTotal + points))
  {
    Failure = false;
  }
  else 
  {
    Failure = true;
    FailureMessage = &quot;partner: current_total not correct: &quot; + &quot;s_(&quot; + s_partnerCurrentTotal + &quot;) != e_(&quot; + e_partnerCurrentTotal + &quot;),  points: &quot; + points;
    print (FailureMessage);   // this goes to stdout
    log.warn(FailureMessage); // this goes to the JMeter log file
    break;
  }
}
else if (paymentType.equals(&quot;POST_PAY&quot;))
{
  if (e_partnerCurrentTotal.equals(s_partnerCurrentTotal))
  {
    Failure = false;
  }
  else 
  {
    Failure = true;
    FailureMessage = &quot;partner: current_total not correct: &quot; + &quot;s_(&quot; + s_partnerCurrentTotal + &quot;) != e_(&quot; + e_partnerCurrentTotal + &quot;),  points: &quot; + points;
    print (FailureMessage);   // this goes to stdout
    log.warn(FailureMessage); // this goes to the JMeter log file
    break;
  }
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, UNIX_TIMESTAMP(createdAt) *1000, apiAccessKey, message, requestType, success, pointsId, userId, idType, orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pointsId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1396641816">${pointsId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestPointsId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BS: pass pointsId" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(PENDING_POINTS_ID, ${pointsId})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Teardown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user == 2 || 4" enabled="true">
            <stringProp name="IfController.condition">(${__threadNum} == 2) || (${__threadNum} == 4)</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user == 5 || 6" enabled="true">
            <stringProp name="IfController.condition">(${__threadNum} == 5) || (${__threadNum} == 6)</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="verify user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.verified=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_DCL_PP_U_S2|3|4|7" enabled="false">
        <stringProp name="TestPlan.comments">Declining PENDING points for user REGISTERED in ePoints.com

User_1 - S2 - (WS-PM_DCL_PP_U_S1 required) Trying to DECLINE already declined PENDING points for user registered in ePoints.com
User_2 - S3 - Trying to DECLINE PENDING points for user registered in ePoints.com requested by UNKNOWN client
User_3 - S4 - Trying to DECLINE PENDING points for user registered in ePoints.com requested by INACTIVE client
User_4 - S7 - Trying to DECLINE PENDING points for user registered in ePoints.com requested with INCORRECT userid

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369204338000</longProp>
        <longProp name="ThreadGroup.end_time">1369204338000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1209022933">REASON_TXT</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1012302643">EXTTRANS_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-1552851861">EXTTRANS_ID_PENDING</stringProp>
            <stringProp name="1617121549">REASON_TXT_PENDING</stringProp>
            <stringProp name="466139486">pointsId</stringProp>
            <stringProp name="-39669481">SQL_PARTNER_KEY</stringProp>
            <stringProp name="475478624">PARTNER_KEY_PENDING</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="637087855">
              <stringProp name="0"></stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1888450864">decline_pending_S2</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-1145255840">onbehalf_p80_S2</stringProp>
              <stringProp name="3917945">http://www.WS-PM_DCL_PP_U.com/S2</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="54720258">ext_transid_decline_S2</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="-852441335">INVALID_POINT_STATUS</stringProp>
              <stringProp name="-174340769">Points with externalTransactionId=ext_transid_decline_S2 are in status=DECLINED so can not be confirmed</stringProp>
              <stringProp name="1665901425">pendingAdded_${TAG_KEY}_2BDeclined_S2</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
              <stringProp name="-731219577">${__property(PENDING_POINTS_ID)}</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
            </collectionProp>
            <collectionProp name="-1585572027">
              <stringProp name="0"></stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1888450863">decline_pending_S3</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-1145255839">onbehalf_p80_S3</stringProp>
              <stringProp name="3917946">http://www.WS-PM_DCL_PP_U.com/S3</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="54720259">ext_transid_decline_S3</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="-310038832">Partner with apiKey erased_from_existance not exists</stringProp>
              <stringProp name="1665901426">pendingAdded_${TAG_KEY}_2BDeclined_S3</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
              <stringProp name="-731219577">${__property(PENDING_POINTS_ID)}</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
            </collectionProp>
            <collectionProp name="1770586563">
              <stringProp name="0"></stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1888450862">decline_pending_S4</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="3524">p4</stringProp>
              <stringProp name="-1145255838">onbehalf_p80_S4</stringProp>
              <stringProp name="3917947">http://www.WS-PM_DCL_PP_U.com/S4</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="54720260">ext_transid_decline_S4</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="1665901427">pendingAdded_${TAG_KEY}_2BDeclined_S4</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
              <stringProp name="-731219577">${__property(PENDING_POINTS_ID)}</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1999933707">
              <stringProp name="0"></stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-278557690">iatesting1234+user70@gmail.com</stringProp>
              <stringProp name="1753">70</stringProp>
              <stringProp name="-1888450859">decline_pending_S7</stringProp>
              <stringProp name="-1351711845">CHANGE_PENDING_TO_DECLINED</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-1145255835">onbehalf_p80_S7</stringProp>
              <stringProp name="3917950">http://www.WS-PM_DCL_PP_U.com/S7</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="54720261">ext_transid_decline_S5</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="1917203347">User with userId=[iatesting1234+user70@gmail.com] is invalid</stringProp>
              <stringProp name="1665901430">pendingAdded_${TAG_KEY}_2BDeclined_S7</stringProp>
              <stringProp name="604191511">${REASON_TXT}_pendingAdded</stringProp>
              <stringProp name="-731219577">${__property(PENDING_POINTS_ID)}</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user == 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING points" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY_PENDING}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:${POINTS},&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;${EXTTRANS_ID_PENDING}&quot;,&quot;reasonText&quot;:&quot;${REASON_TXT_PENDING}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get points ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pointsId</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_DCL_PP_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(currentTotal, 0) currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${SQL_PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module: DECLINE points" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-379530906">modules (to be disabled)</stringProp>
              <stringProp name="779956936">DECLINE PENDING points FAIL</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check partner&apos;s points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT currentTotal
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${SQL_PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_partnersPoints</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partner points" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2020228458">${__javaScript(${s_partnersPoints_1})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_partnersPoints_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, UNIX_TIMESTAMP(createdAt) *1000, apiAccessKey, message, requestType, success, pointsId, userId, idType, orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pointsId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1396641816">${pointsId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestPointsId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_GET_CS_U_S1|2|3|7|8" enabled="false">
        <stringProp name="TestPlan.comments">Getting cap available and user remaining allowance for user REGISTERED in ePoints.com

User_1 - S1 - Trying to get CAP/ALLOWANCE for user REGISTERED in ePoints.com requested by INACTIVE client
User_2 - S2 - Trying to get CAP/ALLOWANCE for user REGISTERED in ePoints.com requested by UNKNOWN client			
User_3 - S3 - Trying to get CAP/ALLOWANCE for user NOT REGISTERED in ePoints.com
User_4 - S7 - Trying to get CAP/ALLOWANCE for ACTIVE user REGISTERED in ePoints.com but UNVERIFIED
User_5 - S8 - Trying to get CAP/ALLOWANCE for INACTIVE user REGISTERED in ePoints.com

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369310798000</longProp>
        <longProp name="ThreadGroup.end_time">1369310798000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-1045705289">LIMIT_OFFSET</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="844297355">
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="1830152529">GET_CAPPED_LIMITS</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="3524">p4</stringProp>
            </collectionProp>
            <collectionProp name="1620568051">
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1830152529">GET_CAPPED_LIMITS</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-214754211">UNAUTHORIZED_PARTNER</stringProp>
              <stringProp name="-1861087590">Unauthorized partner with shortName=[some]</stringProp>
              <stringProp name="3536116">some</stringProp>
            </collectionProp>
            <collectionProp name="1582781696">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1830152529">GET_CAPPED_LIMITS</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="109169">p01</stringProp>
            </collectionProp>
            <collectionProp name="2045060007">
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1830152529">GET_CAPPED_LIMITS</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1427684523">USER_IS_NOT_VERIFIED</stringProp>
              <stringProp name="203259368">User with userId=[user71_id1@test.com] is not verified</stringProp>
              <stringProp name="109169">p01</stringProp>
            </collectionProp>
            <collectionProp name="-1627499870">
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1830152529">GET_CAPPED_LIMITS</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1076932840">User with userId=[user4_id1@test.com] is not active</stringProp>
              <stringProp name="109169">p01</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_GET_CS_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get caps and allowance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/caps?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}&amp;clientId=${PARTNER_SHORT}${LIMIT_OFFSET}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_GET_CS_U_S4|5|6" enabled="false">
        <stringProp name="TestPlan.comments">Getting cap available and user remaining allowance for user REGISTERED in ePoints.com

User_1 - S4 - Getting CAP/ALLOWANCE for user REGISTERED in ePoints.com (no limit/offset)
User_2 - S5 - Getting CAP/ALLOWANCE for user REGISTERED in ePoints.com (limit 1/offset 0)
User_3 - S6 - Getting CAP/ALLOWANCE for user REGISTERED in ePoints.com (limit 2/offset 1)

User_1
user_70, tag: TAG70_1
confirmed	10[6	(6)	20]6
pending	20[8	(10)	10]6
declined	[	(5)	]
redeemed	[	(8)	]
spent	[	(10)	]

User_1
user_70, tag: TAG70_2
confirmed	2[6	(3)	1]4
pending	22[9	(1)	2]3
declined	[	(2)	]
redeemed	[	(5)	]
sent	[	(8)	]

User_1
user_70, tag: TAG70_3
confirmed	1[3	(15)	3]5
pending	22[9	(6)
declined	[	(5)	]
redeemed	[	(10)	]
sent	[	(15)	]

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1369310798000</longProp>
        <longProp name="ThreadGroup.end_time">1369310798000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-1045705289">LIMIT_OFFSET</stringProp>
            <stringProp name="72438683">LIMIT</stringProp>
            <stringProp name="-1966450541">OFFSET</stringProp>
            <stringProp name="1490631980">TAG_KEY_1</stringProp>
            <stringProp name="1490631981">TAG_KEY_2</stringProp>
            <stringProp name="1490631982">TAG_KEY_3</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-290186753">
              <stringProp name="1753">70</stringProp>
              <stringProp name="-1666525910">user70_id1@test.com</stringProp>
              <stringProp name="-2056905465">p70aKey</stringProp>
              <stringProp name="1830152529">GET_CAPPED_LIMITS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="54">6</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-830949691">TAG70_1</stringProp>
              <stringProp name="-830949690">TAG70_2</stringProp>
              <stringProp name="-830949689">TAG70_3</stringProp>
              <stringProp name="109385">p70</stringProp>
            </collectionProp>
            <collectionProp name="518961572">
              <stringProp name="1753">70</stringProp>
              <stringProp name="-1666525910">user70_id1@test.com</stringProp>
              <stringProp name="-2056905465">p70aKey</stringProp>
              <stringProp name="1830152529">GET_CAPPED_LIMITS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="-1961827837">&amp;limit=1&amp;offset=0</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-830949691">TAG70_1</stringProp>
              <stringProp name="-830949690">TAG70_2</stringProp>
              <stringProp name="-830949689">TAG70_3</stringProp>
              <stringProp name="109385">p70</stringProp>
            </collectionProp>
            <collectionProp name="2066738522">
              <stringProp name="1753">70</stringProp>
              <stringProp name="-1666525910">user70_id1@test.com</stringProp>
              <stringProp name="-2056905465">p70aKey</stringProp>
              <stringProp name="1830152529">GET_CAPPED_LIMITS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="2136625955">&amp;limit=2&amp;offset=1</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-830949691">TAG70_1</stringProp>
              <stringProp name="-830949690">TAG70_2</stringProp>
              <stringProp name="-830949689">TAG70_3</stringProp>
              <stringProp name="109385">p70</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load CONFIRMED points for user70" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points (tag70_1) x3" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points (u70/tag70_1) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;on_behalf_P70&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;:&quot;${TAG_KEY_1}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;source_URI&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_T70_1_U70_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_T70_1&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points (tag70_2) x2" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points (u70/tag70_2) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;on_behalf_P70&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;:&quot;${TAG_KEY_2}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;source_URI&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_T70_2_U70_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_T70_2&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points (tag70_3) x5" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">5</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points (u70/tag70_3) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;on_behalf_P70&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;:&quot;${TAG_KEY_3}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;source_URI&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_T70_3_U70_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_T70_3&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - confirmed TAG70_1 (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;20&apos;, &apos;confirmed__U70_T70_1_ldocm&apos;, &apos;CONFIRMED&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - confirmed TAG70_1 (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;5&apos;, &apos;confirmed_U70_ T70_1_fdonm&apos;, &apos;CONFIRMED&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - confirmed TAG70_2 (last day of current week)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;1&apos;, &apos;confirmed__U70_T70_2_ldocw&apos;, &apos;CONFIRMED&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_WEEK_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - confirmed TAG70_2 (first day of next week)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;4&apos;, &apos;confirmed_U70_ T70_2_fdonw&apos;, &apos;CONFIRMED&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_WEEK_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - confirmed TAG70_3 (last hour of today)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;3&apos;, &apos;confirmed__U70_T70_3_lhot&apos;, &apos;CONFIRMED&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_HOUR_OF_TODAY_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - confirmed TAG70_3 (first hour of tomorrow)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;5&apos;, &apos;confirmed_U70_ T70_3_fhot&apos;, &apos;CONFIRMED&apos;, &apos;72&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_WEEK_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get CONFIRMED sum" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT sum(delta)
FROM points P, partner PP
WHERE P.partnerId=PP.id 
  AND PP.accessKey=?
  AND P.userId=?
  AND P.status=&apos;CONFIRMED&apos;;</stringProp>
              <stringProp name="queryArguments">${PARTNER_KEY},${USER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames">s_confirmedSum</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user70 - confirmed" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=? WHERE User_id=&apos;70&apos; and pointsMap_KEY=&apos;CONFIRMED&apos;;</stringProp>
              <stringProp name="queryArguments">${s_confirmedSum_1}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load PENDING points for user70" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add PENDING points (tag70_1) x4" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING points (u70/tag70_1) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;on_behalf_P70&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;:&quot;${TAG_KEY_1}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;source_URI&quot;,&quot;externalTransactionId&quot;:&quot;pendingAdded_T70_1_U70_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityPending_T70_1&quot;,&quot;autoConfirm&quot;: 30}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add PENDING points (tag70_2) x1" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING points (u70/tag70_2) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;on_behalf_P70&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;:&quot;${TAG_KEY_2}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;source_URI&quot;,&quot;externalTransactionId&quot;:&quot;pendingAdded_T70_2_U70_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityPending_T70_2&quot;,&quot;autoConfirm&quot;: 30}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add PENDING points (tag70_3) x3" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING points (u70/tag70_3) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;on_behalf_P70&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;:&quot;${TAG_KEY_3}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;source_URI&quot;,&quot;externalTransactionId&quot;:&quot;pendingAdded_T70_3_U70_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityPending_T70_3&quot;,&quot;autoConfirm&quot;: 30}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - pending TAG70_1 (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;10&apos;, &apos;pending_U70_T70_1_ldocm&apos;, &apos;PENDING&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - pending TAG70_1 (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;6&apos;, &apos;pending_U70_T70_1_fdonm&apos;, &apos;PENDING&apos;, &apos;70&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - pending TAG70_2 (first day of next week)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;2&apos;, &apos;pending_U70_T70_2_fdonw&apos;, &apos;PENDING&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_WEEK_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user70 - pending TAG70_2 (last day of current week)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;3&apos;, &apos;pending_U70_T70_2_ldocw&apos;, &apos;PENDING&apos;, &apos;71&apos;, &apos;70&apos;, &apos;70&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_WEEK_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get PENDING sum" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT sum(delta)
FROM points P, partner PP
WHERE P.partnerId=PP.id 
  AND PP.accessKey=?
  AND P.userId=?
  AND P.status=&apos;PENDING&apos;;</stringProp>
              <stringProp name="queryArguments">${PARTNER_KEY},${USER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames">s_pendingSum</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user60 - pending" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=? WHERE User_id=&apos;70&apos; and pointsMap_KEY=&apos;PENDING&apos;;</stringProp>
              <stringProp name="queryArguments">${s_pendingSum_1}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_GET_CS_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get client&apos;s TAGs" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT tagKey, cap, frequency
FROM tag, partner
WHERE tag.partnerId=partner.id AND partner.accessKey=?
LIMIT ?,?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY},${OFFSET},${LIMIT}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,INTEGER,INTEGER</stringProp>
            <stringProp name="variableNames">s_partnersTag, s_partnersTagCap, s_partnersTagFreq</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach TAG get user&apos;s transactions" enabled="true">
            <stringProp name="ForeachController.inputVal">s_partnersTag</stringProp>
            <stringProp name="ForeachController.returnVal">s_tag</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">COUNT</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s transactions for TAG" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT COALESCE(SUM(P.delta), 0) AS suma, COUNT(P.delta) AS num_trans
FROM points P, partner PP, tag T
WHERE P.partnerId=PP.id 
AND P.tagId=T.id 
AND PP.accessKey=?
AND P.userId=?
AND T.tagKey=?
AND (P.status=&apos;CONFIRMED&apos; OR P.status=&apos;PENDING&apos;)
AND ((P.updatedAt IS null AND P.createdAt BETWEEN 
   CASE 
      WHEN T.frequency = &apos;MONTHLY&apos; THEN ?
      WHEN T.frequency = &apos;WEEKLY&apos; THEN ?
      WHEN T.frequency = &apos;DAILY&apos; THEN ?
      WHEN (T.frequency = &apos;ONCE&apos; OR T.frequency = &apos;NONE&apos;) THEN ?
   END
 AND ?)
OR (P.updatedAt IS NOT null AND P.updatedAt BETWEEN
   CASE 
      WHEN T.frequency = &apos;MONTHLY&apos; THEN ?
      WHEN T.frequency = &apos;WEEKLY&apos; THEN ?
      WHEN T.frequency = &apos;DAILY&apos; THEN ?
      WHEN (T.frequency = &apos;ONCE&apos; OR T.frequency = &apos;NONE&apos;) THEN ?
   END
 AND ?));</stringProp>
              <stringProp name="queryArguments">${PARTNER_KEY},${USER_ID},${s_tag},${DT_FIRST_DAY_OF_CURRENT_MONTH_STR},${DT_FIRST_DAY_OF_CURRENT_WEEK_STR},${DT_FIRST_HOUR_OF_TODAY_STR},${DT_FAR_IN_THE_PAST_STR}, ${__time(yyyy-MM-dd HH:mm:ss)},${DT_FIRST_DAY_OF_CURRENT_MONTH_STR},${DT_FIRST_DAY_OF_CURRENT_WEEK_STR},${DT_FIRST_HOUR_OF_TODAY_STR},${DT_FAR_IN_THE_PAST_STR}, ${__time(yyyy-MM-dd HH:mm:ss)}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR, INTEGER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR</stringProp>
              <stringProp name="variableNames">s_transForTagSum_${COUNT}</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get caps and allowance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/caps?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}&amp;clientId=${PARTNER_SHORT}${LIMIT_OFFSET}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get userId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">regex_userid</stringProp>
              <stringProp name="RegexExtractor.regex">userId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagKey" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">regex_tagKey</stringProp>
              <stringProp name="RegexExtractor.regex">tagKey&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagCap" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">regex_tagCap</stringProp>
              <stringProp name="RegexExtractor.regex">cap&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagRemain" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">regex_tagRemain</stringProp>
              <stringProp name="RegexExtractor.regex">remain&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">regex_userid</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: resultData" enabled="true">
              <stringProp name="BeanShellAssertion.query">Integer numtags = Integer.parseInt(Parameters);

	for (int i=1; i&lt;=numtags; i++)
	{
	  String resultTagKey = vars.get(&quot;regex_tagKey_&quot; + i);
	  String dbTagKey = vars.get(&quot;s_partnersTag_&quot; + i);

	  int resultTagCap = Integer.parseInt(vars.get(&quot;regex_tagCap_&quot; + i));
	  int dbTagCap = Integer.parseInt(vars.get(&quot;s_partnersTagCap_&quot; + i));

	  int resultTagRemain = Integer.parseInt(vars.get(&quot;regex_tagRemain_&quot; + i));
	  
	  Integer dbTagRemain;
	  String dbTagFreq = vars.get(&quot;s_partnersTagFreq_&quot; + i);
	  Integer s_transForTagSum = Integer.parseInt(vars.get(&quot;s_transForTagSum_&quot; + i + &quot;_1&quot;));
	  if (dbTagFreq.equals(&quot;ONCE&quot;) &amp;&amp; s_transForTagSum &gt; 0)
	  {
		dbTagRemain = 0;
	  }
	  else if (dbTagFreq.equals(&quot;ONCE&quot;) &amp;&amp; s_transForTagSum == 0)
	  {
		dbTagRemain = Integer.parseInt(vars.get(&quot;s_partnersTagCap_&quot; + i));
	  }
	  else if (dbTagFreq.equals(&quot;NONE&quot;))
	  {
	  	dbTagRemain = Integer.parseInt(vars.get(&quot;s_partnersTagCap_&quot; + i));
	  }
	  else {
	  	dbTagRemain = Integer.parseInt(vars.get(&quot;s_partnersTagCap_&quot; + i)) - s_transForTagSum;
	  }


	  if (resultTagKey.equals(dbTagKey) &amp;&amp; resultTagCap == dbTagCap &amp;&amp; resultTagRemain == dbTagRemain)
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;, frequency: &quot; + dbTagFreq + &quot;): &quot; + resultTagKey + &quot;/ &quot; + dbTagKey;
		FailureMessage += &quot; | TagCap REST: &quot; + resultTagCap + &quot;/ DB:&quot; + dbTagCap;
		FailureMessage += &quot; | CapRemain REST: &quot; + resultTagRemain + &quot;/ DB: &quot; + dbTagRemain;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${s_partnersTag_#}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_GET_PB_U_S1|4|7" enabled="false">
        <stringProp name="TestPlan.comments">Getting points balance for user REGISTERED in ePoints.com

User_1 - S1 - Getting status of CONFIRMED/PENDING/DECLINED/REDEEMED/TOTAL points for user REGISTERED in ePoints.com
User_2 - S4 - Getting status of points for INACTIVE user REGISTERED in ePoints.com
User_3 - S7 - Getting status of points for ACTIVE user REGISTERED in ePoints.com but UNVERIFIED
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369310798000</longProp>
        <longProp name="ThreadGroup.end_time">1369310798000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="605920259">
              <stringProp name="49">1</stringProp>
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1218024316">GET_USER_BALANCE_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <collectionProp name="-1011177503">
              <stringProp name="52">4</stringProp>
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1218024316">GET_USER_BALANCE_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <collectionProp name="-391620369">
              <stringProp name="1754">71</stringProp>
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="1218024316">GET_USER_BALANCE_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_GET_PB_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed,s_pointsPending,s_pointsRedeemed,s_pointsDeclined,s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get user balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/balance?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmedPoints txt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-947415784">&quot;confirmedPoints&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pendingPoints txt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1340632368">&quot;pendingPoints&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declinedPoints txt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-861895957">&quot;declinedPoints&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemedPoints txt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-885524232">&quot;redeemedPoints&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get confirmedPoints" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">confirmedPoints</stringProp>
              <stringProp name="RegexExtractor.regex">confirmedPoints&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get pendingPoints" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">pendingPoints</stringProp>
              <stringProp name="RegexExtractor.regex">pendingPoints&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get declinedPoints" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">declinedPoints</stringProp>
              <stringProp name="RegexExtractor.regex">declinedPoints&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get redeemedPoints" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redeemedPoints</stringProp>
              <stringProp name="RegexExtractor.regex">redeemedPoints&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s C/P/R/D/S points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT confirmed, pending, redeemed, declined, spent
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed,e_pointsPending,e_pointsRedeemed,e_pointsDeclined,e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
                <stringProp name="-2072685966">${confirmedPoints}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
                <stringProp name="1170990842">${pendingPoints}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
                <stringProp name="759190152">${redeemedPoints}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
                <stringProp name="-764068299">${declinedPoints}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1892208900">${__javaScript(${s_pointsSpent_1}-(${POINTS}))}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s CONFIRMED points" enabled="false">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? and pointsMap_KEY=&apos;CONFIRMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1405221962">${__javaScript(${s_pointsConfirmed_1})}</stringProp>
                <stringProp name="1788980810">${__javaScript(${confirmedPoints})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s PENDING points" enabled="false">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? and pointsMap_KEY=&apos;PENDING&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsPending</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2136345710">${__javaScript(${s_pointsPending_1})}</stringProp>
                <stringProp name="-1048925742">${__javaScript(${pendingPoints})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s DECLINED points" enabled="false">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? and pointsMap_KEY=&apos;DECLINED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsDeclined</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
                <stringProp name="748974853">${__javaScript(${declinedPoints})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s REDEEMED points" enabled="false">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? and pointsMap_KEY=&apos;REDEEMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsRedeemed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2040932854">${s_pointsRedeemed_1}</stringProp>
                <stringProp name="16498328">${__javaScript(${redeemedPoints})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_GET_PB_U_S2|3|5|6" enabled="false">
        <stringProp name="TestPlan.comments">Getting points balance for user REGISTERED in ePoints.com

User_1 - S2 - Trying to get status of points for user REGISTERED in ePoints.com requested by unknown partner
User_2 - S3 - Trying to get status of points for user NOT REGISTERED in ePoints.com
User_3 - S5 - Trying to get status of points for user REGISTERED in ePoints.com requested by INACTIVE partner
User_4 - S6 - Trying to get status of points for INACTIVE user REGISTERED in ePoints.com requested by INACTIVE partner
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369310798000</longProp>
        <longProp name="ThreadGroup.end_time">1369310798000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="304824974">
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="1218024316">GET_USER_BALANCE_INFO</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
            </collectionProp>
            <collectionProp name="-342585976">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-1040284801">p1aKey</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="1218024316">GET_USER_BALANCE_INFO</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
            </collectionProp>
            <collectionProp name="932028024">
              <stringProp name="-1287581048">user1_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="1218024316">GET_USER_BALANCE_INFO</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
            </collectionProp>
            <collectionProp name="1508430427">
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="1218024316">GET_USER_BALANCE_INFO</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_GET_PB_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get user balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/balance?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_GET_PB_C_S1|2" enabled="false">
        <stringProp name="TestPlan.comments">Getting PARTNER BALANCE for client REGISTERED in ePoints.com

User_1 - S1 - Getting PARTNER BALANCE for client REGISTERED in ePoints.com (confirmed/pending/declined)
User_2 - S7 - Getting PARTNER BALANCE for client REGISTERED in ePoints.com (confirmed/pending/declined/redeemed/spent)

User_1
confirmed	15[25	(3)	50]10
pending	10[20	(10)	10]10
declined	2[4		5]10
redeemed	12[5		9]8
spent	10[2		1]2
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369310798000</longProp>
        <longProp name="ThreadGroup.end_time">1369310798000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-1415847755">START_DATE_EPOCH</stringProp>
            <stringProp name="1604504220">END_DATE_EPOCH</stringProp>
            <stringProp name="-1058984565">START_DATE</stringProp>
            <stringProp name="-1757720398">END_DATE</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-1403156312">START_DATE_SHORT</stringProp>
            <stringProp name="1617195663">END_DATE_SHORT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-2087759235">
              <stringProp name="-2114163767">p50aKey</stringProp>
              <stringProp name="944250615">${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1165605421">${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-484565220">GET_PARTNER_BALANCE</stringProp>
              <stringProp name="-386662232">user50_id1@test.com</stringProp>
              <stringProp name="79582101">TAG50</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="109323">p50</stringProp>
              <stringProp name="3535245">confirmedPoints,pendingPoints,declinedPoints</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="-1129987443">onbehalf_of_p50</stringProp>
              <stringProp name="1183404498">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR_SHORT}</stringProp>
              <stringProp name="-563191288">${DT_LAST_DAY_OF_CURRENT_MONTH_STR_SHORT}</stringProp>
            </collectionProp>
            <collectionProp name="1924000421">
              <stringProp name="-2114163767">p50aKey</stringProp>
              <stringProp name="944250615">${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1165605421">${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-484565220">GET_PARTNER_BALANCE</stringProp>
              <stringProp name="-386662232">user50_id1@test.com</stringProp>
              <stringProp name="79582101">TAG50</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="109323">p50</stringProp>
              <stringProp name="1761164994">confirmedPoints,pendingPoints,declinedPoints,redeemedPoints,spentPoints</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="-1129987443">onbehalf_of_p50</stringProp>
              <stringProp name="1183404498">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR_SHORT}</stringProp>
              <stringProp name="-563191288">${DT_LAST_DAY_OF_CURRENT_MONTH_STR_SHORT}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load Transactions" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points x3" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:1,&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;source_confirm_${COUNT}&quot;,&quot;externalTransactionId&quot;:&quot;1 Point added for tag ${TAG_KEY} no${COUNT}&quot;,&quot;reasonText&quot;:&quot;addConfirmed&quot;,&quot;autoConfirm&quot;:30}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add PENDING points x2" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING points" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:5,&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;source_confirm_${COUNT}&quot;,&quot;externalTransactionId&quot;:&quot;5 pending Points added for tag ${TAG_KEY} num${COUNT}&quot;,&quot;reasonText&quot;:&quot;pending_added&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - confirmed (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,?,&apos;50&apos;, &apos;extTransIdconfirmed&apos;, &apos;CONFIRMED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;93&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR},${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - confirmed (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,?,&apos;10&apos;, &apos;extTransIdconfirm&apos;, &apos;CONFIRMED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;103&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR},${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user50 - confirmed" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;103&apos; WHERE User_id=&apos;50&apos; and pointsMap_KEY=&apos;CONFIRMED&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - pending (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;10&apos;, &apos;extTransIdpending&apos;, &apos;PENDING&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;103&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - pending (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;10&apos;, &apos;extTransIdpend&apos;, &apos;PENDING&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;103&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user50 - pending" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;60&apos; WHERE User_id=&apos;50&apos; and pointsMap_KEY=&apos;PENDING&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - declined (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,?,&apos;5&apos;, &apos;extTransIddeclined1&apos;, &apos;DECLINED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR},${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - declined (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, updatedAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,?,&apos;10&apos;, &apos;extTransIddeclined2&apos;, &apos;DECLINED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR},${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user50 - declined" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;21&apos; WHERE User_id=&apos;50&apos; and pointsMap_KEY=&apos;DECLINED&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - redeemed (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;9&apos;, &apos;extTransIdredeemed1&apos;, &apos;REDEEMED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - redeemed (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;8&apos;, &apos;extTransIdredeemed2&apos;, &apos;REDEEMED&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user50 - redeemed" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;34&apos; WHERE User_id=&apos;50&apos; and pointsMap_KEY=&apos;REDEEMED&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - spent (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;1&apos;, &apos;extTransIdspent1&apos;, &apos;SPENT&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user50 - spent (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;2&apos;, &apos;extTransIdspent2&apos;, &apos;SPENT&apos;, &apos;50&apos;, &apos;50&apos;, &apos;50&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user50 - spent" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;15&apos; WHERE User_id=&apos;50&apos; and pointsMap_KEY=&apos;SPENT&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_GET_PB_C_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get PARTNER BALANCE confirmed points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT  COALESCE(SUM(delta), 0) AS sum
FROM points, partner
WHERE points.partnerId=partner.id 
AND points.status=&apos;CONFIRMED&apos;
AND partner.accessKey=? 
AND ((points.updatedAt IS null and points.createdAt BETWEEN ? and ?) OR (points.updatedAt IS NOT null and points.updatedAt BETWEEN ? and ?));</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY},${START_DATE},${END_DATE},${START_DATE},${END_DATE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_deltaSumConfirmed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get PARTNER BALANCE pending points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(SUM(delta), 0) AS sum
FROM points, partner
WHERE points.partnerId=partner.id 
AND points.status=&apos;PENDING&apos;
AND partner.accessKey=? 
AND ((points.updatedAt IS null and points.createdAt BETWEEN ? and ?) OR (points.updatedAt IS NOT null and points.updatedAt BETWEEN ? and ?));</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY},${START_DATE},${END_DATE},${START_DATE},${END_DATE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_deltaSumPending</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get PARTNER BALANCE declined points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(SUM(delta), 0) AS sum
FROM points, partner
WHERE points.partnerId=partner.id
AND points.status=&apos;DECLINED&apos;
AND partner.accessKey=? 
AND ((points.updatedAt IS null and points.createdAt BETWEEN ? and ?) OR (points.updatedAt IS NOT null and points.updatedAt BETWEEN ? and ?));</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY},${START_DATE},${END_DATE},${START_DATE},${END_DATE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_deltaSumDeclined</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get PARTNER BALANCE redeemed points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(SUM(delta), 0) AS sum
FROM points, partner
WHERE points.partnerId=partner.id
AND points.status=&apos;REDEEMED&apos;
AND partner.accessKey=? 
AND ((points.updatedAt IS null and points.createdAt BETWEEN ? and ?) OR (points.updatedAt IS NOT null and points.updatedAt BETWEEN ? and ?));</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY},${START_DATE},${END_DATE},${START_DATE},${END_DATE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_deltaSumRedeemed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get PARTNER BALANCE spent points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(SUM(delta), 0) AS sum
FROM points, partner
WHERE points.partnerId=partner.id
AND points.status=&apos;SPENT&apos;
AND partner.accessKey=? 
AND ((points.updatedAt IS null and points.createdAt BETWEEN ? and ?) OR (points.updatedAt IS NOT null and points.updatedAt BETWEEN ? and ?));</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY},${START_DATE},${END_DATE},${START_DATE},${END_DATE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_deltaSumSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get PARTNER balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/clients/${PARTNER_SHORT}?apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}&amp;startDate=${START_DATE_SHORT}&amp;endDate=${END_DATE_SHORT}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get clientId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_clientId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;clientId&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get confirmedPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_confirmedPoints</stringProp>
                <stringProp name="RegexExtractor.regex">confirmedPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get pendingPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_pendingPoints</stringProp>
                <stringProp name="RegexExtractor.regex">pendingPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get declinedPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_declinedPoints</stringProp>
                <stringProp name="RegexExtractor.regex">declinedPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get redeemedPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_redeemedPoints</stringProp>
                <stringProp name="RegexExtractor.regex">redeemedPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get spentPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_spentPoints</stringProp>
                <stringProp name="RegexExtractor.regex">spentPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: clientId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="966084527">${PARTNER_SHORT}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_clientId</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="880881730">${s_deltaSumConfirmed_1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_confirmedPoints</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2074844022">${s_deltaSumPending_1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_pendingPoints</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-343988121">${s_deltaSumDeclined_1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_declinedPoints</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get PARTNER balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/clients/${PARTNER_SHORT}?apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}&amp;startDate=${START_DATE_SHORT}&amp;endDate=${END_DATE_SHORT}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get clientId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_clientId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;clientId&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get confirmedPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_confirmedPoints</stringProp>
                <stringProp name="RegexExtractor.regex">confirmedPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get pendingPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_pendingPoints</stringProp>
                <stringProp name="RegexExtractor.regex">pendingPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get declinedPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_declinedPoints</stringProp>
                <stringProp name="RegexExtractor.regex">declinedPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get redeemedPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_redeemedPoints</stringProp>
                <stringProp name="RegexExtractor.regex">redeemedPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get spentPoints" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_spentPoints</stringProp>
                <stringProp name="RegexExtractor.regex">spentPoints&quot;:(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: clientId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="966084527">${PARTNER_SHORT}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_clientId</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: confirmed" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="880881730">${s_deltaSumConfirmed_1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_confirmedPoints</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2074844022">${s_deltaSumPending_1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_pendingPoints</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-343988121">${s_deltaSumDeclined_1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_declinedPoints</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: redeemed" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-137404870">${s_deltaSumRedeemed_1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_redeemedPoints</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="170880723">${s_deltaSumSpent_1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_spentPoints</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-PM_GET_PB_C_S2|3|4|5|6" enabled="false">
        <stringProp name="TestPlan.comments">Getting PARTNER BALANCE for client REGISTERED in ePoints.com

User_1 - S2 - Trying to get PARTNER BALANCE for client REGISTERED in ePoints.com who is INACTIVE
User_2 - S3 - Trying to get PARTNER BALANCE for client REGISTERED in ePoints.com requesting StartDate later than EndDate
User_3 - S4 - Trying to get PARTNER BALANCE for client NOT REGISTERED in ePoints.com
User_4 - S5 - Trying to get PARTNER BALANCE for client REGISTERED in ePoints.com requesting incorrect StartDate		
User_5 - S6 - Trying to get PARTNER BALANCE for client REGISTERED in ePoints.com requesting incorrect EndDate		
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369310798000</longProp>
        <longProp name="ThreadGroup.end_time">1369310798000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-1058984565">START_DATE</stringProp>
            <stringProp name="-1757720398">END_DATE</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1828196981">
              <stringProp name="-2114163767">p50aKey</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-484565220">GET_PARTNER_BALANCE</stringProp>
              <stringProp name="1282912372">Partner with accessKey=[p50aKey] is not active</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="109323">p50</stringProp>
              <stringProp name="1817528610">confirmedPoints</stringProp>
            </collectionProp>
            <collectionProp name="-1589155288">
              <stringProp name="-2114163767">p50aKey</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-484565220">GET_PARTNER_BALANCE</stringProp>
              <stringProp name="-852130277">is greater then To=</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="109323">p50</stringProp>
              <stringProp name="1817528610">confirmedPoints</stringProp>
            </collectionProp>
            <collectionProp name="-1741898267">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-484565220">GET_PARTNER_BALANCE</stringProp>
              <stringProp name="-1263695344">Unauthorized partner with shortName=[erased]</stringProp>
              <stringProp name="-214754211">UNAUTHORIZED_PARTNER</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-1295138178">erased</stringProp>
              <stringProp name="1817528610">confirmedPoints</stringProp>
            </collectionProp>
            <collectionProp name="1873797029">
              <stringProp name="-2114163767">p50aKey</stringProp>
              <stringProp name="-1911527867">incorrect_start_date</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-484565220">GET_PARTNER_BALANCE</stringProp>
              <stringProp name="1932949650">Field startDate=[incorrect_start_date] is invalid: Unparseable date: &quot;incorrect_start_date&quot;</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="109323">p50</stringProp>
              <stringProp name="1817528610">confirmedPoints</stringProp>
            </collectionProp>
            <collectionProp name="-1810170569">
              <stringProp name="-2114163767">p50aKey</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="8516588">incorrect_end_date</stringProp>
              <stringProp name="-484565220">GET_PARTNER_BALANCE</stringProp>
              <stringProp name="2146425003">Field endDate=[incorrect_end_date] is invalid: Unparseable date: &quot;incorrect_end_date&quot;</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="109323">p50</stringProp>
              <stringProp name="1817528610">confirmedPoints</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate p50aKey" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE partner SET active=0 WHERE id=&apos;50&apos;;







</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-PM_GET_PB_C_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get PARTNER balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/clients/${PARTNER_SHORT}?apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}&amp;startDate=${START_DATE}&amp;endDate=${END_DATE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate p50aKey" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE partner SET active=1 WHERE id=&apos;50&apos;;







</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-TM_SETUP" enabled="false">
        <stringProp name="TestPlan.comments">Getting TRANSACTION HISTORY by client REGISTERED in ePoints.com



user60:
CONFIRMED:	7[10	(55)(55)(55)	30]5
PENDING:	10[20	(55)	10]5
DECLINED:	2[2	(55)	11]6
REDEEMED:	3[6	(55)	15]5
SPENT:	1[2	(55)	8]2
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369649366000</longProp>
        <longProp name="ThreadGroup.end_time">1369649366000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="631953696">EXTUSER_ID_1</stringProp>
            <stringProp name="631953697">EXTUSER_ID_2</stringProp>
            <stringProp name="631953698">EXTUSER_ID_3</stringProp>
            <stringProp name="1490631980">TAG_KEY_1</stringProp>
            <stringProp name="1490631981">TAG_KEY_2</stringProp>
            <stringProp name="1490631982">TAG_KEY_3</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="-625062104">SOURCE_URI</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="453986267">PARTNER_KEY_2</stringProp>
            <stringProp name="1075501176">PARTNER_SHORT_2</stringProp>
            <stringProp name="1910921848">ONBEHALF_ID_2</stringProp>
            <stringProp name="1490631983">TAG_KEY_4</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1636102643">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="615330952">user61_id1@test.com</stringProp>
              <stringProp name="109772327">user62_id1@test.com</stringProp>
              <stringProp name="-830979482">TAG60_1</stringProp>
              <stringProp name="-830979481">TAG60_2</stringProp>
              <stringProp name="-830979480">TAG60_3</stringProp>
              <stringProp name="109354">p60</stringProp>
              <stringProp name="75062134">onBehalfOf p60</stringProp>
              <stringProp name="30836616">SoUrCe_URI</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="-2084611095">p61aKey</stringProp>
              <stringProp name="109355">p61</stringProp>
              <stringProp name="75062135">onBehalfOf p61</stringProp>
              <stringProp name="-830978521">TAG61_1</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load CONFIRMED points for user60" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points (tag60_1) x10" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points (u60/tag60_1) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY_1}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_t60_1_u60_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_t60_1&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID_1}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points (tag60_2) x10" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points (u60/tag60_2) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY_2}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_t60_2_u60_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_t60_2&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID_1}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points (tag60_3) x10" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points (u60/tag60_3)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY_3}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_t60_3_u60_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_t60_3&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID_1}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 1s" enabled="true">
              <stringProp name="BeanShellSampler.query">Thread.sleep(1000);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points (tag61_1) x5" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">5</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points (u61/tag61_1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT_2}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID_2}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY_2}&quot;,&quot;tag&quot;: &quot;${TAG_KEY_4}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_t61_1_u61_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_t61_1&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID_1}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 1s" enabled="true">
              <stringProp name="BeanShellSampler.query">Thread.sleep(1000);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - confirmed (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;30&apos;, &apos;confirmed_ldocm&apos;, &apos;CONFIRMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - confirmed (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;5&apos;, &apos;confirmed_fdonm&apos;, &apos;CONFIRMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user60 - confirmed" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;232&apos; WHERE User_id=&apos;60&apos; and pointsMap_KEY=&apos;CONFIRMED&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load PENDING points for user60" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add PENDING points (tag60_1) x10" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING points (u60/tag60_1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY_1}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;pendingAdded_t60_1_u60_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityPending_t60_1&quot;,&quot;autoConfirm&quot;: 30}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID_1}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - pending (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;10&apos;, &apos;pending_ldocm&apos;, &apos;PENDING&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - pending (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;5&apos;, &apos;pending_fdonm&apos;, &apos;PENDING&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user60 - confirmed" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;100&apos; WHERE User_id=&apos;60&apos; and pointsMap_KEY=&apos;PENDING&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load DECLINED points for user60" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add PENDING/DECLINED points (tag60_1) x10" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING 2B DECLINED points (u60/tag60_1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY_1}&quot;,&quot;numPoints&quot;:${COUNT},&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;,&quot;externalTransactionId&quot;:&quot;pending2BdeclinedAdded_t60_1_u60_${COUNT}&quot;,&quot;reasonText&quot;:&quot;ActivityDeclined_t60_1&quot;,&quot;autoConfirm&quot;: 30}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID_1}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - pending/declined (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;11&apos;, &apos;pending2BdeclinedAdded_t60_1_u60_11&apos;, &apos;PENDING&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - pending/declined (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;6&apos;, &apos;pending2BdeclinedAdded_t60_1_u60_12&apos;, &apos;PENDING&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user60 - confirmed" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;172&apos; WHERE User_id=&apos;60&apos; and pointsMap_KEY=&apos;PENDING&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get LAST points transaction ID" enabled="false">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT SUM(delta), COUNT(delta)
FROM points, userid
WHERE points.userId=userid.user_id 
  AND points.status LIKE ? and userid.userId=?
  AND points.createdAt BETWEEN ? AND ?
</stringProp>
              <stringProp name="queryArguments">${EXP_STATUS},${EXTUSER_ID},${SQL_STARTDATE},${SQL_ENDDATE}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames">s_deltaPointsSum, s_deltaPointsCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: DECLINE PENDING points (tag60_1) x12" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">12</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get points transaction ID" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">SELECT id
FROM points
WHERE externalTransactionId = ?
</stringProp>
                <stringProp name="queryArguments">pending2BdeclinedAdded_t60_1_u60_${COUNT}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames">s_pending2BdeclinedId</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING/DECLINED points (u60) " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${EXTUSER_ID_1}&quot;,&quot;userIdType&quot;:&quot;${EXTUSER_ID_TYPE}&quot;,&quot;clientId&quot;: &quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;pointsType&quot;:&quot;DECLINED&quot;,&quot;externalTransactionId&quot;: &quot;pendingDeclined_t60_1_u60_${COUNT}&quot;,&quot;reasonText&quot;: &quot;ActivityDeclining_t60_1&quot;,&quot;sourceURI&quot;:&quot;${SOURCE_URI}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/${s_pending2BdeclinedId_1}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2524">OK</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load REDEEMED points for user60" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add REDEEMED points (tag60_1) x10" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - redeemed" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?, ?, ?, &apos;REDEEMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
                <stringProp name="queryArguments">${DT_CURRENT_DATE_STR},${COUNT},${__BeanShell(String s = &quot;redeemedAdded_t60_1_u60_${COUNT}&quot;;return s;)}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,INTEGER,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - redeemed (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;15&apos;, &apos;redeemedAdded_t60_1_u60_11&apos;, &apos;REDEEMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - redeemed (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;5&apos;, &apos;redeemedAdded_t60_1_u60_12&apos;, &apos;REDEEMED&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user60 - redeemed" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;84&apos; WHERE User_id=&apos;60&apos; and pointsMap_KEY=&apos;REDEEMED&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load SPENT points for user60" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add SPENT points (tag60_1) x10" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNT</stringProp>
                <stringProp name="CounterConfig.format">0</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - spent" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?, ?, ?, &apos;SPENT&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
                <stringProp name="queryArguments">${DT_CURRENT_DATE_STR},${COUNT},${__BeanShell(String s = &quot;spentAdded_t60_1_u60_${COUNT}&quot;;return s;)}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,INTEGER,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - spent (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;8&apos;, &apos;spentAdded_t60_1_u60_11&apos;, &apos;SPENT&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user60 - spent (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;2&apos;, &apos;spentAdded_t60_1_u60_12&apos;, &apos;SPENT&apos;, &apos;60&apos;, &apos;60&apos;, &apos;60&apos;, &apos;0&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user60 - spent" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;67&apos; WHERE User_id=&apos;60&apos; and pointsMap_KEY=&apos;SPENT&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-TM_GET_TH_C_S1|2|3|4|5|6|10|11|12|13|14|15|17|18|19|20|21|22|23|24|25|26" enabled="false">
        <stringProp name="TestPlan.comments">Getting TRANSACTION HISTORY by user REGISTERED in ePoints.com

(WS-TM_SETUP required)

User_1 - S1 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com
User_2 - S2 - Getting CONFIREMD TRANSACTION HISTORY by client REGISTERED in ePoints.com
User_3 - S3 - Getting PENDING TRANSACTION HISTORY by client REGISTERED in ePoints.com
User_4 - S4 - Getting DECLINED TRANSACTION HISTORY by client REGISTERED in ePoints.com
User_5 - S5 - Getting REDEEMED TRANSACTION HISTORY by client REGISTERED in ePoints.com
User_6 - S6 - Getting SPENT TRANSACTION HISTORY by client REGISTERED in ePoints.com
User_7 - S10 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month
User_8 - S11 - Getting CONFIRMED TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month
User_9 - S12 - Getting PENDING TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month
User_10 - S13 - Getting DECLINED TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month
User_11 - S14 - Getting REDEEMED TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month
User_12 - S15 - Getting SPENT TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month
User_13 - S17 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month for specific tag
User_14 - S18 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month for INACTIVE tag
User_15 - S19 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month for specific tag (limit 10 / offset 0)
User_16 - S20 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month for specific tag (limit 5 / offset 2)
User_17 - S21 - Getting CONFIRMED TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month for specific tag sorted ASCENDING
User_18 - S22 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com for current month for specific tag sorted DESCENDING
User_19 - S23 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com requested by ACTIVE client for TAG NOT ASSIGNED to the client
User_20 - S24 - Getting CONFIRMED and PENDING TRANSACTION HISTORY by user REGISTERED in ePoints.com (one call with a list of two statuses)
User_21 - S25 - Getting CONFIRMED, PENDING and REDEEMED TRANSACTION HISTORY by user REGISTERED in ePoints.com (one call with a list of three statuses)
User_22 - S26 - Getting ALL TRANSACTION HISTORY by client REGISTERED in ePoints.com for ACTIVE/UNVERIFIED user


user60:
CONFIRMED:	7[10	(55)(55)(55)	30]5
PENDING:	10[20	(55)	10]5
DECLINED:	2[2	(55)	11]6
REDEEMED:	3[6	(55)	15]5
SPENT	1[2	(55)	8]2
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">22</stringProp>
        <stringProp name="ThreadGroup.ramp_time">22</stringProp>
        <longProp name="ThreadGroup.start_time">1369649366000</longProp>
        <longProp name="ThreadGroup.end_time">1369649366000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-454019395">REST_STATUS</stringProp>
            <stringProp name="-898344891">REST_STARTDATE</stringProp>
            <stringProp name="-899349122">REST_ENDDATE</stringProp>
            <stringProp name="2038459508">EXP_STATUS</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-972341857">SQL_STARTDATE</stringProp>
            <stringProp name="-313951912">SQL_ENDDATE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="446479503">REST_TAG</stringProp>
            <stringProp name="1225548813">REST_ASCENDING</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="684514225">SQL_TAG_ID</stringProp>
            <stringProp name="1151551847">SQL_ASCENDING</stringProp>
            <stringProp name="545944644">SQL_OFFSET</stringProp>
            <stringProp name="1261862346">SQL_LIMIT</stringProp>
            <stringProp name="-1232264642">EXP_STATUS2</stringProp>
            <stringProp name="-1232264641">EXP_STATUS3</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1830241267">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="1437773158">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="1085760620">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="1167411762">&amp;status=PENDING</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="1428628416">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="2083606227">&amp;status=DECLINED</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1350822958">DECLINED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="1849959484">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="735191520">&amp;status=REDEEMED</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2408251">REDEEMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="756989681">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1126420279">&amp;status=SPENT</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-794612892">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-1187081001">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-1539093539">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="1167411762">&amp;status=PENDING</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-1196225743">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="2083606227">&amp;status=DECLINED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1350822958">DECLINED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-774894675">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="735191520">&amp;status=REDEEMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="2408251">REDEEMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-1867864478">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1126420279">&amp;status=SPENT</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-1627913502">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-1627913502">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="956727499">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="1200831399">&amp;limit=10</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="26471600">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778418">&amp;offset=2</stringProp>
              <stringProp name="1978399149">&amp;limit=5</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="1672947263">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="-1270047463">&amp;ascending=true</stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="65105">ASC</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-336699173">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-730209544">&amp;ascending=false</stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="2094737">DESC</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="1876812760">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652295934">&amp;tag=TAG61_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="1725">63</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="1025310117">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="1835349765">&amp;status=CONFIRMED,PENDING</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-370915832">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-589319678">&amp;status=CONFIRMED,PENDING,REDEEMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="2408251">REDEEMED</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="1830241267">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-TM_GET_TH_C_PASS" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user != 17" enabled="true">
            <stringProp name="IfController.condition">${__threadNum}  != 17</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user STATUS points searched/limited" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT UNIX_TIMESTAMP(points.createdAt) *1000, partner.name, partner.siteUrl
FROM points, userid, partner
WHERE points.userId=userid.user_id AND points.partnerId=partner.id
  AND points.tagId LIKE ?
  AND (points.status LIKE ? OR points.status LIKE ? OR points.status LIKE ?)
  AND userid.userId=?
  AND partner.shortName=?
  AND points.createdAt BETWEEN ? AND ?
ORDER BY points.createdAt DESC
LIMIT ?,?;</stringProp>
              <stringProp name="queryArguments">${SQL_TAG_ID},${EXP_STATUS},${EXP_STATUS2},${EXP_STATUS3},${EXTUSER_ID},${PARTNER_SHORT},${SQL_STARTDATE},${SQL_ENDDATE},${SQL_OFFSET},${SQL_LIMIT}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR, VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">s_pointsCreatedAt, s_partnerName, s_partnerSiteUrl</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user = 17" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 17</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user STATUS points searched/limited" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT UNIX_TIMESTAMP(points.createdAt) *1000, partner.name, partner.siteUrl
FROM points, userid, partner
WHERE points.userId=userid.user_id AND points.partnerId=partner.id
  AND points.tagId LIKE ?
  AND (points.status LIKE ? OR points.status LIKE ? OR points.status LIKE ?)
  AND userid.userId=?
  AND partner.shortName=?
  AND points.createdAt BETWEEN ? AND ?
ORDER BY points.createdAt ASC
LIMIT ?,?;</stringProp>
              <stringProp name="queryArguments">${SQL_TAG_ID},${EXP_STATUS},${EXP_STATUS2},${EXP_STATUS3},${EXTUSER_ID},${PARTNER_SHORT},${SQL_STARTDATE},${SQL_ENDDATE},${SQL_OFFSET},${SQL_LIMIT}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">s_pointsCreatedAt, s_partnerName, s_partnerSiteUrl</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user STATUS points searched/limited (sum, count)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(sdelta), COUNT(sdelta)
FROM 
(
SELECT points.delta AS sdelta
FROM points, userid, partner
WHERE points.userId=userid.user_id AND points.partnerId=partner.id
  AND points.tagId LIKE ?
  AND (points.status LIKE ? OR points.status LIKE ? OR points.status LIKE ?)
  AND userid.userId=?
  AND partner.shortName=?
  AND points.createdAt BETWEEN ? AND ?
LIMIT ?,?
) points;</stringProp>
            <stringProp name="queryArguments">${SQL_TAG_ID},${EXP_STATUS},${EXP_STATUS2},${EXP_STATUS3},${EXTUSER_ID},${PARTNER_SHORT},${SQL_STARTDATE},${SQL_ENDDATE},${SQL_OFFSET},${SQL_LIMIT}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
            <stringProp name="variableNames">s_deltaPointsSum,s_deltaPointsCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user STATUS points all (sum, count)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(delta), COUNT(delta)
FROM points, userid, partner
WHERE points.userId=userid.user_id AND points.partnerId=partner.id
  AND points.tagId LIKE ?
  AND (points.status LIKE ? OR points.status LIKE ? OR points.status LIKE ?)
  AND userid.userId=?
  AND partner.shortName=?
  AND points.createdAt BETWEEN ? AND ?;
</stringProp>
            <stringProp name="queryArguments">${SQL_TAG_ID},${EXP_STATUS},${EXP_STATUS2},${EXP_STATUS3},${EXTUSER_ID},${PARTNER_SHORT},${SQL_STARTDATE},${SQL_ENDDATE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_deltaPointsAllSum,s_deltaPointsAllCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get tag key, imageUrl" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT tagKey, imageUrl
FROM tag
WHERE id = ?
</stringProp>
            <stringProp name="queryArguments">${SQL_TAG_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_tagKey, s_tagImageUrl</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 14" enabled="true">
              <stringProp name="IfController.condition">${__threadNum} == 14</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate tag" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">UPDATE tag
SET tagStatus=&apos;INACTIVE&apos;
WHERE id=?;</stringProp>
                <stringProp name="queryArguments">${SQL_TAG_ID}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user 22" enabled="true">
              <stringProp name="IfController.condition">(${__threadNum} == 22)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="unverify user" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">UPDATE user, userid
SET user.verified=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
                <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get TRANSACTION HISTORY by client" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/client/${PARTNER_SHORT}/?apiKey=${PARTNER_KEY}&amp;user=${EXTUSER_ID}&amp;idType=${EXTUSER_ID_TYPE}${REST_TAG}${REST_STATUS}${REST_ASCENDING}${REST_OFFSET}${REST_LIMIT}${REST_STARTDATE}${REST_ENDDATE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get totalResults" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_totalResults</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalResults&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get searchResultsCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_searchResultsCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;searchResultsCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsDateArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsDateArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;transactionDate&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsStatusArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsStatusArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsPartnerNameArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsPartnerNameArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;site&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsPartnerSiteUrlArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsPartnerSiteUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsTagKey" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsTagKeyArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;tagName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsTagImageUrl" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsTagImageUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;tagImageUrl&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: totalResults count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="933007301">${s_deltaPointsAllCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_totalResults</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: searchResultsCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="955526452">${s_deltaPointsCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_searchResultsCount</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: resultsStatusArray count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="955526452">${s_deltaPointsCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_resultsStatusArray_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: resultTransactionDate in range" enabled="true">
              <stringProp name="BeanShellAssertion.query">Integer user = Integer.parseInt(Parameters);
if (user &gt;= 7 &amp;&amp; user != 18 &amp;&amp; user != 22)
{
	int count = Integer.parseInt(vars.get(&quot;m_resultsDateArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  Long resultDate = Long.parseLong(vars.get(&quot;m_resultsDateArray_&quot; + i));
	  Long expStartDate = Long.parseLong(vars.get(&quot;DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH&quot;));
	  Long expEndDate = Long.parseLong(vars.get(&quot;DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH&quot;));
	  if (resultDate &gt;= expStartDate &amp;&amp; resultDate &lt;= expEndDate)
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): &quot; + Long.valueOf(resultDate) + &quot; not between (&quot; + expStartDate + &quot; and &quot; + expEndDate + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: results vs db" enabled="true">
              <stringProp name="BeanShellAssertion.query">Integer user = Integer.parseInt(Parameters);
if (user == 17 || user == 18)
{
	int count = Integer.parseInt(vars.get(&quot;s_deltaPointsCount_1&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  Long resultDate = Long.parseLong(vars.get(&quot;m_resultsDateArray_&quot; + i));
	  Long dbDate = Long.parseLong(vars.get(&quot;s_pointsCreatedAt_&quot; +i));
	  
	  if (resultDate.equals(dbDate))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): resultDate: &quot; + Long.valueOf(resultDate) + &quot; doesn&apos;t equal dbDate: &quot; + dbDate;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: resultStatus" enabled="true">
              <stringProp name="BeanShellAssertion.query">Integer user = Integer.parseInt(Parameters);
if (user != 1 &amp;&amp; user != 7 &amp;&amp; user != 13 &amp;&amp; user != 14 &amp;&amp; user != 18  &amp;&amp; user != 19 &amp;&amp; user != 22)
{
	int count = Integer.parseInt(vars.get(&quot;m_resultsStatusArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultStatus = vars.get(&quot;m_resultsStatusArray_&quot; + i);
	  String expStatus = vars.get(&quot;EXP_STATUS&quot;);
	  String expStatus2 = vars.get(&quot;EXP_STATUS2&quot;);
	  String expStatus3 = vars.get(&quot;EXP_STATUS3&quot;);

	  if (resultStatus.equals(expStatus) || resultStatus.equals(expStatus2) || resultStatus.equals(expStatus3))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): &quot; + resultStatus + &quot; != expected: &quot; + expStatus;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partnerName" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsPartnerNameArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultPartnerName = vars.get(&quot;m_resultsPartnerNameArray_&quot; + i);
	  String expPartnerName = vars.get(&quot;s_partnerName_&quot; + i);
	  
	  if (resultPartnerName.equals(expPartnerName))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result partnerName (&quot; + resultPartnerName + &quot;) different from expected (&quot; + expPartnerName + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partnerSiteUrl" enabled="true">
              <stringProp name="BeanShellAssertion.query">	int count = Integer.parseInt(vars.get(&quot;m_resultsPartnerSiteUrlArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultPartnerSiteUrl = vars.get(&quot;m_resultsPartnerSiteUrlArray_&quot; + i);
	  String expPartnerSiteUrl = vars.get(&quot;s_partnerSiteUrl_&quot; + i);
	  
	  if (resultPartnerSiteUrl.equals(expPartnerSiteUrl))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result siteUrl (&quot; + resultPartnerSiteUrl + &quot;) different from expected (&quot; + expPartnerSiteUrl + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: tagKey" enabled="true">
              <stringProp name="BeanShellAssertion.query">String expTagKey = vars.get(&quot;s_tagKey_1&quot;);

Integer user = Integer.parseInt(Parameters);
if (user == 13 || user == 14)
{
	int count = Integer.parseInt(vars.get(&quot;m_resultsTagKeyArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultTagKey = vars.get(&quot;m_resultsTagKeyArray_&quot; + i);

	  if (resultTagKey.equals(expTagKey))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result tagKey (&quot; + resultTagKey + &quot;) different from expected (&quot; + expTagKey + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: tagImageUrl" enabled="true">
              <stringProp name="BeanShellAssertion.query">String expTagImageUrl = vars.get(&quot;s_tagImageUrl_1&quot;);

Integer user = Integer.parseInt(Parameters);
if (user == 13 || user == 14)
{
	int count = Integer.parseInt(vars.get(&quot;m_resultsTagImageUrlArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultTagImageUrl = vars.get(&quot;m_resultsTagImageUrlArray_&quot; + i);

	  if (resultTagImageUrl.equals(expTagImageUrl))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result tagImageUrl (&quot; + resultTagImageUrl + &quot;) different from expected (&quot; + expTagImageUrl + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Teardown" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 14" enabled="true">
              <stringProp name="IfController.condition">${__threadNum} == 14</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate tag" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">UPDATE tag
SET tagStatus=&apos;ACTIVE&apos;
WHERE id=?;</stringProp>
                <stringProp name="queryArguments">${SQL_TAG_ID}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user 22" enabled="true">
              <stringProp name="IfController.condition">(${__threadNum} == 22)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="verify user" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">UPDATE user, userid
SET user.verified=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
                <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-TM_GET_TH_C_S7|8|9|16" enabled="false">
        <stringProp name="TestPlan.comments">Getting TRANSACTION HISTORY by user REGISTERED in ePoints.com

(WS-TM_SETUP required)

User_1 - S7 - Trying to get TRANSACTION HISTORY by client REGISTERED in ePoints.com authorized by UNKNOWN partner/client
User_2 - S8 - Trying to get TRANSACTION HISTORY by client REGISTERED in ePoints.com authorized by INACTIVE partner/client
User_3 - S9 - Trying to get TRANSACTION HISTORY by client REGISTERED in ePoints.com for INACTIVE user
User_4 - S16 - Trying to get TRANSACTION HISTORY by client REGISTERED in ePoints.com for INCORRECT date range
User_5 - S27 - Trying to get TRANSACTION HISTORY by client REGISTERED in ePoints.com authorized by INCORRECT apiKey
User_6 - S28 - Trying to get TRANSACTION HISTORY by client REGISTERED in ePoints.com authorized by ANOTHER&apos;s CLIENT apiKey

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">6</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369649366000</longProp>
        <longProp name="ThreadGroup.end_time">1369649366000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-454019395">REST_STATUS</stringProp>
            <stringProp name="-898344891">REST_STARTDATE</stringProp>
            <stringProp name="-899349122">REST_ENDDATE</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="446479503">REST_TAG</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="1225548813">REST_ASCENDING</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1893037247">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="-214754211">UNAUTHORIZED_PARTNER</stringProp>
              <stringProp name="-2073572812">Unauthorized partner with shortName=[nonexisting]</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="486458200">nonexisting</stringProp>
            </collectionProp>
            <collectionProp name="-156512407">
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="3524">p4</stringProp>
            </collectionProp>
            <collectionProp name="-868490144">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1673685498">User with userId=[user60_id1@test.com] is not active</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="109499384">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="648304218">&amp;startDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="425354193">&amp;endDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-852130277">is greater then To=</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="987697473">
              <stringProp name="-1234286625">incorrect_apikey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="-214754211">UNAUTHORIZED_PARTNER</stringProp>
              <stringProp name="1602386850">Unauthorized partner with shortName=[p60]</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
            <collectionProp name="-1950308162">
              <stringProp name="-2084611095">p61aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="-214754211">UNAUTHORIZED_PARTNER</stringProp>
              <stringProp name="1602386850">Unauthorized partner with shortName=[p60]</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109354">p60</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-TM_GET_TH_C_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get TRANSACTION HISTORY by client" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/client/${PARTNER_SHORT}/?apiKey=${PARTNER_KEY}&amp;user=${EXTUSER_ID}&amp;idType=${EXTUSER_ID_TYPE}${REST_TAG}${REST_STATUS}${REST_ASCENDING}${REST_OFFSET}${REST_LIMIT}${REST_STARTDATE}${REST_ENDDATE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Teardown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-TM_GET_TH_U_S1|2|3|4|5|6|10|11|12|13|14|15|17|18|19|20|21|22|24|25|26" enabled="false">
        <stringProp name="TestPlan.comments">Getting TRANSACTION HISTORY by user REGISTERED in ePoints.com

(WS-TM_SETUP required)

User_1 - S1 - Getting ALL TRANSACTION HISTORY by user REGISTERED in ePoints.com
User_2 - S2 - Getting CONFIRMED TRANSACTION HISTORY by user REGISTERED in ePoints.com
User_3 - S3 - Getting PENDING TRANSACTION HISTORY by user REGISTERED in ePoints.com
User_4 - S4 - Getting DECLINED TRANSACTION HISTORY by user REGISTERED in ePoints.com
User_5 - S5 - Getting REDEEMED TRANSACTION HISTORY by user REGISTERED in ePoints.com
User_6 - S6 - Getting SPENT TRANSACTION HISTORY by user REGISTERED in ePoints.com
User_7 - S10 - Getting ALL TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month
User_8 - S11 - Getting CONFIRMED TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month
User_9 - S12 - Getting PENDING TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month
User_10 - S13 - Getting DECLINED TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month
User_11 - S14 - Getting REDEEMED TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month
User_12 - S15 - Getting SPENT TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month
User_13 - S17 - Getting ALL TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month for specific tag
User_14 - S18 - Getting ALL TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month for specific tag which is INACTIVE
User_15 - S19 - Getting CONFIRMED TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month for specific tag (limit 10 / offset 0)
User_16 - S20 - Getting CONFIRMED TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month for specific tag (limit 5 / offset 2)
User_17 - S21 - Getting CONFIRMED TRANSACTION HISTORY by user REGISTERED in ePoints.com for current month for specific tag sorted ASCENDING
User_18 - S22 - Getting ALL TRANSACTION HISTORY by user REGISTERED in ePoints.com tag sorted DESCENDING
User_19 - S24 - Getting ALL TRANSACTION HISTORY by user REGISTERED in ePoints.com requested by ACTIVE client for TAG NOT ASSIGNED to the client
User_20 - S25 - Getting CONFIRMED and PENDING TRANSACTION HISTORY by user REGISTERED in ePoints.com (one call to webservice with list of statuses)
User_21 - S26 - Getting CONFIRMED and PENDING and REDEEMED TRANSACTION HISTORY by user REGISTERED in ePoints.com (one call to webservice with list of three statuses)

user60:
CONFIRMED:	7[10	(55)(55)(55)	30]5
PENDING:	10[20	(55)	10]5
DECLINED:	2[2	(55)	11]6
REDEEMED:	3[6	(55)	15]5
SPENT	1[2	(55)	8]2
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">21</stringProp>
        <stringProp name="ThreadGroup.ramp_time">20</stringProp>
        <longProp name="ThreadGroup.start_time">1369649366000</longProp>
        <longProp name="ThreadGroup.end_time">1369649366000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-454019395">REST_STATUS</stringProp>
            <stringProp name="-898344891">REST_STARTDATE</stringProp>
            <stringProp name="-899349122">REST_ENDDATE</stringProp>
            <stringProp name="2038459508">EXP_STATUS</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-972341857">SQL_STARTDATE</stringProp>
            <stringProp name="-313951912">SQL_ENDDATE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="446479503">REST_TAG</stringProp>
            <stringProp name="1225548813">REST_ASCENDING</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="684514225">SQL_TAG_ID</stringProp>
            <stringProp name="1151551847">SQL_ASCENDING</stringProp>
            <stringProp name="545944644">SQL_OFFSET</stringProp>
            <stringProp name="1261862346">SQL_LIMIT</stringProp>
            <stringProp name="-1232264642">EXP_STATUS2</stringProp>
            <stringProp name="-1232264641">EXP_STATUS3</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="2070474072">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="533793157">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="1769363903">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="1167411762">&amp;status=PENDING</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-1960353813">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="2083606227">&amp;status=DECLINED</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1350822958">DECLINED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="1516920815">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="735191520">&amp;status=REDEEMED</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2408251">REDEEMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-1289282918">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1126420279">&amp;status=SPENT</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-369503289">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-1906184204">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-670613458">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="1167411762">&amp;status=PENDING</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-105363878">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="2083606227">&amp;status=DECLINED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1350822958">DECLINED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-923056546">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="735191520">&amp;status=REDEEMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="2408251">REDEEMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="565707017">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1126420279">&amp;status=SPENT</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="79104334">SPENT</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-1643309943">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-1643309943">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="1488106880">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="1200831399">&amp;limit=10</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-897206021">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778418">&amp;offset=2</stringProp>
              <stringProp name="1978399149">&amp;limit=5</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-2091019892">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-1071037126">&amp;status=CONFIRMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652294973">&amp;tag=TAG60_1</stringProp>
              <stringProp name="-1270047463">&amp;ascending=true</stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="65105">ASC</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-1740205200">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-730209544">&amp;ascending=false</stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="2094737">DESC</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="-1391706925">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="331159165">2003-11-02 00:00:00</stringProp>
              <stringProp name="-957696764">2150-11-02 00:00:00</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1652295934">&amp;tag=TAG61_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="1725">63</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="936129894">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="1835349765">&amp;status=CONFIRMED,PENDING</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="-212565678">${EXP_STATUS}</stringProp>
            </collectionProp>
            <collectionProp name="613995683">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="-589319678">&amp;status=CONFIRMED,PENDING,REDEEMED</stringProp>
              <stringProp name="2087782506">&amp;startDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1425961491">&amp;endDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-719778420">&amp;offset=0</stringProp>
              <stringProp name="-1347226649">&amp;limit=1000</stringProp>
              <stringProp name="37">%</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="2408251">REDEEMED</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-TM_GET_TH_U_PASS" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user != 17" enabled="true">
            <stringProp name="IfController.condition">${__threadNum}  != 17</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user STATUS points searched/limited" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT UNIX_TIMESTAMP(points.createdAt) *1000, partner.name, partner.siteUrl
FROM points, userid, partner
WHERE points.userId=userid.user_id AND points.partnerId=partner.id
  AND points.tagId LIKE ?
  AND (points.status LIKE ? OR points.status LIKE ? OR points.status LIKE ?)
  AND userid.userId=?
  AND points.createdAt BETWEEN ? AND ?
ORDER BY points.createdAt DESC
LIMIT ?,?;</stringProp>
              <stringProp name="queryArguments">${SQL_TAG_ID},${EXP_STATUS},${EXP_STATUS2},${EXP_STATUS3},${EXTUSER_ID},${SQL_STARTDATE},${SQL_ENDDATE},${SQL_OFFSET},${SQL_LIMIT}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR, VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">s_pointsCreatedAt, s_partnerName, s_partnerSiteUrl</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user = 17" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 17</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user STATUS points searched/limited" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT UNIX_TIMESTAMP(points.createdAt) *1000, partner.name, partner.siteUrl
FROM points, userid, partner
WHERE points.userId=userid.user_id AND points.partnerId=partner.id
  AND points.tagId LIKE ?
  AND (points.status LIKE ? OR points.status LIKE ? OR points.status LIKE ?)
  AND userid.userId=?
  AND points.createdAt BETWEEN ? AND ?
ORDER BY points.createdAt ASC
LIMIT ?,?;</stringProp>
              <stringProp name="queryArguments">${SQL_TAG_ID},${EXP_STATUS},${EXP_STATUS2},${EXP_STATUS3},${EXTUSER_ID},${SQL_STARTDATE},${SQL_ENDDATE},${SQL_OFFSET},${SQL_LIMIT}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR, VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">s_pointsCreatedAt, s_partnerName, s_partnerSiteUrl</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user STATUS points searched/limited (sum, count)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(sdelta), COUNT(sdelta)
FROM 
(
SELECT points.delta AS sdelta
FROM points, userid
WHERE points.userId=userid.user_id 
  AND points.tagId LIKE ?
  AND (points.status LIKE ? OR points.status LIKE ? OR points.status LIKE ?)
  AND userid.userId=?
  AND points.createdAt BETWEEN ? AND ?
LIMIT ?,?
) points;</stringProp>
            <stringProp name="queryArguments">${SQL_TAG_ID},${EXP_STATUS},${EXP_STATUS2},${EXP_STATUS3},${EXTUSER_ID},${SQL_STARTDATE},${SQL_ENDDATE},${SQL_OFFSET},${SQL_LIMIT}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR, VARCHAR, INTEGER, INTEGER</stringProp>
            <stringProp name="variableNames">s_deltaPointsSum, s_deltaPointsCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user STATUS points all (sum, count)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(delta), COUNT(delta)
FROM points, userid
WHERE points.userId=userid.user_id 
  AND points.tagId LIKE ?
  AND (points.status LIKE ? OR points.status LIKE ? OR points.status LIKE ?)
  AND userid.userId=?
  AND points.createdAt BETWEEN ? AND ?;
</stringProp>
            <stringProp name="queryArguments">${SQL_TAG_ID},${EXP_STATUS},${EXP_STATUS2},${EXP_STATUS3},${EXTUSER_ID},${SQL_STARTDATE},${SQL_ENDDATE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR, VARCHAR</stringProp>
            <stringProp name="variableNames">s_deltaPointsAllSum, s_deltaPointsAllCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get tag key, imageUrl" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT tagKey, imageUrl
FROM tag
WHERE id = ?
</stringProp>
            <stringProp name="queryArguments">${SQL_TAG_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_tagKey, s_tagImageUrl</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 14" enabled="true">
              <stringProp name="IfController.condition">${__threadNum} == 14</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate tag" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">UPDATE tag
SET tagStatus=&apos;INACTIVE&apos;
WHERE id=?;</stringProp>
                <stringProp name="queryArguments">${SQL_TAG_ID}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get TRANSACTION HISTORY by user" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}${REST_TAG}${REST_STATUS}${REST_ASCENDING}${REST_OFFSET}${REST_LIMIT}${REST_STARTDATE}${REST_ENDDATE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get totalResults" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_totalResults</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalResults&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get searchResultsCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_searchResultsCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;searchResultsCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsDateArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsDateArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;transactionDate&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsStatusArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsStatusArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsPartnerNameArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsPartnerNameArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;site&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsPartnerSiteUrlArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsPartnerSiteUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsTagKey" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsTagKeyArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;tagName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsTagImageUrl" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsTagImageUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;tagImageUrl&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: totalResults count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="933007301">${s_deltaPointsAllCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_totalResults</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: searchResultsCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="955526452">${s_deltaPointsCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_searchResultsCount</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: resultsStatusArray count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="955526452">${s_deltaPointsCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_resultsStatusArray_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: resultTransactionDate in range" enabled="true">
              <stringProp name="BeanShellAssertion.query">Integer user = Integer.parseInt(Parameters);
if (user &gt;= 7 &amp;&amp; user != 18)
{
	int count = Integer.parseInt(vars.get(&quot;m_resultsDateArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  Long resultDate = Long.parseLong(vars.get(&quot;m_resultsDateArray_&quot; + i));
	  Long expStartDate = Long.parseLong(vars.get(&quot;DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH&quot;));
	  Long expEndDate = Long.parseLong(vars.get(&quot;DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH&quot;));
	  if (resultDate &gt;= expStartDate &amp;&amp; resultDate &lt;= expEndDate)
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): &quot; + Long.valueOf(resultDate) + &quot; not between (&quot; + expStartDate + &quot; and &quot; + expEndDate + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: results vs db" enabled="true">
              <stringProp name="BeanShellAssertion.query">Integer user = Integer.parseInt(Parameters);
if (user == 17 || user == 18)
{
	int count = Integer.parseInt(vars.get(&quot;s_deltaPointsCount_1&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  Long resultDate = Long.parseLong(vars.get(&quot;m_resultsDateArray_&quot; + i));
	  Long dbDate = Long.parseLong(vars.get(&quot;s_pointsCreatedAt_&quot; +i));
	  
	  if (resultDate.equals(dbDate))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): resultDate: &quot; + Long.valueOf(resultDate) + &quot; doesn&apos;t equal dbDate: &quot; + dbDate;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: resultStatus" enabled="true">
              <stringProp name="BeanShellAssertion.query">Integer user = Integer.parseInt(Parameters);
if (user != 1 &amp;&amp; user != 7 &amp;&amp; user != 13 &amp;&amp; user != 14 &amp;&amp; user != 18  &amp;&amp; user != 19)
{
	int count = Integer.parseInt(vars.get(&quot;m_resultsStatusArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultStatus = vars.get(&quot;m_resultsStatusArray_&quot; + i);
	  String expStatus = vars.get(&quot;EXP_STATUS&quot;);
	  String expStatus2 = vars.get(&quot;EXP_STATUS2&quot;);
	  String expStatus3 = vars.get(&quot;EXP_STATUS3&quot;);

	  if (resultStatus.equals(expStatus) || resultStatus.equals(expStatus2) || resultStatus.equals(expStatus3))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): &quot; + resultStatus + &quot; != expected: &quot; + expStatus;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partnerName" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsPartnerNameArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultPartnerName = vars.get(&quot;m_resultsPartnerNameArray_&quot; + i);
	  String expPartnerName = vars.get(&quot;s_partnerName_&quot; + i);
	  
	  if (resultPartnerName.equals(expPartnerName))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result partnerName (&quot; + resultPartnerName + &quot;) different from expected (&quot; + expPartnerName + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partnerSiteUrl" enabled="true">
              <stringProp name="BeanShellAssertion.query">	int count = Integer.parseInt(vars.get(&quot;m_resultsPartnerSiteUrlArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultPartnerSiteUrl = vars.get(&quot;m_resultsPartnerSiteUrlArray_&quot; + i);
	  String expPartnerSiteUrl = vars.get(&quot;s_partnerSiteUrl_&quot; + i);
	  
	  if (resultPartnerSiteUrl.equals(expPartnerSiteUrl))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result siteUrl (&quot; + resultPartnerSiteUrl + &quot;) different from expected (&quot; + expPartnerSiteUrl + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: tagKey" enabled="true">
              <stringProp name="BeanShellAssertion.query">String expTagKey = vars.get(&quot;s_tagKey_1&quot;);

Integer user = Integer.parseInt(Parameters);
if (user == 13 || user == 14)
{
	int count = Integer.parseInt(vars.get(&quot;m_resultsTagKeyArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultTagKey = vars.get(&quot;m_resultsTagKeyArray_&quot; + i);

	  if (resultTagKey.equals(expTagKey))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result tagKey (&quot; + resultTagKey + &quot;) different from expected (&quot; + expTagKey + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: tagImageUrl" enabled="true">
              <stringProp name="BeanShellAssertion.query">String expTagImageUrl = vars.get(&quot;s_tagImageUrl_1&quot;);

Integer user = Integer.parseInt(Parameters);
if (user == 13 || user == 14)
{
	int count = Integer.parseInt(vars.get(&quot;m_resultsTagImageUrlArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultTagImageUrl = vars.get(&quot;m_resultsTagImageUrlArray_&quot; + i);

	  if (resultTagImageUrl.equals(expTagImageUrl))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result tagImageUrl (&quot; + resultTagImageUrl + &quot;) different from expected (&quot; + expTagImageUrl + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">${__threadNum}</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Teardown" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 14" enabled="true">
              <stringProp name="IfController.condition">${__threadNum} == 14</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate tag" enabled="true">
                <stringProp name="dataSource">MySQL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">UPDATE tag
SET tagStatus=&apos;ACTIVE&apos;
WHERE id=?;</stringProp>
                <stringProp name="queryArguments">${SQL_TAG_ID}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-TM_GET_TH_U_S7|8|9|16|23" enabled="false">
        <stringProp name="TestPlan.comments">Getting TRANSACTION HISTORY by user REGISTERED in ePoints.com

(WS-TM_SETUP required)

User_1 - S7 - Trying to get  TRANSACTION HISTORY by user REGISTERED in ePoints.com authorized by UNKNOWN partner/client
User_2 - S8 - Trying to get TRANSACTION HISTORY by user REGISTERED in ePoints.com authorized by INACTIVE partner/client
User_3 - S9 - Trying to get TRANSACTION HISTORY by user REGISTERED in ePoints.com whose account is INACTIVE
User_4 - S16 - Trying to get TRANSACTION HISTORY by user REGISTERED in ePoints.com for incorrect date range
User_5 - S23 - Trying to get TRANSACTION HISTORY by user REGISTERED in ePoints.com whose account is ACTIVE but UNVERIFIED
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369649366000</longProp>
        <longProp name="ThreadGroup.end_time">1369649366000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-454019395">REST_STATUS</stringProp>
            <stringProp name="-898344891">REST_STARTDATE</stringProp>
            <stringProp name="-899349122">REST_ENDDATE</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="446479503">REST_TAG</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="1225548813">REST_ASCENDING</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="867941390">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1932736888">
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="875039563">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1673685498">User with userId=[user60_id1@test.com] is not active</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-478885709">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="648304218">&amp;startDate=${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="425354193">&amp;endDate=${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-852130277">is greater then To=</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-383357880">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1491416262">GET_USER_TRANSACTION_INFO</stringProp>
              <stringProp name="-1427684523">USER_IS_NOT_VERIFIED</stringProp>
              <stringProp name="203259368">User with userId=[user71_id1@test.com] is not verified</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-TM_GET_TH_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get TRANSACTION HISTORY by user" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}${REST_TAG}${REST_STATUS}${REST_ASCENDING}${REST_OFFSET}${REST_LIMIT}${REST_STARTDATE}${REST_ENDDATE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Teardown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CM_GET_MPS_C_S1|2|3|4|5" enabled="false">
        <stringProp name="TestPlan.comments">Getting MONTHS POINTS SPENT by client REGISTERED in ePoints.com		

User_1 - S1 - Getting MONTHS POINT SPENT by client REGISTERED in ePoints.com with no transactions
User_2 - S2 - Getting MONTHS POINT SPENT by client REGISTERED in ePoints.com with CONFIRMED transactions
User_3 - S3 - Getting MONTHS POINT SPENT by client REGISTERED in ePoints.com with CONFIRMED/PENDING transactions
User_4 - S4 - Getting MONTHS POINT SPENT by client REGISTERED in ePoints.com with CONFIRMED/PENDING/DEDUCTED transactions
User_5 - S5 - Getting MONTHS POINT SPENT by client REGISTERED in ePoints.com with CONFIRMED/PENDING/DEDUCTED/PENDING CONFIRMED transactions
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369655234000</longProp>
        <longProp name="ThreadGroup.end_time">1369655234000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-626187678">EXP_TOTAL</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="1419918030">POINTS_STATUS</stringProp>
            <stringProp name="-2056835445">PRODUCT_ID</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-297452539">ONBEHALF_ID</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1138575383">
              <stringProp name="-2142792918">p40aKey</stringProp>
              <stringProp name="-2034931414">GET_POINTS_SPENT_IN_MONTH</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109292">p40</stringProp>
              <stringProp name="1345643842">onbehalf_p40</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <collectionProp name="1481541058">
              <stringProp name="-2142792918">p40aKey</stringProp>
              <stringProp name="-2034931414">GET_POINTS_SPENT_IN_MONTH</stringProp>
              <stringProp name="1758">75</stringProp>
              <stringProp name="-1894214041">user40_id1@test.com</stringProp>
              <stringProp name="79582070">TAG40</stringProp>
              <stringProp name="1982485311">CONFIRMED</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109292">p40</stringProp>
              <stringProp name="1345643842">onbehalf_p40</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <collectionProp name="133964906">
              <stringProp name="-2142792918">p40aKey</stringProp>
              <stringProp name="-2034931414">GET_POINTS_SPENT_IN_MONTH</stringProp>
              <stringProp name="1789">85</stringProp>
              <stringProp name="1895194630">user41_id1@test.com</stringProp>
              <stringProp name="79582070">TAG40</stringProp>
              <stringProp name="35394935">PENDING</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109292">p40</stringProp>
              <stringProp name="1345643842">onbehalf_p40</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <collectionProp name="-1984354262">
              <stringProp name="-2142792918">p40aKey</stringProp>
              <stringProp name="-2034931414">GET_POINTS_SPENT_IN_MONTH</stringProp>
              <stringProp name="1789">85</stringProp>
              <stringProp name="-1894214041">user40_id1@test.com</stringProp>
              <stringProp name="79582070">TAG40</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109292">p40</stringProp>
              <stringProp name="1345643842">onbehalf_p40</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <collectionProp name="-1842112854">
              <stringProp name="-2142792918">p40aKey</stringProp>
              <stringProp name="-2034931414">GET_POINTS_SPENT_IN_MONTH</stringProp>
              <stringProp name="1789">85</stringProp>
              <stringProp name="1895194630">user41_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109292">p40</stringProp>
              <stringProp name="1345643842">onbehalf_p40</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load Transactions" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop: add CONFIRMED points x3" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">COUNTER</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:5,&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;source_confirm_${COUNTER}&quot;,&quot;externalTransactionId&quot;:&quot;5 Confirmed Points added for tag ${TAG_KEY} C:${COUNTER}&quot;,&quot;reasonText&quot;:&quot;Looped 3&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1601759544">Created</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user40 - confirmed (last day of current month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;30&apos;, &apos;extTransId32&apos;, &apos;CONFIRMED&apos;, &apos;40&apos;, &apos;40&apos;, &apos;40&apos;, &apos;75&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load points user40 - confirmed (first day of next month)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO points (createdAt, delta, externalTransactionId, status, tagId, partnerId, userId, balance) VALUES (?,&apos;40&apos;, &apos;extTransId33&apos;, &apos;CONFIRMED&apos;, &apos;40&apos;, &apos;40&apos;, &apos;40&apos;, &apos;115&apos;);







</stringProp>
              <stringProp name="queryArguments">${DT_FIRST_DAY_OF_NEXT_MONTH_STR}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update pointsmap user40 - confirmed" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">UPDATE user_pointsmap  SET  pointsMap=&apos;115&apos; WHERE User_id=&apos;40&apos; and pointsMap_KEY=&apos;CONFIRMED&apos;;





</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add PENDING points" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:10,&quot;pointsType&quot;:&quot;PENDING&quot;,&quot;sourceURI&quot;:&quot;source_uri_pending5}&quot;,&quot;externalTransactionId&quot;:&quot;10 Pending Points added for tag ${TAG_KEY}&quot;,&quot;reasonText&quot;:&quot;Looped 3&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 4" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 4</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: DEDUCT points" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;:&quot;&quot;,&quot;numPoints&quot;:-5,&quot;pointsType&quot;:&quot;SPENT&quot;,&quot;sourceURI&quot;:&quot;source_uri_deducted5&quot;,&quot;externalTransactionId&quot;:&quot;5 Points deducted&quot;,&quot;reasonText&quot;:&quot;deductActivity&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 5" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 5</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: CONFIRM PENDING points" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${EXTUSER_ID}&quot;,&quot;userIdType&quot;:&quot;${EXTUSER_ID_TYPE}&quot;,&quot;clientId&quot;: &quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;${ONBEHALF_ID}&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;externalTransactionId&quot;:&quot;10 Points deducted&quot;,&quot;reasonText&quot;:&quot;${REASON_TXT}&quot;,&quot;sourceURI&quot;:&quot;confirmed_pend&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/transactions/48</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2524">OK</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CM_GET_MPS_C_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get PARTNER&apos;s MONTHS SPENT POINTS" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT SUM(delta)
FROM points, partner
WHERE points.partnerId=partner.id AND partner.accessKey=? AND points.createdAt BETWEEN ? AND ? AND (points.status=&apos;CONFIRMED&apos; OR points.status=&apos;PENDING&apos;)</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY},${DT_FIRST_DAY_OF_CURRENT_MONTH_STR},${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_deltaSum</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: deltaSum" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="433344114">${EXP_TOTAL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_deltaSum_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get PARTNER&apos;s data" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT name
FROM partner
WHERE accessKey=?;</stringProp>
            <stringProp name="queryArguments">${PARTNER_KEY}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnerName</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get MONTHS POINTS SPENT balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions?apiKey=${PARTNER_KEY}&amp;action=getThisMonthSpent</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get partner name" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_partnerName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get dateFrom" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_dateFrom</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;dateFrom&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get dateTo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_dateTo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;dateTo&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get total" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_total</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;total&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partner name" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1423000869">${s_partnerName_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_partnerName</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: dateFrom" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="944250615">${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_dateFrom</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: dateTo" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-948435435">${__javaScript(${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}+1000)}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_dateTo</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: total" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="433344114">${EXP_TOTAL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_total</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CM_GET_MPS_C_S6|7" enabled="false">
        <stringProp name="TestPlan.comments">Getting MONTHS POINTS SPENT by client REGISTERED in ePoints.com		

User_1 - S6 - Trying to get MONTHS POINT SPENT by client REGISTERED in ePoints.com requested by INACTIVE client/partner
User_2 - S7 - Trying to get MONTHS POINT SPENT by client REGISTERED in ePoints.com requested by UNKNOWN client/partner
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369655234000</longProp>
        <longProp name="ThreadGroup.end_time">1369655234000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="232691677">
              <stringProp name="-2142792918">p40aKey</stringProp>
              <stringProp name="-2034931414">GET_POINTS_SPENT_IN_MONTH</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1071561459">Partner with accessKey=[p40aKey] is not active</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <collectionProp name="-716681686">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-2034931414">GET_POINTS_SPENT_IN_MONTH</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="-220830797">There is no partner with accessKey=erased_from_existance</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CM_GET_MPS_C_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate p40aKey" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">UPDATE partner SET active=0 WHERE id=&apos;40&apos;;







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get MONTHS POINTS SPENT balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/transactions?apiKey=${PARTNER_KEY}&amp;action=getThisMonthSpent</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate p40aKey" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">UPDATE partner SET active=1 WHERE id=&apos;40&apos;;







</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_AD_U_S1|4|6" enabled="false">
        <stringProp name="TestPlan.comments">Getting user AUTHENTICATION data for the user registered in ePoints.com

User_1 - S1 - Getting user&apos;s AUTHENTICATION data for user REGISTERED in ePoints.com
User_2 - S4 - Getting user&apos;s AUTHENTICATION data for user REGISTERED in ePoints.com who is INACTIVE
User_3 - S6 - Getting user&apos;s AUTHENTICATION data for user REGISTERED in ePoints.com who is ACTIVE but UNVERIFIED
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1792876823">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-916498667">userId,active,firstName,lastName,password</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-1792876823">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-916498667">userId,active,firstName,lastName,password</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-658574578">
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-916498667">userId,active,firstName,lastName,password</stringProp>
              <stringProp name="1754">71</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_GET_AD_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s FULL details" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT firstName, lastName, title, gender ,UNIX_TIMESTAMP(birthDate) * 1000, mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode, password, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_fname,s_lname,s_title,s_gender, s_dob,s_mobile,s_houseNo,s_street,s_townOrCity,s_county,s_country,s_postcode, s_password, s_active</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get authentication data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get userId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_userid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get firstname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_fname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get lastname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_lname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;lastName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get password" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_password</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;password&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get active" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_active</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;active&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_userid</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: firstname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="731572189">${s_fname_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_fname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: lastname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1696467689">${s_lname_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_lname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: password" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2078212429">${s_password_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_password</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-755700670">${s_active_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_active</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_AD_U_S2|3|5" enabled="false">
        <stringProp name="TestPlan.comments">Getting user AUTHENTICATION data for the user registered in ePoints.com

User_1 - S2 - Trying to get user&apos;s AUTHENTICATION data for user REGISTERED in ePoints.com requested with INACTIVE client id
User_2 - S3 - Trying to get user&apos;s AUTHENTICATION data for user REGISTERED in ePoints.com requested with UNKNOWN client
User_1 - S5 - Trying to get user&apos;s AUTHENTICATION data for UNKNOWN user
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-731621648">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="847749152">id,active,firstName,lastName,password</stringProp>
            </collectionProp>
            <collectionProp name="1428230426">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="847749152">id,active,firstName,lastName,password</stringProp>
            </collectionProp>
            <collectionProp name="694357372">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="847749152">id,active,firstName,lastName,password</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_GET_AD_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get authentication data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_PD_U_S1|2|6" enabled="false">
        <stringProp name="TestPlan.comments">Getting personal information for the user registered in ePoints.com

WS-TM_SETUP required

User_1 - S1 - Retrieving personal non-sensitive information for user REGISTERED in ePoints.com
User_2 - S2 - Retrieving personal non-sensitive information for user REGISTERED in ePoints.com who is INACTIVE
User_3 - S6 - Retrieving PERSONAL non-sensitive information for user REGISTERED in ePoints.com who is ACTIVE but UNVERIFIED

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-50494889">
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1801567131">firstName,lastName,title,gender,birthDate,region,ePointsContact,thirdPartyContact,userKey,totalPointsEarned,topSiteEarners</stringProp>
            </collectionProp>
            <collectionProp name="1267337626">
              <stringProp name="387642821">user31_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1801567131">firstName,lastName,title,gender,birthDate,region,ePointsContact,thirdPartyContact,userKey,totalPointsEarned,topSiteEarners</stringProp>
            </collectionProp>
            <collectionProp name="1333069328">
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1801567131">firstName,lastName,title,gender,birthDate,region,ePointsContact,thirdPartyContact,userKey,totalPointsEarned,topSiteEarners</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_GET_PD_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PERSONAL data" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  u.firstName, 
  u.lastName, 
  u.title,  
  u.gender ,
  UNIX_TIMESTAMP(u.birthDate) * 1000,
  region,
  optInContactByOthers,
  optInContactByUs,
  COALESCE(userKey, 0) userKey
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_fname,s_lname,s_title,s_gender, s_dob, s_region, s_thirdPartyContact, s_ePointsContact, s_userKey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s totalPointsEarned" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  COALESCE(sum(p.delta), 0)
FROM points p, userid uid
WHERE 
  p.userId = uid.user_id 
  AND uid.userId=?
  AND p.status=&apos;CONFIRMED&apos;</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_totalPointsEarned</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s topSiteEarners" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  pr.siteUrl, pr.name, SUM(p.delta) earned
FROM points p, userid uid, partner pr
WHERE 
  p.userId = uid.user_id 
  AND p.partnerId = pr.id
  AND uid.userId=?
  AND p.status=&apos;CONFIRMED&apos;
GROUP BY p.partnerId
ORDER BY earned DESC
</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_topSiteEarnersSiteUrl, s_topSiteEarnersSiteName, s_topSiteEarnersPointsEarned</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get user personal information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get firstname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_fname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get lastname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_lname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;lastName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get title" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_title</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;title&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get gender" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_gender</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;gender&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get dob" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_dob</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;birthDate&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get region" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_region</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;region&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ePointsContact" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_ePointsContact</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ePointsContact&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get thirdPartyContact" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_thirdPartyContact</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;thirdPartyContact&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get userKey" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_userKey</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userKey&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get totalPointsEarned" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_totalPointsEarned</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalPointsEarned&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get topSiteEarnersSiteUrlArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_topSiteEarnersSiteUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get topSiteEarnersSiteNameArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_topSiteEarnersSiteNameArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;siteName&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get topSiteEarnersPointsEarnedArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_topSiteEarnersPointsEarnedArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;pointsEarned&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: firstname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="731572189">${s_fname_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_fname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: lastname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1696467689">${s_lname_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_lname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: title" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-238407658">${s_title_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_title</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: gender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-713385305">${s_gender_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_gender</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: dob" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1816450665">${s_dob_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_dob</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: region" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-885844588">${s_region_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_region</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ePointsContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1420410960">${s_ePointsContact_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_ePointsContact</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: thirdPartyContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1751653395">${s_thirdPartyContact_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_thirdPartyContact</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1648290202">${s_userKey_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_userKey</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: totalPointsEarned" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="474222992">${s_totalPointsEarned_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_totalPointsEarned</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: topSiteEarnersSiteUrlArray" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_topSiteEarnersPointsEarnedArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_topSiteEarnersSiteUrlArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_topSiteEarnersSiteUrl_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): topSiteEarnersSiteUrl (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: topSiteEarnersSiteNameArray" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_topSiteEarnersPointsEarnedArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_topSiteEarnersSiteNameArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_topSiteEarnersSiteName_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): topSiteEarnersSiteName (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: topSiteEarnersPointsEarnedArray" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_topSiteEarnersPointsEarnedArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_topSiteEarnersPointsEarnedArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_topSiteEarnersPointsEarned_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): topSiteEarnersPointsEarned (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_PD_U_S3|4|5" enabled="false">
        <stringProp name="TestPlan.comments">Getting personal information for the user registered in ePoints.com

User_1 - S3 - Trying to retrieve personal non-sensitive information for user REGISTERED in ePoints.com requested by INACTIVE client/partner
User_2 - S4 - Trying to retrieve personal non-sensitive information for user REGISTERED in ePoints.com requested by UNKNOWN client/partner
User_3 - S5 - Trying to retrieve personal non-sensitive information for user NOT REGISTERED in ePoints.com
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1661821338">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="2071222320">firstName,lastName,title,gender,birthDate</stringProp>
            </collectionProp>
            <collectionProp name="369720592">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="2071222320">firstName,lastName,title,gender,birthDate</stringProp>
            </collectionProp>
            <collectionProp name="-134721028">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="2071222320">firstName,lastName,title,gender,birthDate</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_GET_PD_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get user personal information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId,e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_CD_U_S1|2|6" enabled="false">
        <stringProp name="TestPlan.comments">Getting contact information for the user registered in ePoints.com

User_1 - S1 - Retrieving contact information for user REGISTERED in ePoints.com
User_2 - S2 - Retrieving contact information for user REGISTERED in ePoints.com who is INACTIVE
User_3 - S6 - Retrieving CONTACT information for user REGISTERED in ePoints.com who is ACTIVE but UNVERIFIED

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-314083554">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-514664532">mobileNumber,houseNumberOrName,street,townOrCity,county,country,postcode</stringProp>
            </collectionProp>
            <collectionProp name="-314083554">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-514664532">mobileNumber,houseNumberOrName,street,townOrCity,county,country,postcode</stringProp>
            </collectionProp>
            <collectionProp name="1939262899">
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-514664532">mobileNumber,houseNumberOrName,street,townOrCity,county,country,postcode</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_GET_CD_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONTACT details" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_mobile,s_houseNo,s_street,s_townOrCity,s_county,s_country,s_postcode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get user contact information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get mobile" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_mobile</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;mobileNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get houseNumberOrName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_houseNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;houseNumberOrName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get street" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_street</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;street&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get townOrCity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_town</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;townOrCity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get county" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_county</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;county&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get country" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_country</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;country&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get postcode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_postcode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;postcode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: mobile" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-335862490">${s_mobile_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_mobile</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: houseNumberOrName" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2021601267">${s_houseNo_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_houseNo</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: street" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1271914971">${s_street_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_street</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: townOrCity" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="344482664">${s_townOrCity_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_town</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="392643454">${s_county_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_county</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-718602920">${s_country_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_country</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: postcode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="486729755">${s_postcode_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_postcode</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_CD_U_S3|4|5" enabled="false">
        <stringProp name="TestPlan.comments">Getting contact information for the user registered in ePoints.com

User_1 - S3 - Trying to retrieve contact information for user REGISTERED in ePoints.com requested by INACTIVE client/partner
User_2 - S4 - Trying to retrieve contact information for user REGISTERED in ePoints.com requested by UNKNOWN client/partner
User_3 - S5 - Trying to retrieve contact information for user NOT REGISTERED in ePoints.com
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="2123820678">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-514664532">mobileNumber,houseNumberOrName,street,townOrCity,county,country,postcode</stringProp>
            </collectionProp>
            <collectionProp name="-139604688">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-514664532">mobileNumber,houseNumberOrName,street,townOrCity,county,country,postcode</stringProp>
            </collectionProp>
            <collectionProp name="-644046308">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="-514664532">mobileNumber,houseNumberOrName,street,townOrCity,county,country,postcode</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_GET_CD_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get user contact information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}&amp;fields=${FIELDS_LIST}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId,e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_FD_U_S1|2|6" enabled="false">
        <stringProp name="TestPlan.comments">Getting Full information for the user registered in ePoints.com

User_1 - S1 - Retrieving FULL information for user REGISTERED in ePoints.com
User_2 - S2 - Retrieving FULL information for user REGISTERED in ePoints.com who is INACTIVE
User_3 - S6 - Retrieving FULL information for user REGISTERED in ePoints.com who is ACTIVE but UNVERIFIED
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-856835484">FIELDS_LIST</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1427180729">
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1998004331">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-43616512">
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_GET_FD_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s FULL details" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  firstName, 
  lastName, 
  title, 
  gender ,
  UNIX_TIMESTAMP(birthDate) *1000, 
  mobileNumber, 
  houseNumberOrName, 
  street, townOrCity, 
  county, 
  country, 
  postcode, 
  password, 
  emailVerified, 
  uid.userIdType, 
  p.siteUrl, 
  UNIX_TIMESTAMP(passwordChangedAt)*1000, 
  UNIX_TIMESTAMP(registrationAt)*1000, 
  email, 
  p.name, 
  uid.userId, 
  u.active,
  region,
  optInContactByOthers,
  optInContactByUs,
  COALESCE(userKey, 0) userKey
FROM user u, userid uid, partner p
WHERE u.id = uid.user_id AND u.registrationSiteId=p.id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_fname,s_lname,s_title,s_gender, s_dob,s_mobile,s_houseNo,s_street,s_townOrCity,s_county,s_country,s_postcode,s_password,s_emailVerified,s_userIdType,s_partnersiteUrl,s_passwordChangedAt, s_registrationAt, s_email, s_partnerName, s_userId, s_userActive, s_region, s_thirdPartyContact, s_ePointsContact, s_userKey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s totalPointsEarned" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  COALESCE(sum(p.delta), 0)
FROM points p, userid uid
WHERE 
  p.userId = uid.user_id 
  AND uid.userId=?
  AND p.status=&apos;CONFIRMED&apos;</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_totalPointsEarned</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s topSiteEarners" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  pr.siteUrl, pr.name, SUM(p.delta) earned
FROM points p, userid uid, partner pr
WHERE 
  p.userId = uid.user_id 
  AND p.partnerId = pr.id
  AND uid.userId=?
  AND p.status=&apos;CONFIRMED&apos;
GROUP BY p.partnerId
ORDER BY earned DESC
</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_topSiteEarnersSiteUrl, s_topSiteEarnersSiteName, s_topSiteEarnersPointsEarned</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get user full information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get firstname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_fname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get lastname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_lname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;lastName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get title" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_title</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;title&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get gender" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_gender</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;gender&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get dob" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_dob</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;birthDate&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get mobile" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_mobile</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;mobileNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get houseNumberOrName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_houseNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;houseNumberOrName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get street" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_street</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;street&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get townOrCity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_town</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;townOrCity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get county" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_county</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;county&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get country" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_country</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;country&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get postcode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_postcode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;postcode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get password" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_password</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;password&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get emailVerified" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_emailVerified</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;emailVerified&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get userId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_userId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get userIdType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_userIdType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userIdType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get partnersiteUrl" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_partnersiteUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;registrationSiteUrl&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get passwordChangedAt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_passwordChangedAt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;passwordChangedDate&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get registrationDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_registrationDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;registrationDate&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get email" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_email</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get registrationSiteName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_registrationSiteName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;registrationSiteName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get userActive" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_userActive</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;active&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get region" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_region</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;region&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ePointsContact" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_ePointsContact</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ePointsContact&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get thirdPartyContact" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_thirdPartyContact</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;thirdPartyContact&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get userKey" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_userKey</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userKey&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get totalPointsEarned" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_totalPointsEarned</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalPointsEarned&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get topSiteEarnersSiteUrlArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_topSiteEarnersSiteUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get topSiteEarnersSiteNameArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_topSiteEarnersSiteNameArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;siteName&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get topSiteEarnersPointsEarnedArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_topSiteEarnersPointsEarnedArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;pointsEarned&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: firstname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="731572189">${s_fname_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_fname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: lastname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1696467689">${s_lname_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_lname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: title" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-238407658">${s_title_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_title</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: gender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-713385305">${s_gender_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_gender</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: dob" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1816450665">${s_dob_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_dob</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: mobile" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-335862490">${s_mobile_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_mobile</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: houseNumberOrName" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2021601267">${s_houseNo_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_houseNo</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: street" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1271914971">${s_street_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_street</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: townOrCity" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="344482664">${s_townOrCity_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_town</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="392643454">${s_county_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_county</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-718602920">${s_country_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_country</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: postcode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="486729755">${s_postcode_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_postcode</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: password" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2078212429">${s_password_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_password</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-246536216">${s_userIdType_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_userIdType</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnersiteUrl" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1835585832">${s_partnersiteUrl_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_partnersiteUrl</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: passwordChangedAt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1367739454">${s_passwordChangedAt_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_passwordChangedAt</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: registrationDate" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="337189308">${s_registrationAt_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_registrationDate</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1902227374">${s_email_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_email</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: registrationSiteName" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1423000869">${s_partnerName_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_registrationSiteName</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-641469182">${s_userId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_userId</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userActive" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1763175991">${s_userActive_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_userActive</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: region" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-885844588">${s_region_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_region</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ePointsContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1420410960">${s_ePointsContact_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_ePointsContact</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: thirdPartyContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1751653395">${s_thirdPartyContact_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_thirdPartyContact</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1648290202">${s_userKey_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_userKey</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: totalPointsEarned" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="474222992">${s_totalPointsEarned_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_totalPointsEarned</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: topSiteEarnersSiteUrlArray" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_topSiteEarnersPointsEarnedArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_topSiteEarnersSiteUrlArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_topSiteEarnersSiteUrl_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): topSiteEarnersSiteUrl (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: topSiteEarnersSiteNameArray" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_topSiteEarnersPointsEarnedArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_topSiteEarnersSiteNameArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_topSiteEarnersSiteName_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): topSiteEarnersSiteName (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: topSiteEarnersPointsEarnedArray" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_topSiteEarnersPointsEarnedArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_topSiteEarnersPointsEarnedArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_topSiteEarnersPointsEarned_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): topSiteEarnersPointsEarned (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_FD_U_S3|4|5" enabled="false">
        <stringProp name="TestPlan.comments">Getting Full information for the user registered in ePoints.com

User_1 - S3 - Trying to retrieve FULL information for user REGISTERED in ePoints.com requested by INACTIVE client/partner
User_2 - S4 - Trying to retrieve FULL information for user REGISTERED in ePoints.com requested by UNKNOWN client/partner
User_3 - S5 - Trying to retrieve FULL information for user NOT REGISTERED in ePoints.com
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1667113670">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <collectionProp name="1039910620">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <collectionProp name="-777477008">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="2006375129">GET_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_GET_CD_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get user contact information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId,e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_PD_U_S1|6" enabled="false">
        <stringProp name="TestPlan.comments">Updating PERSONAL information for the user registered in ePoints.com

User_1 - S1 - Updating PERSONAL information for user REGISTERED in ePoints.com
User_2 - S6 - Updating PERSONAL information for user REGISTERED in ePoints.com who is ACTIVE but UNVERIFIED
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-859801371">S_FNAME</stringProp>
            <stringProp name="-854260245">S_LNAME</stringProp>
            <stringProp name="-847002804">S_TITLE</stringProp>
            <stringProp name="-863342547">S_GENDER</stringProp>
            <stringProp name="79550251">S_DOB</stringProp>
            <stringProp name="-399951017">E_FNAME</stringProp>
            <stringProp name="-394409891">E_LNAME</stringProp>
            <stringProp name="-387152450">E_TITLE</stringProp>
            <stringProp name="507116539">E_GENDER</stringProp>
            <stringProp name="66620957">E_DOB</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-548625312">S_REGION</stringProp>
            <stringProp name="821833774">E_REGION</stringProp>
            <stringProp name="-539828476">S_EPOINTSCONTACT</stringProp>
            <stringProp name="-1982284590">E_EPOINTSCONTACT</stringProp>
            <stringProp name="2028501077">S_THIRDPARTYCONTACT</stringProp>
            <stringProp name="966205383">E_THIRDPARTYCONTACT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-901545392">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="1562094082">first_name_30</stringProp>
              <stringProp name="-1999887384">last_name_30</stringProp>
              <stringProp name="2501">Mr</stringProp>
              <stringProp name="2358797">MALE</stringProp>
              <stringProp name="-1485065427">1067792399000</stringProp>
              <stringProp name="720441214">first_name_30_updated</stringProp>
              <stringProp name="882131812">last_name_30_updated</stringProp>
              <stringProp name="77646">Mrs</stringProp>
              <stringProp name="2070122316">FEMALE</stringProp>
              <stringProp name="-1932796152">${__javaScript(${S_DOB}+86000)}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="74346376">region_30</stringProp>
              <stringProp name="-1518276860">region_30_updated</stringProp>
              <stringProp name="97196323">false</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="97196323">false</stringProp>
            </collectionProp>
            <collectionProp name="-1355470349">
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="1562094207">first_name_71</stringProp>
              <stringProp name="-1999887259">last_name_71</stringProp>
              <stringProp name="2501">Mr</stringProp>
              <stringProp name="2358797">MALE</stringProp>
              <stringProp name="1120655752">1067782559000</stringProp>
              <stringProp name="-1873067269">first_name_71_updated</stringProp>
              <stringProp name="-1711376671">last_name_71_updated</stringProp>
              <stringProp name="77646">Mrs</stringProp>
              <stringProp name="2070122316">FEMALE</stringProp>
              <stringProp name="-1932796152">${__javaScript(${S_DOB}+86000)}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="74346501">region_71</stringProp>
              <stringProp name="183181953">region_71_updated</stringProp>
              <stringProp name="97196323">false</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="97196323">false</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_PD_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PERSONAL details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  firstName, 
  lastName, 
  title, 
  gender,
  UNIX_TIMESTAMP(birthDate) * 1000,
  region,
  optInContactByOthers,
  optInContactByUs
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_fname,s_lname,s_title,s_gender, s_dob, s_region, s_thirdPartyContact, s_ePointsContact</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_fname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1652810255">${S_FNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_fname_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_lname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824585161">${S_LNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_lname_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_title" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2049565832">${S_TITLE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_title_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_gender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="339088121">${S_GENDER}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_gender_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_dob" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1723476407">${S_DOB}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_dob_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_region" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1505387814">${S_REGION}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_region_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_ePointsContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2023122434">${S_EPOINTSCONTACT}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_ePointsContact_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_thirdPartyContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1670199777">${S_THIRDPARTYCONTACT}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_thirdPartyContact_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update user PERSONAL information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;title&quot;:&quot;${E_TITLE}&quot;, &quot;firstName&quot;:&quot;${E_FNAME}&quot;, &quot;lastName&quot;:&quot;${E_LNAME}&quot;, &quot;gender&quot;:&quot;${E_GENDER}&quot;, &quot;birthDate&quot;:${E_DOB}, &quot;region&quot;:&quot;${E_REGION}&quot;, &quot;ePointsContact&quot;:${E_EPOINTSCONTACT}, &quot;thirdPartyContact&quot;:${E_THIRDPARTYCONTACT}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get firstname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_fname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get lastname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_lname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;lastName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get title" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_title</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;title&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get gender" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_gender</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;gender&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get dob" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_dob</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;birthDate&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get region" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_region</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;region&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ePointsContact" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_ePointsContact</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ePointsContact&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get thirdPartyContact" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_thirdPartyContact</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;thirdPartyContact&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: firstname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1271697955">${E_FNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_fname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: lastname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1099923049">${E_LNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_lname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: title" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-874942378">${E_TITLE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_title</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: gender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-126353173">${E_GENDER}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_gender</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: dob" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2124284521">${E_DOB}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_dob</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: region" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1039946520">${E_REGION}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_region</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ePointsContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="256655860">${E_EPOINTSCONTACT}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_ePointsContact</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: thirdPartyContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-241627923">${E_THIRDPARTYCONTACT}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_thirdPartyContact</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PERSONAL details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  firstName, 
  lastName, 
  title, 
  gender,
  UNIX_TIMESTAMP(birthDate) * 1000,
  region,
  optInContactByOthers,
  optInContactByUs
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_fname,e_lname,e_title,e_gender,e_dob, e_region, e_thirdPartyContact, e_ePointsContact</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: firstname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1271697955">${E_FNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_fname_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: lastname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1099923049">${E_LNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_lname_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: title" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-874942378">${E_TITLE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_title_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: gender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-126353173">${E_GENDER}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_gender_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: dob" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2124284521">${E_DOB}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_dob_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: e_region" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1039946520">${E_REGION}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_region_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: e_ePointsContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="256655860">${E_EPOINTSCONTACT}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_ePointsContact_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: e_thirdPartyContact" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-241627923">${E_THIRDPARTYCONTACT}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_thirdPartyContact_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_PD_U_S3|4|5|2" enabled="false">
        <stringProp name="TestPlan.comments">Updating PERSONAL information for the user registered in ePoints.com

User_1 - S3 - Trying to update PERSONAL information for user REGISTERED in ePoints.com requested by INACTIVE client/partner
User_2 - S4 - Trying to update PERSONAL information for user REGISTERED in ePoints.com requested by UNKNOWN client/partner
User_3 - S5 - Trying to update PERSONAL information for user NOT REGISTERED in ePoints.com
User_4 - S2 - Trying to update PERSONAL information for user REGISTERED in ePoints.com who is INACTIVE				

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-859801371">S_FNAME</stringProp>
            <stringProp name="-854260245">S_LNAME</stringProp>
            <stringProp name="-847002804">S_TITLE</stringProp>
            <stringProp name="-863342547">S_GENDER</stringProp>
            <stringProp name="79550251">S_DOB</stringProp>
            <stringProp name="-399951017">E_FNAME</stringProp>
            <stringProp name="-394409891">E_LNAME</stringProp>
            <stringProp name="-387152450">E_TITLE</stringProp>
            <stringProp name="507116539">E_GENDER</stringProp>
            <stringProp name="66620957">E_DOB</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="26967822">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="720441214">first_name_30_updated</stringProp>
              <stringProp name="882131812">last_name_30_updated</stringProp>
              <stringProp name="77646">Mrs</stringProp>
              <stringProp name="2070122316">FEMALE</stringProp>
              <stringProp name="-1457478961">1067792485000</stringProp>
              <stringProp name="2026975922">first_name_30_updated_new1</stringProp>
              <stringProp name="-1934590324">last_name_30_updated_new1</stringProp>
              <stringProp name="2398492">Miss</stringProp>
              <stringProp name="2358797">MALE</stringProp>
              <stringProp name="-1932796152">${__javaScript(${S_DOB}+86000)}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <collectionProp name="1243840420">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="720441214">first_name_30_updated</stringProp>
              <stringProp name="882131812">last_name_30_updated</stringProp>
              <stringProp name="77646">Mrs</stringProp>
              <stringProp name="2070122316">FEMALE</stringProp>
              <stringProp name="-1457478961">1067792485000</stringProp>
              <stringProp name="2026975922">first_name_30_updated_new1</stringProp>
              <stringProp name="-1934590324">last_name_30_updated_new1</stringProp>
              <stringProp name="2398492">Miss</stringProp>
              <stringProp name="2358797">MALE</stringProp>
              <stringProp name="-1932796152">${__javaScript(${S_DOB}+86000)}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <collectionProp name="-127002550">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-265212782">new_fname</stringProp>
              <stringProp name="-259671656">new_lname</stringProp>
              <stringProp name="2398492">Miss</stringProp>
              <stringProp name="2070122316">FEMALE</stringProp>
              <stringProp name="-1457478961">1067792485000</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <collectionProp name="-25554552">
              <stringProp name="387642821">user31_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1014532182">User with userId=[user31_id1@test.com] is not active</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="1562094083">first_name_31</stringProp>
              <stringProp name="-1999887383">last_name_31</stringProp>
              <stringProp name="2501">Mr</stringProp>
              <stringProp name="2358797">MALE</stringProp>
              <stringProp name="1142022943">1067790719000</stringProp>
              <stringProp name="-1087013249">first_name_31_updated</stringProp>
              <stringProp name="-925322651">last_name_31_updated</stringProp>
              <stringProp name="77646">Mrs</stringProp>
              <stringProp name="2070122316">FEMALE</stringProp>
              <stringProp name="-1932796152">${__javaScript(${S_DOB}+86000)}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_PD_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PERSONAL details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT firstName, lastName, title, gender ,UNIX_TIMESTAMP(birthDate) * 1000
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_fname,s_lname,s_title,s_gender, s_dob</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user exists" enabled="true">
            <stringProp name="IfController.condition">&quot;${EXTUSER_ID}&quot; != &quot;erased_from_existance&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_fname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1652810255">${S_FNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_fname_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_lname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824585161">${S_LNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_lname_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_title" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2049565832">${S_TITLE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_title_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_gender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="339088121">${S_GENDER}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_gender_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_dob" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1723476407">${S_DOB}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_dob_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update user PERSONAL information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;title&quot;:&quot;${E_TITLE}&quot;, &quot;firstName&quot;:&quot;${E_FNAME}&quot;, &quot;lastName&quot;:&quot;${E_LNAME}&quot;, &quot;gender&quot;:&quot;${E_GENDER}&quot;, &quot;birthDate&quot;:${E_DOB}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user exists" enabled="true">
            <stringProp name="IfController.condition">&quot;${EXTUSER_ID}&quot; != &quot;erased_from_existance&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PERSONAL details (new)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT firstName, lastName, title, gender ,UNIX_TIMESTAMP(birthDate) * 1000
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_fname,e_lname,e_title,e_gender,e_dob</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: firstname" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1652810255">${S_FNAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_fname_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: lastname" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1824585161">${S_LNAME}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_lname_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: title" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2049565832">${S_TITLE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_title_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: gender" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="339088121">${S_GENDER}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_gender_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: dob" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1723476407">${S_DOB}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_dob_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_CD_U_S1|6" enabled="false">
        <stringProp name="TestPlan.comments">Updating CONTACT  information for the user registered in ePoints.com

User_1 - S1 - Updating CONTACT  information for user REGISTERED in ePoints.com
User_2 - S6 - Updating CONTACT information for user REGISTERED in ePoints.com who is ACTIVE but UNVERIFIED
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-682684914">S_MOBILE</stringProp>
            <stringProp name="186891477">S_HOUSENO</stringProp>
            <stringProp name="-505819793">S_STREET</stringProp>
            <stringProp name="-1828944425">S_CITY</stringProp>
            <stringProp name="-968405322">S_COUNTY</stringProp>
            <stringProp name="44205962">S_COUNTRY</stringProp>
            <stringProp name="79571221">S_ZIP</stringProp>
            <stringProp name="687774172">E_MOBILE</stringProp>
            <stringProp name="-278549817">E_HOUSENO</stringProp>
            <stringProp name="864639293">E_STREET</stringProp>
            <stringProp name="2065214757">E_CITY</stringProp>
            <stringProp name="402053764">E_COUNTY</stringProp>
            <stringProp name="-421235332">E_COUNTRY</stringProp>
            <stringProp name="66641927">E_ZIP</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="673085890">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="624328474">mobile_30</stringProp>
              <stringProp name="2002565334">housenum_30</stringProp>
              <stringProp name="-311724007">street_30</stringProp>
              <stringProp name="-1132650710">town_30</stringProp>
              <stringProp name="1352834418">county_30</stringProp>
              <stringProp name="-1017453658">country_30</stringProp>
              <stringProp name="-187708081">postcode_30</stringProp>
              <stringProp name="265374870">mobile_30_updated</stringProp>
              <stringProp name="-84932014">housenum_30_updated</stringProp>
              <stringProp name="1605949077">street_30_updated</stringProp>
              <stringProp name="180280486">town_30_updated</stringProp>
              <stringProp name="197497582">county_30_updated</stringProp>
              <stringProp name="448685346">country_30_updated</stringProp>
              <stringProp name="-1033398837">postcode_30_updated</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <collectionProp name="-1110313118">
              <stringProp name="2122882761">user71_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="624328599">mobile_71</stringProp>
              <stringProp name="2002565459">housenum_71</stringProp>
              <stringProp name="-311723882">street_71</stringProp>
              <stringProp name="-1132650585">town_71</stringProp>
              <stringProp name="1352834543">county_71</stringProp>
              <stringProp name="-1017453533">country_71</stringProp>
              <stringProp name="-187707956">postcode_71</stringProp>
              <stringProp name="1966833683">mobile_71_updated</stringProp>
              <stringProp name="1616526799">housenum_71_updated</stringProp>
              <stringProp name="-987559406">street_71_updated</stringProp>
              <stringProp name="1881739299">town_71_updated</stringProp>
              <stringProp name="1898956395">county_71_updated</stringProp>
              <stringProp name="-2144823137">country_71_updated</stringProp>
              <stringProp name="668059976">postcode_71_updated</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_CD_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PERSONAL details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_mobile,s_houseNo,s_street,s_townOrCity,s_county,s_country,s_postcode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_mobile" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1644507448">${S_MOBILE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_mobile_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_houseno" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-131005857">${S_HOUSENO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_houseNo_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_street" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1462608393">${S_STREET}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_street_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_townOrCity" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1889247025">${S_CITY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_townOrCity_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1377109392">${S_COUNTY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_county_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-259289526">${S_COUNTRY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_country_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_postcode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1722826337">${S_ZIP}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_postcode_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update user CONTACT information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;mobileNumber&quot;:&quot;${E_MOBILE}&quot;, &quot;houseNumberOrName&quot;:&quot;${E_HOUSENO}&quot;, &quot;street&quot;:&quot;${E_STREET}&quot;, &quot;townOrCity&quot;:&quot;${E_CITY}&quot;, &quot;county&quot;:&quot;${E_COUNTY}&quot;, &quot;country&quot;:&quot;${E_COUNTRY}&quot;, &quot;postcode&quot;:&quot;${E_ZIP}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get mobile" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_mobile</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;mobileNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get houseno" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_houseno</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;houseNumberOrName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get street" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_street</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;street&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get townOrCity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_townOrCity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;townOrCity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get county" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_county</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;county&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get country" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_country</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;country&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get postcode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_postcode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;postcode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: mobile" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1179066154">${E_MOBILE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_mobile</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: houseno" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1674784083">${E_HOUSENO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_houseno</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: street" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1928049687">${E_STREET}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_street</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: townOrCity" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1429396671">${E_CITY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_townOrCity</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="911668098">${E_COUNTY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_county</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1803067752">${E_COUNTRY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_country</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: postcode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2123634451">${E_ZIP}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_postcode</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PERSONAL details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_mobile,e_houseNo,e_street,e_townOrCity,e_county,e_country,e_postcode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: mobile" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1179066154">${E_MOBILE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_mobile_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: houseno" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1674784083">${E_HOUSENO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_houseNo_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: street" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1928049687">${E_STREET}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_street_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: townOrCity" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1429396671">${E_CITY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_townOrCity_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="911668098">${E_COUNTY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_county_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1803067752">${E_COUNTRY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_country_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: postcode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2123634451">${E_ZIP}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_postcode_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_CD_U_S3|4|5|2" enabled="false">
        <stringProp name="TestPlan.comments">Updating CONTACT information for the user registered in ePoints.com

User_1 - S3 - Trying to update CONTACT information for user REGISTERED in ePoints.com requested by INACTIVE client/partner
User_2 - S4 - Trying to update CONTACT information for user REGISTERED in ePoints.com requested by UNKNOWN client/partner
User_3 - S5 - Trying to update CONTACT information for user NOT REGISTERED in ePoints.com
User_4 - S2 - Trying to update CONTACT information for user REGISTERED in ePoints.com who is INACTIVE				
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-682684914">S_MOBILE</stringProp>
            <stringProp name="186891477">S_HOUSENO</stringProp>
            <stringProp name="-505819793">S_STREET</stringProp>
            <stringProp name="-1828944425">S_CITY</stringProp>
            <stringProp name="-968405322">S_COUNTY</stringProp>
            <stringProp name="44205962">S_COUNTRY</stringProp>
            <stringProp name="79571221">S_ZIP</stringProp>
            <stringProp name="687774172">E_MOBILE</stringProp>
            <stringProp name="-278549817">E_HOUSENO</stringProp>
            <stringProp name="864639293">E_STREET</stringProp>
            <stringProp name="2065214757">E_CITY</stringProp>
            <stringProp name="402053764">E_COUNTY</stringProp>
            <stringProp name="-421235332">E_COUNTRY</stringProp>
            <stringProp name="66641927">E_ZIP</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1755701465">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="265374870">mobile_30_updated</stringProp>
              <stringProp name="-84932014">housenum_30_updated</stringProp>
              <stringProp name="1605949077">street_30_updated</stringProp>
              <stringProp name="180280486">town_30_updated</stringProp>
              <stringProp name="197497582">county_30_updated</stringProp>
              <stringProp name="448685346">country_30_updated</stringProp>
              <stringProp name="-1033398837">postcode_30_updated</stringProp>
              <stringProp name="-1720042757">mobile_30_new</stringProp>
              <stringProp name="-1774897481">housenum_30_new</stringProp>
              <stringProp name="-595813254">street_30_new</stringProp>
              <stringProp name="-313371893">town_30_new</stringProp>
              <stringProp name="-629183149">county_30_new</stringProp>
              <stringProp name="243366279">country_30_new</stringProp>
              <stringProp name="1118267056">postcode_30_new</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <collectionProp name="-1452758723">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="265374870">mobile_30_updated</stringProp>
              <stringProp name="-84932014">housenum_30_updated</stringProp>
              <stringProp name="1605949077">street_30_updated</stringProp>
              <stringProp name="180280486">town_30_updated</stringProp>
              <stringProp name="197497582">county_30_updated</stringProp>
              <stringProp name="448685346">country_30_updated</stringProp>
              <stringProp name="-1033398837">postcode_30_updated</stringProp>
              <stringProp name="-1720042757">mobile_30_new</stringProp>
              <stringProp name="-1774897481">housenum_30_new</stringProp>
              <stringProp name="-595813254">street_30_new</stringProp>
              <stringProp name="-313371893">town_30_new</stringProp>
              <stringProp name="-629183149">county_30_new</stringProp>
              <stringProp name="243366279">country_30_new</stringProp>
              <stringProp name="1118267056">postcode_30_new</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <collectionProp name="688479093">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="569692193">new_mobile</stringProp>
              <stringProp name="355876162">new_houseno</stringProp>
              <stringProp name="746557314">new_street</stringProp>
              <stringProp name="1377336785">new_town</stringProp>
              <stringProp name="283971785">new_county</stringProp>
              <stringProp name="213190647">new_country</stringProp>
              <stringProp name="1845551106">new_zip</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <collectionProp name="104481416">
              <stringProp name="387642821">user31_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="624328475">mobile_31</stringProp>
              <stringProp name="2002565335">housenum_31</stringProp>
              <stringProp name="-311724006">street_31</stringProp>
              <stringProp name="-1132650709">town_31</stringProp>
              <stringProp name="1352834419">county_31</stringProp>
              <stringProp name="-1017453657">country_31</stringProp>
              <stringProp name="-187708080">postcode_31</stringProp>
              <stringProp name="-1542079593">mobile_31_updated</stringProp>
              <stringProp name="-1892386477">housenum_31_updated</stringProp>
              <stringProp name="-201505386">street_31_updated</stringProp>
              <stringProp name="-1627173977">town_31_updated</stringProp>
              <stringProp name="-1609956881">county_31_updated</stringProp>
              <stringProp name="-1358769117">country_31_updated</stringProp>
              <stringProp name="1454113996">postcode_31_updated</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1014532182">User with userId=[user31_id1@test.com] is not active</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_CD_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONTACT details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_mobile,s_houseNo,s_street,s_townOrCity,s_county,s_country,s_postcode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user exists" enabled="true">
            <stringProp name="IfController.condition">&quot;${EXTUSER_ID}&quot; != &quot;erased_from_existance&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_mobile" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1644507448">${S_MOBILE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_mobile_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_houseno" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-131005857">${S_HOUSENO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_houseNo_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_street" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1462608393">${S_STREET}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_street_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_townOrCity" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1889247025">${S_CITY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_townOrCity_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1377109392">${S_COUNTY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_county_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-259289526">${S_COUNTRY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_country_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: s_postcode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1722826337">${S_ZIP}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_postcode_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update user CONTACT information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;mobileNumber&quot;:&quot;${E_MOBILE}&quot;, &quot;houseNumberOrName&quot;:&quot;${E_HOUSENO}&quot;, &quot;street&quot;:&quot;${E_STREET}&quot;, &quot;townOrCity&quot;:&quot;${E_CITY}&quot;, &quot;county&quot;:&quot;${E_COUNTY}&quot;, &quot;country&quot;:&quot;${E_COUNTRY}&quot;, &quot;postcode&quot;:&quot;${E_ZIP}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user exists" enabled="true">
            <stringProp name="IfController.condition">&quot;${EXTUSER_ID}&quot; != &quot;erased_from_existance&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONTACT details (new)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT mobileNumber, houseNumberOrName, street, townOrCity, county, country, postcode
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_mobile,e_houseNo,e_street,e_townOrCity,e_county,e_country,e_postcode</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: mobile" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1644507448">${S_MOBILE}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_mobile_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: houseno" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-131005857">${S_HOUSENO}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_houseNo_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: street" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1462608393">${S_STREET}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_street_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: townOrCity" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1889247025">${S_CITY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_townOrCity_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: county" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1377109392">${S_COUNTY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_county_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: country" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-259289526">${S_COUNTRY}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_country_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: postcode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1722826337">${S_ZIP}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_postcode_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_PW_U_S1|3" enabled="false">
        <stringProp name="TestPlan.comments">Updating PASSWORD information for the user registered in ePoints.com

User_1 - S1 - Updating PASSWORD information for user REGISTERED in ePoints.com
User_2 - S3 - Updating PASSWORD information for user REGISTERED in ePoints.com who is ACTIVE but UNVERIFIED
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">65</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-78717318">NEW_PASSWORD</stringProp>
            <stringProp name="1115233983">EMAIL_SENT_TO</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-424944307">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2063824793">UPDATE_USER_PASSWORD</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-1476876628">new_password_${DT_CURRENT_DATE_EPOCH}</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
            </collectionProp>
            <collectionProp name="-198686881">
              <stringProp name="422506888">iatesting1234+user72@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2063824793">UPDATE_USER_PASSWORD</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-1476876628">new_password_${DT_CURRENT_DATE_EPOCH}</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_PW_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT password
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userPassword</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX" enabled="true">
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENT_TO}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update user PASSWORD information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;password&quot;:&quot;${NEW_PASSWORD}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get password" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_password</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;password&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get firstName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_firstName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: password" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1762147892">${NEW_PASSWORD}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_password</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT password, UNIX_TIMESTAMP(passwordChangedAt) *1000, verified
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userPassword, e_userPwdChangedAt, e_userVerified</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: password" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1762147892">${NEW_PASSWORD}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userPassword_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: passwordChangedAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbPasswordChangeAt = Long.parseLong(vars.get(&quot;e_userPwdChangedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbPasswordChangeAt &lt;= dt_current + long_range &amp;&amp; dt_dbPasswordChangeAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbPasswordChangeAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="unverify user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user u, userid uid
SET u.verified=0
WHERE u.id = uid.user_id AND uid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 15s" enabled="true">
            <stringProp name="BeanShellSampler.query">Thread.sleep(15000);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read PASSWORD changed email" enabled="true">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENT_TO}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-908514259">1 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: content" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="944475520">Hi, ${m_firstName}</stringProp>
                <stringProp name="-209747287">A new password has been set up for you</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_PW_U_S2" enabled="false">
        <stringProp name="TestPlan.comments">Updating PASSWORD information for the user registered in ePoints.com

User_1 - S2 - Trying to update PASSWORD for user REGISTERED in ePoints.com but INACTIVE
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-78717318">NEW_PASSWORD</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-702604210">
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1476876628">new_password_${DT_CURRENT_DATE_EPOCH}</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1076932840">User with userId=[user4_id1@test.com] is not active</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_PW_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT password
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userPassword</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update PASSWORD" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;password&quot;:&quot;${NEW_PASSWORD}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT password
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userPassword</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userPassword" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="357128706">${s_userPassword_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userPassword_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_EM_U_S1|9" enabled="false">
        <stringProp name="TestPlan.comments">Updating EMAIL information for the user registered in ePoints.com

User_1 - S1 - Updating EMAIL information for user REGISTERED in ePoints.com
User_1 - S9 - Updating EMAIL information for user REGISTERED in ePoints.com providing same EMAIL address as requested by other user but not confirmed
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-858405891">NEW_EMAIL</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1261176644">OLD_EMAIL</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-29425432">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-631122114">UPDATE_USER_EMAIL</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
            </collectionProp>
            <collectionProp name="-376886118">
              <stringProp name="-1894214041">user40_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-631122114">UPDATE_USER_EMAIL</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="1660">40</stringProp>
              <stringProp name="-408964418">user40@test.com</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="WS-UM_UPD_EM_U_PASS" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-379530906">modules (to be disabled)</stringProp>
            <stringProp name="-166260819">change email procedure (phase 1) PASS</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_EM_U_S7|8|11" enabled="false">
        <stringProp name="TestPlan.comments">Updating EMAIL information for the user registered in ePoints.com

User_1 - S7 - Trying to update EMAIL information for user REGISTERED sending EMPTY EMAIL
User_2 - S8 - Trying to update EMAIL information for user REGISTERED who is INACTIVE
User_3 - S11 - Trying to update EMAIL information for user REGISTERED sending EMAIL existing for active user in the system

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-858405891">NEW_EMAIL</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-443425967">REST_EMAIL</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="519528967">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-2101465546">Error when update user details</stringProp>
              <stringProp name="-267618734">&quot;email&quot;:&quot;&quot;</stringProp>
            </collectionProp>
            <collectionProp name="-1220832399">
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="52">4</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1076932840">User with userId=[user4_id1@test.com] is not active</stringProp>
              <stringProp name="-2032610053">&quot;email&quot;:&quot;${NEW_EMAIL}&quot;</stringProp>
            </collectionProp>
            <collectionProp name="-546177580">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-1821353812">UPDATE_USER_INFO</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="-417780378">EMAIL_ALREADY_EXISTS</stringProp>
              <stringProp name="-114648627">Email is already used by diffrent user</stringProp>
              <stringProp name="-2032610053">&quot;email&quot;:&quot;${NEW_EMAIL}&quot;</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_EM_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active, verified
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userEmail, s_userEmailVerified, s_userActive, s_userVerified</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update user EMAIL information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{${REST_EMAIL}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active, verified
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userEmail, e_userEmailVerified, e_userActive, e_userVerified</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userActive" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2132287145">${e_userActive_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-919419225">${e_userVerified_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-574047299">${s_userEmail_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmail_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1968545237">${s_userEmailVerified_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken count" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(id)
FROM usertoken
WHERE newValue=? AND user_id=? AND tokenType=?</stringProp>
            <stringProp name="queryArguments">${NEW_EMAIL}, ${USER_ID}, ${TOKEN_TYPE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR, VARCHAR, VARCHAR</stringProp>
            <stringProp name="variableNames">e_userTokenCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userTokenCount_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_EM_U_S2|3|4" enabled="false">
        <stringProp name="TestPlan.comments">Updating EMAIL information for the user registered in ePoints.com

WS-UM_UPD_EM_U_S1|9 required

User_1 - S2 - Trying to CONFIRM NEW EMAIL by user REGISTERED in ePoints.com requested by INACTIVE CLIENT				
User_2 - S3 - Trying to CONFIRM NEW EMAIL by user REGISTERED in ePoints.com requested by UNKNOWN CLIENT
User_3 - S4 - Trying to CONFIRM NEW EMAIL by user REGISTERED in ePoints.com requested with INACTIVE TOKEN

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="-858405891">NEW_EMAIL</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-768589612">
              <stringProp name="-1894214041">user40_id1@test.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1660">40</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
            </collectionProp>
            <collectionProp name="1032329066">
              <stringProp name="-1894214041">user40_id1@test.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1660">40</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
            </collectionProp>
            <collectionProp name="-419236480">
              <stringProp name="-1894214041">user40_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1660">40</stringProp>
              <stringProp name="1456878751">INCORRECT_TOKEN</stringProp>
              <stringProp name="-1840555408">Invalid token</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_EM_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userEmail, s_userEmailVerified, s_userActive</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_tokenId, s_tokenActive, s_tokenType, s_tokenValue, s_tokenUserId, s_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenNewValue" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824514103">${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenNewValue_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate token" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE usertoken
SET active=0 
WHERE id=?;</stringProp>
              <stringProp name="queryArguments">${s_tokenId_1}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: confirm NEW EMAIL" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/verify?apiKey=${PARTNER_KEY}&amp;token=${__property(token2)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate token" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE usertoken
SET active=1 
WHERE id=?;</stringProp>
              <stringProp name="queryArguments">${s_tokenId_1}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userEmail, e_userEmailVerified, e_userActive</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-574047299">${s_userEmail_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmail_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_tokenActive, e_tokenType, e_tokenValue, e_tokenUserId, e_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenNewValue" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824514103">${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenNewValue_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_EM_U_S5" enabled="false">
        <stringProp name="TestPlan.comments">Updating EMAIL information for the user registered in ePoints.com

WS-UM_UPD_EM_U_S1|9 required

User_1 - S5 - Updating EMAIL information for user REGISTERED in ePoints.com with already ISSUED CONFIRMATION TOKEN

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-858405891">NEW_EMAIL</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1261176644">OLD_EMAIL</stringProp>
            <stringProp name="609607365">NEW_EMAIL_OLD</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1275118901">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="-631122114">UPDATE_USER_EMAIL</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="WS-UM_UPD_EM_U_PASS" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-379530906">modules (to be disabled)</stringProp>
            <stringProp name="-166260819">change email procedure (phase 1) PASS</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken (old)" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">SELECT id, active, tokenType, tokenValue, user_id, newValue
FROM usertoken
WHERE id=? - 2
ORDER BY id DESC</stringProp>
          <stringProp name="queryArguments">${m_tokenId_1}</stringProp>
          <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
          <stringProp name="variableNames">e_tokenId, e_tokenActive, e_tokenType, e_tokenValue, e_tokenUserId, e_tokenNewValue</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="97196323">false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">e_tokenActive_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">e_tokenType_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1240691163">${USER_ID}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">e_tokenUserId_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenNewValue" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1263876847">${NEW_EMAIL_OLD}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">e_tokenNewValue_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_EM_U_S6" enabled="false">
        <stringProp name="TestPlan.comments">Updating EMAIL information for the user registered in ePoints.com

WS-UM_UPD_EM_U_S1 required
WS-UM_UPD_EM_U_S5 required

User_1 - S6 - Confirming NEW EMAIL by user REGISTERED in ePoints.com with VALID TOKEN

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="-858405891">NEW_EMAIL</stringProp>
            <stringProp name="1261176644">OLD_EMAIL</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="634940920">
              <stringProp name="893201446">user30_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="1250169033">(none)</stringProp>
              <stringProp name="1250169033">(none)</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_EM_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userEmail, s_userEmailVerified, s_userActive</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1187904048">${OLD_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userEmail_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_tokenId, s_tokenActive, s_tokenType, s_tokenValue, s_tokenUserId, s_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenNewValue" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824514103">${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenNewValue_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check userid count = 0" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT count(id)
FROM userid
WHERE userId = ? AND userIdType=&apos;EMAIL&apos;</stringProp>
            <stringProp name="queryArguments">${NEW_EMAIL}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userIdForNewMail</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userIdForNewMail_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: confirm NEW EMAIL" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/verify?apiKey=${PARTNER_KEY}&amp;token=${__property(token1)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userEmail, e_userEmailVerified, e_userActive</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824514103">${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmail_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_tokenActive, e_tokenType, e_tokenValue, e_tokenUserId, e_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenNewValue" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824514103">${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenNewValue_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check userid count = 1" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT count(id)
FROM userid
WHERE userId = ? AND userIdType=&apos;EMAIL&apos;</stringProp>
            <stringProp name="queryArguments">${NEW_EMAIL}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userIdForNewMail</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49">1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userIdForNewMail_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_UPD_EM_U_S10" enabled="false">
        <stringProp name="TestPlan.comments">Updating EMAIL information for the user registered in ePoints.com

WS-UM_UPD_EM_U_S9 required

User_1 - S10 - Trying to CONFIRM NEW EMAIL by user REGISTERED in ePoints.com who requested EMAIL change in S9

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="-858405891">NEW_EMAIL</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-997015708">
              <stringProp name="-1894214041">user40_id1@test.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1660">40</stringProp>
              <stringProp name="-417780378">EMAIL_ALREADY_EXISTS</stringProp>
              <stringProp name="532167042">There is already user with the same email address.</stringProp>
              <stringProp name="411569619">EMAIL_CHANGE</stringProp>
              <stringProp name="594039979">iatesting5678@gmail.com</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_UPD_EM_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userEmail, s_userEmailVerified, s_userActive</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1,1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_tokenId, s_tokenActive, s_tokenType, s_tokenValue, s_tokenUserId, s_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenNewValue" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824514103">${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenNewValue_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: confirm NEW EMAIL" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/verify?apiKey=${PARTNER_KEY}&amp;token=${__property(token2)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT email, emailVerified, active
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userEmail, e_userEmailVerified, e_userActive</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: email" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-574047299">${s_userEmail_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmail_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1,1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_tokenActive, e_tokenType, e_tokenValue, e_tokenUserId, e_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenNewValue" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1824514103">${NEW_EMAIL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenNewValue_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_PWD_RM_U_S1|2" enabled="false">
        <stringProp name="TestPlan.comments">Using Forgotten Password functionality to change password for user registered in ePoints.com

User_1 - S1 - Getting FORGOTTEN PASSWORD page link for the user registered in ePoints.com
User_2 - S2 - Getting FORGOTTEN PASSWORD page link for the user registered in ePoints.com who has already requested PASSWORD CHANGE
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="867258934">EMAIL_SENTTO</stringProp>
            <stringProp name="527113448">RESPONSE_DATA</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="38860324">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1250169033">(none)</stringProp>
              <stringProp name="1250169033">(none)</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1631">32</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
            </collectionProp>
            <collectionProp name="38860324">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1250169033">(none)</stringProp>
              <stringProp name="1250169033">(none)</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1631">32</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_PWD_RM_U_PASS" enabled="true"/>
        <hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get firstName from user" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT firstName
FROM user
WHERE id=?;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userFirstName</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get last ID from usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM usertoken 
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_lastTokenId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: password reminder" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/forgottenPassword?apiKey=${PARTNER_KEY}&amp;email=${__BeanShell(String url = URLEncoder.encode(&quot;${EXTUSER_ID}&quot;\, &quot;UTF-8&quot;); return url;)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response data" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293434580">${RESPONSE_DATA}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check USERTOKEN table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, active, UNIX_TIMESTAMP(createdAt) *1000, tokenType, tokenValue, user_id
FROM usertoken
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">m_tokenId, m_tokenActive, m_tokenCreatedAt, m_tokenType, m_tokenValue, m_tokenUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenActive" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: user_id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check USERTOKEN table COUNT" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(id)
FROM usertoken
WHERE user_id=? AND active=true;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">m_tokenCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId Count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49">1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenCount_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 15s" enabled="false">
            <stringProp name="BeanShellSampler.query">Thread.sleep(15000);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read EMAIL changed email from INBOX" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-908514259">1 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: content" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-723580813">Hi, ${s_userFirstName_1}</stringProp>
                <stringProp name="-1088900375">Follow link</stringProp>
                <stringProp name="-539601653">&lt;a href=&quot;${SERVER_URL}/?p=${m_tokenValue_1}&quot;&gt;${SERVER_URL}/?p=${m_tokenValue_1}&lt;/a&gt;</stringProp>
                <stringProp name="552230908">to reset you password.</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BS: pass token" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(token, ${m_tokenValue_1})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_PWD_RM_U_S3|4|5|6|7|13" enabled="false">
        <stringProp name="TestPlan.comments">Using Forgotten Password functionality to change password for user registered in ePoints.com

User_1 - S3 - Trying to get FORGOTTEN PASSWORD page link for the user registered in ePoints.com requested by INACTIVE client
User_2 - S4 - Trying to get FORGOTTEN PASSWORD page link for the user registered in ePoints.com requested for INACTIVE user
User_3 - S5 - Trying to get FORGOTTEN PASSWORD page link for the user registered in ePoints.com requested for UNKNOWN user
User_4 - S6 - Trying to get FORGOTTEN PASSWORD page link for the user registered in ePoints.com requested by UNKNOWN client
User_5 - S7 - Trying to get FORGOTTEN PASSWORD page link for the user registered in ePoints.com requested with EMPTY email
User_6 - S13 - Trying to get FORGOTTEN PASSWORD page link for the user registered in ePoints.com who is ACTIVE/UNVERIFIED
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">6</stringProp>
        <stringProp name="ThreadGroup.ramp_time">120</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="867258934">EMAIL_SENTTO</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1954040993">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1631">32</stringProp>
            </collectionProp>
            <collectionProp name="1904346980">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="737014437">User with email=[iatesting1234+user32@gmail.com] is not active</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1631">32</stringProp>
            </collectionProp>
            <collectionProp name="-1496747884">
              <stringProp name="668662543">erasedfromexistance@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="1212525502">User with email=[erasedfromexistance@gmail.com] is invalid</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1631">32</stringProp>
            </collectionProp>
            <collectionProp name="-1922930738">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="-1331374494">urased_from_existance</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="-179674257">Partner with accessKey=[urased_from_existance] is invalid</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1631">32</stringProp>
            </collectionProp>
            <collectionProp name="-1826877918">
              <stringProp name="0"></stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="-1984418247">User with email=[] is invalid</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1631">32</stringProp>
            </collectionProp>
            <collectionProp name="777557189">
              <stringProp name="422506888">iatesting1234+user72@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1427684523">USER_IS_NOT_VERIFIED</stringProp>
              <stringProp name="2035267755">User with email=[iatesting1234+user72@gmail.com] is not verified</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1755">72</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_PWD_RM_U_FAIL" enabled="true"/>
        <hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX" enabled="true">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get last ID from usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM usertoken 
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_lastTokenId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user
SET active=0 
WHERE id=?;</stringProp>
              <stringProp name="queryArguments">${USER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: password reminder" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/forgottenPassword?apiKey=${PARTNER_KEY}&amp;email=${__BeanShell(String url = URLEncoder.encode(&quot;${EXTUSER_ID}&quot;\, &quot;UTF-8&quot;); return url;)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user
SET active=1 
WHERE id=?;</stringProp>
              <stringProp name="queryArguments">${USER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get last ID from usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM usertoken 
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_lastTokenId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: token id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="609904880">${s_lastTokenId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_lastTokenId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 15s" enabled="true">
            <stringProp name="BeanShellSampler.query">Thread.sleep(15000);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read EMAIL changed email from INBOX" enabled="true">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2033143340">0 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_PWD_RM_U_S8|9|10" enabled="false">
        <stringProp name="TestPlan.comments">Using Forgotten Password functionality to change password for user registered in ePoints.com

WS-UM_PWD_RM_U_S2 required

User_1 - S8 - Trying to CONFIRM FORGOTTEN PASSWORD TOKEN by user REGISTERED in ePoints.com requested by INACTIVE CLIENT
User_2 - S9 - Trying to CONFIRM FORGOTTEN PASSWORD TOKEN by user REGISTERED in ePoints.com requested by UNKNOWN CLIENT
User_3 - S10 - Trying to CONFIRM FORGOTTEN PASSWORD TOKEN by user REGISTERED in ePoints.com requested with INACTIVE TOKEN
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1409075950">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1631">32</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
            </collectionProp>
            <collectionProp name="497338776">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1631">32</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
            </collectionProp>
            <collectionProp name="1558892738">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1631">32</stringProp>
              <stringProp name="1456878751">INCORRECT_TOKEN</stringProp>
              <stringProp name="-1840555408">Invalid token</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_PWD_RM_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT active, password, emailVerified, verified
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userActive, s_userPassword, s_userEmailVerified, s_userVerified</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_tokenId, s_tokenActive, s_tokenType, s_tokenValue, s_tokenUserId, s_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate token" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE usertoken
SET active=0 
WHERE id=? AND active=true;</stringProp>
              <stringProp name="queryArguments">${s_tokenId_1}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: confirm TOKEN" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/verify?apiKey=${PARTNER_KEY}&amp;token=${__property(token)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 3" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate token" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE usertoken
SET active=1 
WHERE id=? AND active=false;</stringProp>
              <stringProp name="queryArguments">${s_tokenId_1}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_tokenId, e_tokenActive, e_tokenType, e_tokenValue, e_tokenUserId, e_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="379537210">${s_tokenId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_PWD_RM_U_S11" enabled="false">
        <stringProp name="TestPlan.comments">Using Forgotten Password functionality to change password for user registered in ePoints.com

WS-UM_PWD_RM_U_S2 required

User_1 - S11 - Confirming FORGOTTEN PASSWORD TOKEN by user REGISTERED in ePoints.com with VALID TOKEN

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-56501380">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="939585217">TOKEN_VERIFICATION</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1631">32</stringProp>
              <stringProp name="1250169033">(none)</stringProp>
              <stringProp name="1250169033">(none)</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_PWD_RM_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT active, password, emailVerified, verified
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userActive, s_userPassword, s_userEmailVerified, s_userVerified</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_tokenId, s_tokenActive, s_tokenType, s_tokenValue, s_tokenUserId, s_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: confirm TOKEN" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/verify?apiKey=${PARTNER_KEY}&amp;token=${__property(token)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT active, password, emailVerified, verified
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userActive, e_userPassword, e_userEmailVerified, e_userVerified</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1763175991">${s_userActive_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userPassword" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="357128706">${s_userPassword_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userPassword_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1968545237">${s_userEmailVerified_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="847047349">${s_userVerified_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check usertoken" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT active, tokenType, tokenValue, user_id, newValue
FROM usertoken
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_tokenActive, e_tokenType, e_tokenValue, e_tokenUserId, e_tokenNewValue</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tokenType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1354408602">${TOKEN_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tokenUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_PWD_RM_U_S12" enabled="false">
        <stringProp name="TestPlan.comments">Using Forgotten Password functionality to change password for user registered in ePoints.com

WS-UM_PWD_RM_U_S2 required

User_1 - S12 - Updating PASSWORD information for user REGISTERED in ePoints.com

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-78717318">NEW_PASSWORD</stringProp>
            <stringProp name="1115233983">EMAIL_SENT_TO</stringProp>
            <stringProp name="616152544">TOKEN_TYPE</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-464570673">
              <stringProp name="-93823988">iatesting1234+user32@gmail.com</stringProp>
              <stringProp name="2123545227">p30aKey</stringProp>
              <stringProp name="2063824793">UPDATE_USER_PASSWORD</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-1476876628">new_password_${DT_CURRENT_DATE_EPOCH}</stringProp>
              <stringProp name="1871426475">iatesting1234@gmail.com</stringProp>
              <stringProp name="1513488192">FORGOTTEN_PASSWORD</stringProp>
              <stringProp name="1631">32</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_PWD_RM_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT active, password, emailVerified, verified
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_userActive, s_userPassword, s_userEmailVerified, s_userVerified</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_userVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX" enabled="true">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENT_TO}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: update user PASSWORD information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;password&quot;:&quot;${NEW_PASSWORD}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get password" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_password</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;password&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get firstName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_firstName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: password" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1762147892">${NEW_PASSWORD}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_password</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s details (new)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT active, password, emailVerified, verified, UNIX_TIMESTAMP(passwordChangedAt) *1000
FROM user u, userid uid
WHERE u.id = uid.user_id AND uid.userId=?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_userActive, e_userPassword, e_userEmailVerified, e_userVerified, e_userPwdChangedAt</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: active" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1763175991">${s_userActive_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userActive_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: password" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1762147892">${NEW_PASSWORD}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userPassword_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: emailVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1968545237">${s_userEmailVerified_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userEmailVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userVerified" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="847047349">${s_userVerified_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_userVerified_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: passwordChangedAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbPasswordChangeAt = Long.parseLong(vars.get(&quot;e_userPwdChangedAt_1&quot;));
Long dt_current  = Long.parseLong(vars.get(&quot;DT_CURRENT_DATE_EPOCH&quot;));

// range
Long long_range  = 50000;

if (dt_dbPasswordChangeAt &lt;= dt_current + long_range &amp;&amp; dt_dbPasswordChangeAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbPasswordChangeAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check USERTOKEN table COUNT" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(id)
FROM usertoken
WHERE user_id=? AND tokenType=? AND active=true;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${TOKEN_TYPE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">m_tokenCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId Count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_tokenCount_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 15s" enabled="true">
            <stringProp name="BeanShellSampler.query">Thread.sleep(15000);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read PASSWORD changed email" enabled="true">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENT_TO}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-908514259">1 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: content" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="944475520">Hi, ${m_firstName}</stringProp>
                <stringProp name="-209747287">A new password has been set up for you</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_ADD_DA_U_S1|2|3|9" enabled="false">
        <stringProp name="TestPlan.comments">Adding DELIVERY ADDRESS for the user registered in ePoints.com

User_1 - S1 - Adding FIRST DELIVERY ADDRESS for the user registered in ePoints.com
User_2 - S2 - Adding SECOND DELIVERY ADDRESS for the user registered in ePoints.com
User_3 - S3 - Adding THIRD DELIVERY ADDRESS (difference: houseNo) for the user registered in ePoints.com
User_4 - S9 - Adding DELIVERY ADDRESS (partial information filled) for the user registered in ePoints.com
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-515476272">DB_FNAME</stringProp>
            <stringProp name="-509935146">DB_LNAME</stringProp>
            <stringProp name="370829824">DB_HOUSENO</stringProp>
            <stringProp name="1578323684">DB_STREET</stringProp>
            <stringProp name="-2094931828">DB_CITY</stringProp>
            <stringProp name="1115738155">DB_COUNTY</stringProp>
            <stringProp name="228144309">DB_COUNTRY</stringProp>
            <stringProp name="2010653632">DB_ZIP</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-442472538">REST_FNAME</stringProp>
            <stringProp name="-436931412">REST_LNAME</stringProp>
            <stringProp name="1807941462">REST_HOUSENO</stringProp>
            <stringProp name="-453527858">REST_STREET</stringProp>
            <stringProp name="955464438">REST_CITY</stringProp>
            <stringProp name="-916113387">REST_COUNTY</stringProp>
            <stringProp name="1665255947">REST_COUNTRY</stringProp>
            <stringProp name="446485526">REST_ZIP</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1518410157">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-990833327">first_name_80_da_1</stringProp>
              <stringProp name="1780407083">last_name_80_da_1</stringProp>
              <stringProp name="1555102840">houseno_80_da_1</stringProp>
              <stringProp name="-1148093030">street_80_da_1</stringProp>
              <stringProp name="1197399810">city_80_da_1</stringProp>
              <stringProp name="2112407521">county_80_da_1</stringProp>
              <stringProp name="-903331283">country_80_da_1</stringProp>
              <stringProp name="2068580024">zip_80_da_1</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-1253572724">&quot;firstName&quot;:&quot;first_name_80_da_1&quot;,</stringProp>
              <stringProp name="-265819698">&quot;lastName&quot;:&quot;last_name_80_da_1&quot;,</stringProp>
              <stringProp name="482492365">&quot;houseNumberOrName&quot;:&quot;houseno_80_da_1&quot;,</stringProp>
              <stringProp name="-1993247895">&quot;street&quot;:&quot;street_80_da_1&quot;,</stringProp>
              <stringProp name="1562940308">&quot;townOrCity&quot;:&quot;city_80_da_1&quot;,</stringProp>
              <stringProp name="-1069900983">&quot;county&quot;:&quot;county_80_da_1&quot;,</stringProp>
              <stringProp name="2030158049">&quot;country&quot;:&quot;country_80_da_1&quot;,</stringProp>
              <stringProp name="-604311643">&quot;postcode&quot;:&quot;zip_80_da_1&quot;</stringProp>
              <stringProp name="1784">80</stringProp>
            </collectionProp>
            <collectionProp name="-480673740">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-990833326">first_name_80_da_2</stringProp>
              <stringProp name="1780407084">last_name_80_da_2</stringProp>
              <stringProp name="1555102841">houseno_80_da_2</stringProp>
              <stringProp name="-1148093029">street_80_da_2</stringProp>
              <stringProp name="1197399811">city_80_da_2</stringProp>
              <stringProp name="2112407522">county_80_da_2</stringProp>
              <stringProp name="-903331282">country_80_da_2</stringProp>
              <stringProp name="2068580025">zip_80_da_2</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-1253571763">&quot;firstName&quot;:&quot;first_name_80_da_2&quot;,</stringProp>
              <stringProp name="-265818737">&quot;lastName&quot;:&quot;last_name_80_da_2&quot;,</stringProp>
              <stringProp name="482493326">&quot;houseNumberOrName&quot;:&quot;houseno_80_da_2&quot;,</stringProp>
              <stringProp name="-1993246934">&quot;street&quot;:&quot;street_80_da_2&quot;,</stringProp>
              <stringProp name="1562941269">&quot;townOrCity&quot;:&quot;city_80_da_2&quot;,</stringProp>
              <stringProp name="-1069900022">&quot;county&quot;:&quot;county_80_da_2&quot;,</stringProp>
              <stringProp name="2030159010">&quot;country&quot;:&quot;country_80_da_2&quot;,</stringProp>
              <stringProp name="-604311612">&quot;postcode&quot;:&quot;zip_80_da_2&quot;</stringProp>
              <stringProp name="1784">80</stringProp>
            </collectionProp>
            <collectionProp name="1082804204">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-990833326">first_name_80_da_2</stringProp>
              <stringProp name="1780407084">last_name_80_da_2</stringProp>
              <stringProp name="1555102842">houseno_80_da_3</stringProp>
              <stringProp name="-1148093029">street_80_da_2</stringProp>
              <stringProp name="1197399811">city_80_da_2</stringProp>
              <stringProp name="2112407522">county_80_da_2</stringProp>
              <stringProp name="-903331282">country_80_da_2</stringProp>
              <stringProp name="2068580025">zip_80_da_2</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-1253571763">&quot;firstName&quot;:&quot;first_name_80_da_2&quot;,</stringProp>
              <stringProp name="-265818737">&quot;lastName&quot;:&quot;last_name_80_da_2&quot;,</stringProp>
              <stringProp name="482494287">&quot;houseNumberOrName&quot;:&quot;houseno_80_da_3&quot;,</stringProp>
              <stringProp name="-1993246934">&quot;street&quot;:&quot;street_80_da_2&quot;,</stringProp>
              <stringProp name="1562941269">&quot;townOrCity&quot;:&quot;city_80_da_2&quot;,</stringProp>
              <stringProp name="-1069900022">&quot;county&quot;:&quot;county_80_da_2&quot;,</stringProp>
              <stringProp name="2030159010">&quot;country&quot;:&quot;country_80_da_2&quot;,</stringProp>
              <stringProp name="-604311612">&quot;postcode&quot;:&quot;zip_80_da_2&quot;</stringProp>
              <stringProp name="1784">80</stringProp>
            </collectionProp>
            <collectionProp name="1403222450">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-990833325">first_name_80_da_3</stringProp>
              <stringProp name="1780407085">last_name_80_da_3</stringProp>
              <stringProp name="3392903">null</stringProp>
              <stringProp name="3392903">null</stringProp>
              <stringProp name="1197399812">city_80_da_3</stringProp>
              <stringProp name="3392903">null</stringProp>
              <stringProp name="3392903">null</stringProp>
              <stringProp name="2068580026">zip_80_da_3</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-1253570802">&quot;firstName&quot;:&quot;first_name_80_da_3&quot;,</stringProp>
              <stringProp name="-265817776">&quot;lastName&quot;:&quot;last_name_80_da_3&quot;,</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1562942230">&quot;townOrCity&quot;:&quot;city_80_da_3&quot;,</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-604311581">&quot;postcode&quot;:&quot;zip_80_da_3&quot;</stringProp>
              <stringProp name="1784">80</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_ADD_DA_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s DELIVERY address COUNT (old)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(id)
FROM address
WHERE user_id = LOWER(?)
  AND firstName = LOWER(?)
  AND lastName = LOWER(?)
  AND houseNumberOrName = LOWER(?)
  AND street = LOWER(?)
  AND townOrCity = LOWER(?)
  AND county = LOWER(?)
  AND country = LOWER(?)
  AND postcode = LOWER(?);</stringProp>
            <stringProp name="queryArguments">${USER_ID},${DB_FNAME},${DB_LNAME},${DB_HOUSENO},${DB_STREET},${DB_CITY},${DB_COUNTY},${DB_COUNTRY},${DB_ZIP}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_addressCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">s_addressCount_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add DELIVERY address" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{${REST_FNAME}${REST_LNAME}${REST_HOUSENO}${REST_STREET}${REST_CITY}${REST_COUNTY}${REST_COUNTY}${REST_COUNTRY}${REST_ZIP}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/deliveryAddress?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get firstname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_fname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstname&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get lastname" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_lname</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;lastName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get houseNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_houseNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;houseNumberOrName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get street" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_street</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;street&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get townOrCity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_city</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;townOrCity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get county" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_county</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;county&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get country" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_country</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;country&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get postcode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_zip</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;postcode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: firstname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1761959242">${DB_FNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_fname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: lastname" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1590184336">${DB_LNAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_lname</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: houseNo" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-369478330">${DB_HOUSENO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_houseNo</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: street" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="53719600">${DB_STREET}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_street</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: city" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2018471752">${DB_CITY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_city</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1401529911">${DB_COUNTY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_county</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-497761999">${DB_COUNTRY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_country</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: zip" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1174175750">${DB_ZIP}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_zip</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user &lt; 4" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} &lt; 4</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s DELIVERY address COUNT (new)" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT COUNT(id)
FROM address
WHERE user_id = LOWER(?)
  AND firstName = LOWER(?)
  AND lastName = LOWER(?)
  AND houseNumberOrName = LOWER(?)
  AND street = LOWER(?)
  AND townOrCity = LOWER(?)
  AND county = LOWER(?)
  AND country = LOWER(?)
  AND postcode = LOWER(?);</stringProp>
              <stringProp name="queryArguments">${USER_ID},${DB_FNAME},${DB_LNAME},${DB_HOUSENO},${DB_STREET},${DB_CITY},${DB_COUNTY},${DB_COUNTRY},${DB_ZIP}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames">s_addressCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">s_addressCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user == 4" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 4</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s DELIVERY address COUNT (new) for user 4" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT COUNT(id)
FROM address
WHERE user_id = LOWER(?)
  AND firstName = LOWER(?)
  AND lastName = LOWER(?)
  AND townOrCity = LOWER(?)
  AND postcode = LOWER(?);</stringProp>
              <stringProp name="queryArguments">${USER_ID},${DB_FNAME},${DB_LNAME},${DB_CITY},${DB_ZIP}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames">s_addressCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">s_addressCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s DELIVERY address" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT UNIX_TIMESTAMP(createdAt) *1000, COALESCE(updatedAt, 0)
FROM address
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_addressLastCreatedAt, e_addressLastUpdatedAt</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_addressLastCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_addressLastUpdatedAt_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: useridType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_ADD_DA_U_S4|5|6|7|8|10|11|12|13" enabled="false">
        <stringProp name="TestPlan.comments">Adding DELIVERY ADDRESS for the user registered in ePoints.com

User_1 - S4 - (WS-UM_ADD_DA_U_S1 required) Trying to add SAME DELIVERY ADDRESS as one existing in the database for the user registered in ePoints.com
User_2 - S5 - Trying to add DELIVERY ADDRESS for the user registered in ePoints.com authorized by UNKNOWN client
User_3 - S6 - Trying to add DELIVERY ADDRESS for the user registered in ePoints.com authorized by INACTIVE client
User_4 - S7 - Trying to add DELIVERY ADDRESS for the user registered in ePoints.com who is INACTIVE
User_5 - S8 - Trying to add DELIVERY ADDRESS for the user registered in ePoints.com who is ACTIVE but NOT VERIFIED
User_6 - S10 - Trying to add DELIVERY ADDRESS with NO FIELDS for the user registered in ePoints.com 		
User_7 - S11 - Trying to add DELIVERY ADDRESS with MISSING APIKEY for the user registered in ePoints.com
User_8 - S12 - Trying to add DELIVERY ADDRESS with MISSING IDTYPE for the user registered in ePoints.com 
User_9 - S13 - Trying to add DELIVERY ADDRESS for the UNKNOWN user
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">9</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-515476272">DB_FNAME</stringProp>
            <stringProp name="-509935146">DB_LNAME</stringProp>
            <stringProp name="370829824">DB_HOUSENO</stringProp>
            <stringProp name="1578323684">DB_STREET</stringProp>
            <stringProp name="-2094931828">DB_CITY</stringProp>
            <stringProp name="1115738155">DB_COUNTY</stringProp>
            <stringProp name="228144309">DB_COUNTRY</stringProp>
            <stringProp name="2010653632">DB_ZIP</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-442472538">REST_FNAME</stringProp>
            <stringProp name="-436931412">REST_LNAME</stringProp>
            <stringProp name="1807941462">REST_HOUSENO</stringProp>
            <stringProp name="-453527858">REST_STREET</stringProp>
            <stringProp name="955464438">REST_CITY</stringProp>
            <stringProp name="-916113387">REST_COUNTY</stringProp>
            <stringProp name="1665255947">REST_COUNTRY</stringProp>
            <stringProp name="446485526">REST_ZIP</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="-305670784">REST_EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-315941698">REQUEST_EXTUSER_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-120561543">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-990833327">first_name_80_da_1</stringProp>
              <stringProp name="1780407083">last_name_80_da_1</stringProp>
              <stringProp name="1555102840">houseno_80_da_1</stringProp>
              <stringProp name="-1148093030">street_80_da_1</stringProp>
              <stringProp name="1197399810">city_80_da_1</stringProp>
              <stringProp name="2112407521">county_80_da_1</stringProp>
              <stringProp name="-903331283">country_80_da_1</stringProp>
              <stringProp name="2068580024">zip_80_da_1</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1253572724">&quot;firstName&quot;:&quot;first_name_80_da_1&quot;,</stringProp>
              <stringProp name="-265819698">&quot;lastName&quot;:&quot;last_name_80_da_1&quot;,</stringProp>
              <stringProp name="482492365">&quot;houseNumberOrName&quot;:&quot;houseno_80_da_1&quot;,</stringProp>
              <stringProp name="-1993247895">&quot;street&quot;:&quot;street_80_da_1&quot;,</stringProp>
              <stringProp name="1562940308">&quot;townOrCity&quot;:&quot;city_80_da_1&quot;,</stringProp>
              <stringProp name="-1069900983">&quot;county&quot;:&quot;county_80_da_1&quot;,</stringProp>
              <stringProp name="2030158049">&quot;country&quot;:&quot;country_80_da_1&quot;,</stringProp>
              <stringProp name="-604311643">&quot;postcode&quot;:&quot;zip_80_da_1&quot;</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1818852654">DELIVERY_ADDRESS_EXISTS</stringProp>
              <stringProp name="-19419044">Delivery address already exists</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="-14213670">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-651062017">first_name_80_da_10</stringProp>
              <stringProp name="-641955227">last_name_80_da_10</stringProp>
              <stringProp name="963547832">houseno_80_da_10</stringProp>
              <stringProp name="-1231145514">street_80_da_10</stringProp>
              <stringProp name="-1535311506">city_80_da_10</stringProp>
              <stringProp name="1060123759">county_80_da_10</stringProp>
              <stringProp name="2061501347">country_80_da_10</stringProp>
              <stringProp name="-298528648">zip_80_da_10</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-206035592">&quot;firstName&quot;:&quot;first_name_80_da_10&quot;,</stringProp>
              <stringProp name="349537142">&quot;lastName&quot;:&quot;last_name_80_da_10&quot;,</stringProp>
              <stringProp name="2072374615">&quot;houseNumberOrName&quot;:&quot;houseno_80_da_10&quot;,</stringProp>
              <stringProp name="-1661129413">&quot;street&quot;:&quot;street_80_da_10&quot;,</stringProp>
              <stringProp name="1206522480">&quot;townOrCity&quot;:&quot;city_80_da_10&quot;,</stringProp>
              <stringProp name="1192821083">&quot;county&quot;:&quot;county_80_da_10&quot;,</stringProp>
              <stringProp name="-1489596733">&quot;country&quot;:&quot;country_80_da_10&quot;,</stringProp>
              <stringProp name="-1553791281">&quot;postcode&quot;:&quot;zip_80_da_10&quot;</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="1455901764">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-651062017">first_name_80_da_10</stringProp>
              <stringProp name="-641955227">last_name_80_da_10</stringProp>
              <stringProp name="963547832">houseno_80_da_10</stringProp>
              <stringProp name="-1231145514">street_80_da_10</stringProp>
              <stringProp name="-1535311506">city_80_da_10</stringProp>
              <stringProp name="1060123759">county_80_da_10</stringProp>
              <stringProp name="2061501347">country_80_da_10</stringProp>
              <stringProp name="-298528648">zip_80_da_10</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-206035592">&quot;firstName&quot;:&quot;first_name_80_da_10&quot;,</stringProp>
              <stringProp name="349537142">&quot;lastName&quot;:&quot;last_name_80_da_10&quot;,</stringProp>
              <stringProp name="2072374615">&quot;houseNumberOrName&quot;:&quot;houseno_80_da_10&quot;,</stringProp>
              <stringProp name="-1661129413">&quot;street&quot;:&quot;street_80_da_10&quot;,</stringProp>
              <stringProp name="1206522480">&quot;townOrCity&quot;:&quot;city_80_da_10&quot;,</stringProp>
              <stringProp name="1192821083">&quot;county&quot;:&quot;county_80_da_10&quot;,</stringProp>
              <stringProp name="-1489596733">&quot;country&quot;:&quot;country_80_da_10&quot;,</stringProp>
              <stringProp name="-1553791281">&quot;postcode&quot;:&quot;zip_80_da_10&quot;</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="1125936294">
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-651062017">first_name_80_da_10</stringProp>
              <stringProp name="-641955227">last_name_80_da_10</stringProp>
              <stringProp name="963547832">houseno_80_da_10</stringProp>
              <stringProp name="-1231145514">street_80_da_10</stringProp>
              <stringProp name="-1535311506">city_80_da_10</stringProp>
              <stringProp name="1060123759">county_80_da_10</stringProp>
              <stringProp name="2061501347">country_80_da_10</stringProp>
              <stringProp name="-298528648">zip_80_da_10</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-206035592">&quot;firstName&quot;:&quot;first_name_80_da_10&quot;,</stringProp>
              <stringProp name="349537142">&quot;lastName&quot;:&quot;last_name_80_da_10&quot;,</stringProp>
              <stringProp name="2072374615">&quot;houseNumberOrName&quot;:&quot;houseno_80_da_10&quot;,</stringProp>
              <stringProp name="-1661129413">&quot;street&quot;:&quot;street_80_da_10&quot;,</stringProp>
              <stringProp name="1206522480">&quot;townOrCity&quot;:&quot;city_80_da_10&quot;,</stringProp>
              <stringProp name="1192821083">&quot;county&quot;:&quot;county_80_da_10&quot;,</stringProp>
              <stringProp name="-1489596733">&quot;country&quot;:&quot;country_80_da_10&quot;,</stringProp>
              <stringProp name="-1553791281">&quot;postcode&quot;:&quot;zip_80_da_10&quot;</stringProp>
              <stringProp name="52">4</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1076932840">User with userId=[user4_id1@test.com] is not active</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="-1529300342">
              <stringProp name="422506888">iatesting1234+user72@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-651062017">first_name_80_da_10</stringProp>
              <stringProp name="-641955227">last_name_80_da_10</stringProp>
              <stringProp name="963547832">houseno_80_da_10</stringProp>
              <stringProp name="-1231145514">street_80_da_10</stringProp>
              <stringProp name="-1535311506">city_80_da_10</stringProp>
              <stringProp name="1060123759">county_80_da_10</stringProp>
              <stringProp name="2061501347">country_80_da_10</stringProp>
              <stringProp name="-298528648">zip_80_da_10</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-206035592">&quot;firstName&quot;:&quot;first_name_80_da_10&quot;,</stringProp>
              <stringProp name="349537142">&quot;lastName&quot;:&quot;last_name_80_da_10&quot;,</stringProp>
              <stringProp name="2072374615">&quot;houseNumberOrName&quot;:&quot;houseno_80_da_10&quot;,</stringProp>
              <stringProp name="-1661129413">&quot;street&quot;:&quot;street_80_da_10&quot;,</stringProp>
              <stringProp name="1206522480">&quot;townOrCity&quot;:&quot;city_80_da_10&quot;,</stringProp>
              <stringProp name="1192821083">&quot;county&quot;:&quot;county_80_da_10&quot;,</stringProp>
              <stringProp name="-1489596733">&quot;country&quot;:&quot;country_80_da_10&quot;,</stringProp>
              <stringProp name="-1553791281">&quot;postcode&quot;:&quot;zip_80_da_10&quot;</stringProp>
              <stringProp name="1755">72</stringProp>
              <stringProp name="-1427684523">USER_IS_NOT_VERIFIED</stringProp>
              <stringProp name="1939095575">User with userId=[iatesting1234+user72@gmail.com] is not verified</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="962856843">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1393186323">DELIVERY_ADDRESS_HAS_NO_DATA</stringProp>
              <stringProp name="-1907336032">Delivery address to be saved is empty</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="522558930">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="-651062017">first_name_80_da_10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1253572300">&quot;firstName&quot;:&quot;first_name_80_da_10&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="250872824">Required String parameter &apos;apiKey&apos; is not present</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <collectionProp name="479530988">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="-651062017">first_name_80_da_10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1253572300">&quot;firstName&quot;:&quot;first_name_80_da_10&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="-984829688">Required String parameter &apos;idType&apos; is not present</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <collectionProp name="-976846345">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="284416267">SAVE_DELIVERY_ADDRESS</stringProp>
              <stringProp name="-651062017">first_name_80_da_10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="-1253572300">&quot;firstName&quot;:&quot;first_name_80_da_10&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_ADD_DA_U_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get DELIVERY address last id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM address
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_addressLastId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add DELIVERY address" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{${REST_FNAME}${REST_LNAME}${REST_HOUSENO}${REST_STREET}${REST_CITY}${REST_COUNTY}${REST_COUNTY}${REST_COUNTRY}${REST_ZIP}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/deliveryAddress?${REST_EXTUSER_ID_TYPE}${REST_PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check DELIVERY address last id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM address
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_addressLastId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="976025833">${s_addressLastId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_addressLastId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-931331768">${REQUEST_EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: useridType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-UM_GET_DA_U_S1|2" enabled="false">
        <stringProp name="TestPlan.comments">Getting DELIVERY ADDRESS for the user registered in ePoints.com

WS-UM_ADD_DA_U_S1|2|3|9 required

User_1 - S1 - Getting ALL DELIVERY ADDRESSES for the user registered in ePoints.com
User_2 - S2 - Getting FILTERED DELIVERY ADDRESSES for the user registered in ePoints.com (limit 2, offset 1)
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1261862346">SQL_LIMIT</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="545944644">SQL_OFFSET</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-662674153">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1164118130">GET_DELIVERY_ADDRESS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="215169499">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1164118130">GET_DELIVERY_ADDRESS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="1978399146">&amp;limit=2</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-719778419">&amp;offset=1</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-UM_ADD_DA_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get DELIVERY ADDRESS searched/limited" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  COALESCE(firstName, &quot;&quot;) fName,
  COALESCE(lastName, &quot;&quot;) lName,
  COALESCE(houseNumberOrName, &quot;&quot;) houseNo,
  COALESCE(street, &quot;&quot;) street,
  COALESCE(townOrCity, &quot;&quot;) city,
  COALESCE(county, &quot;&quot;) county,
  COALESCE(country, &quot;&quot;) country,
  COALESCE(postcode, &quot;&quot;) zip
FROM address
WHERE user_id = ?
ORDER BY createdAt DESC
LIMIT ?,?;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${SQL_OFFSET},${SQL_LIMIT}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,INTEGER,INTEGER</stringProp>
            <stringProp name="variableNames">s_daFirstName, s_daLastName, s_daHouseNo, s_daStreet, s_daCity, s_daCounty, s_daCountry, s_daPostCode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get DELIVERY ADDRESS searched/limited (count)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(sid)
FROM 
(
SELECT id AS sid
FROM address
WHERE user_id = ?
LIMIT ?,?
) address;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${SQL_OFFSET},${SQL_LIMIT}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,INTEGER, INTEGER</stringProp>
            <stringProp name="variableNames">s_addressLimitedCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get DELIVERY ADDRESS all (count)" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(id)
FROM address
WHERE user_id = ?;
</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_addressAllCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get DELIVERY addresses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${__BeanShell(String url = URLEncoder.encode(&quot;${EXTUSER_ID}&quot;\, &quot;UTF-8&quot;); return url;)}/deliveryAddress?idType=${EXTUSER_ID_TYPE}&amp;apiKey=${PARTNER_KEY}${REST_LIMIT}${REST_OFFSET}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get totalResults" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_totalResults</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalResults&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get searchResultsCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_searchResultsCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;searchResultsCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsCreatedAtArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsCreatedAtArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;createdAt&quot;:(\d+)}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsFNameArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsFNameArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;firstName&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsLNameArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsLNameArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;lastName&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsHouseNoArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsHouseNoArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;houseNumberOrName&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsStreetArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsStreetArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;street&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsCityArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsCityArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;townOrCity&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsCountyArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsCountyArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;county&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsCountryArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsCountryArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;country&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get resultsPostCodeArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_resultsPostCodeArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;postcode&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: totalResults count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2075227540">${s_addressAllCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_totalResults</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: searchResultsCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1317780965">${s_addressLimitedCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_searchResultsCount</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: resultsArray count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1317780965">${s_addressLimitedCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_resultsCreatedAtArray_matchNr</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: firstName" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsCreatedAtArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultFirstName = vars.get(&quot;m_resultsFNameArray_&quot; + i);
	  resultFirstName = resultFirstName.replace(&quot;\&quot;&quot;, &quot;&quot;);
	  
	  String expFirstName = vars.get(&quot;s_daFirstName_&quot; + i);
	  
	  if (resultFirstName.equals(expFirstName))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result firstName (&quot; + resultFirstName + &quot;) different from DBexpected (&quot; + expFirstName + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: lastName" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsCreatedAtArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultLastName = vars.get(&quot;m_resultsLNameArray_&quot; + i);
	  resultLastName = resultLastName.replace(&quot;\&quot;&quot;, &quot;&quot;);	  
	  
	  String expLastName = vars.get(&quot;s_daLastName_&quot; + i);
	  
	  if (resultLastName.equals(expLastName))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result lastName (&quot; + resultLastName + &quot;) different from DBexpected (&quot; + expLastName + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: houseNo" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsCreatedAtArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultHouseNo = vars.get(&quot;m_resultsHouseNoArray_&quot; + i);
	  resultHouseNo = resultHouseNo.replace(&quot;\&quot;&quot;, &quot;&quot;);	  
	  
	  String expHouseNo = vars.get(&quot;s_daHouseNo_&quot; + i);
	  
	  if (resultHouseNo.equals(expHouseNo))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result houseNo (&quot; + resultHouseNo + &quot;) different from DBexpected (&quot; + expHouseNo + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: street" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsCreatedAtArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultStreet = vars.get(&quot;m_resultsStreetArray_&quot; + i);
	  resultStreet = resultStreet.replace(&quot;\&quot;&quot;, &quot;&quot;);	  
	  
	  String expStreet = vars.get(&quot;s_daStreet_&quot; + i);
	  
	  if (resultStreet.equals(expStreet))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result street (&quot; + resultStreet + &quot;) different from DBexpected (&quot; + expStreet + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: city" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsCreatedAtArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultCity = vars.get(&quot;m_resultsCityArray_&quot; + i);
	  resultCity = resultCity.replace(&quot;\&quot;&quot;, &quot;&quot;);	  
	  
	  String expCity= vars.get(&quot;s_daCity_&quot; + i);
	  
	  if (resultCity.equals(expCity))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result city (&quot; + resultCity + &quot;) different from DBexpected (&quot; + expCity + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: county" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsCreatedAtArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultCounty = vars.get(&quot;m_resultsCountyArray_&quot; + i);
	  resultCounty = resultCounty.replace(&quot;\&quot;&quot;, &quot;&quot;);	  
	  
	  String expCounty= vars.get(&quot;s_daCounty_&quot; + i);
	  
	  if (resultCounty.equals(expCounty))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result county (&quot; + resultCounty + &quot;) different from DBexpected (&quot; + expCounty + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: country" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsCreatedAtArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultCountry = vars.get(&quot;m_resultsCountryArray_&quot; + i);
	  resultCountry = resultCountry.replace(&quot;\&quot;&quot;, &quot;&quot;);	  
	  
	  String expCountry= vars.get(&quot;s_daCountry_&quot; + i);
	  
	  if (resultCountry.equals(expCountry))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result country (&quot; + resultCountry + &quot;) different from DBexpected (&quot; + expCountry + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: zip" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	int count = Integer.parseInt(vars.get(&quot;m_resultsCreatedAtArray_matchNr&quot;));
	for(int i=1; i&lt;=count; i++)
	{
	  String resultPostCode = vars.get(&quot;m_resultsPostCodeArray_&quot; + i);
	  resultPostCode = resultPostCode.replace(&quot;\&quot;&quot;, &quot;&quot;);	  
	  
	  String expPostCode= vars.get(&quot;s_daPostCode_&quot; + i);
	  
	  if (resultPostCode.equals(expPostCode))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): result postcode (&quot; + resultPostCode + &quot;) different from DBexpected (&quot; + expPostCode + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT apiAccessKey, message, requestType, success, pointsId, userId, idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: useridType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-TM_GET_DA_U_S3|4|5|6|7|8|9" enabled="false">
        <stringProp name="TestPlan.comments">Getting DELIVERY ADDRESS for the user registered in ePoints.com

User_1 - S3 - Trying to get ALL DELIVERY ADDRESSES for INACTIVE/VERIFIED user registered in ePoints.com
User_2 - S4 - Trying to get ALL DELIVERY ADDRESSES for user registered in ePoints.com who is ACTIVE but UNVERIFIED
User_3 - S5 - Trying to get ALL DELIVERY ADDRESSES for user registered in ePoints.com authorized by UNKNOWN client
User_4 - S6 - Trying to get ALL DELIVERY ADDRESSES for user registered in ePoints.com authorized by INACTIVE client
User_5 - S7 - Trying to GET DELIVERY ADDRESSES with MISSING APIKEY for the user registered in ePoints.com
User_6 - S8 - Trying to GET DELIVERY ADDRESSES with MISSING IDTYPE for the user registered in ePoints.com
User_7 - S9 - Trying to GET ALL DELIVERY ADDRESSES for UNKNOWN user
</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">7</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369649366000</longProp>
        <longProp name="ThreadGroup.end_time">1369649366000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1261862346">SQL_LIMIT</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="545944644">SQL_OFFSET</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="-305670784">REST_EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-315941698">REQUEST_EXTUSER_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1016410945">
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1164118130">GET_DELIVERY_ADDRESS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1076932840">User with userId=[user4_id1@test.com] is not active</stringProp>
              <stringProp name="-924846764">&amp;apiKey=p80aKey</stringProp>
              <stringProp name="1258631316">idType=EMAIL</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="825072384">
              <stringProp name="422506888">iatesting1234+user72@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1164118130">GET_DELIVERY_ADDRESS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1755">72</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1427684523">USER_IS_NOT_VERIFIED</stringProp>
              <stringProp name="1939095575">User with userId=[iatesting1234+user72@gmail.com] is not verified</stringProp>
              <stringProp name="-924846764">&amp;apiKey=p80aKey</stringProp>
              <stringProp name="1258631316">idType=EMAIL</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="1910537484">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1164118130">GET_DELIVERY_ADDRESS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="1674737024">&amp;apiKey=erased_from_existance</stringProp>
              <stringProp name="1258631316">idType=EMAIL</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="501423952">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="1164118130">GET_DELIVERY_ADDRESS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="-586277740">&amp;apiKey=p4aKey</stringProp>
              <stringProp name="1258631316">idType=EMAIL</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="-2103463571">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="250872824">Required String parameter &apos;apiKey&apos; is not present</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1258631316">idType=EMAIL</stringProp>
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <collectionProp name="-1575479016">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="-984829688">Required String parameter &apos;idType&apos; is not present</stringProp>
              <stringProp name="-924846764">&amp;apiKey=p80aKey</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <collectionProp name="-1208559073">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1164118130">GET_DELIVERY_ADDRESS</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
              <stringProp name="-924846764">&amp;apiKey=p80aKey</stringProp>
              <stringProp name="1258631316">idType=EMAIL</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-TM_GET_DA_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get DELIVERY addresses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${__BeanShell(String url = URLEncoder.encode(&quot;${EXTUSER_ID}&quot;\, &quot;UTF-8&quot;); return url;)}/deliveryAddress?${REST_EXTUSER_ID_TYPE}${REST_PARTNER_KEY}${REST_LIMIT}${REST_OFFSET}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-931331768">${REQUEST_EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-OM_ADD_RO_C_S1|2|3|4|5|6|7|8|15|16" enabled="false">
        <stringProp name="TestPlan.comments">Adding REDEMPTION ORDER for user registered in ePoints.com

User_1 - S1 - Adding REDEMPTION ORDER for user registered in ePoints.com for ONE SINGLE product - confirmed points remain after order
User_2 - S2 - Adding REDEMPTION ORDER for user registered in ePoints.com for ONE SINGLE product - NO confirmed points remain after order
User_3 - S3 - Adding REDEMPTION ORDER for user registered in ePoints.com for TWO SINGLE products - NO confirmed points remain after order
User_4 - S4 - Adding REDEMPTION ORDER for user registered in ePoints.com for THREE SINGLE products - NO confirmed points remain after order
User_5 - S5 - Adding REDEMPTION ORDER for user registered in ePoints.com for THREE MULTIPLE products - confirmed points remain after order
User_6 - S6 - Adding REDEMPTION ORDER for user registered in ePoints.com with minimum order information
User_7 - S7 - Adding REDEMPTION ORDER for user registered in ePoints.com with minimum address information
User_8 - S8 - Adding REDEMPTION ORDER for user registered in ePoints.com with minimum product information
User_9 - S15 - Adding REDEMPTION ORDER for user registered in ePoints.com for ONE SINGLE product whith 0 pts costs
User_10 - S16 - Adding REDEMPTION ORDER for user registered in ePoints.com for MULTIPLE products with 0 pts costs one among them

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">20</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1556994791">OCCASION</stringProp>
            <stringProp name="2055429688">RELATIONSHIP</stringProp>
            <stringProp name="-557429565">REST_RELATIONSHIP</stringProp>
            <stringProp name="1672907751">MESSAGE</stringProp>
            <stringProp name="1662349948">REST_MESSAGE</stringProp>
            <stringProp name="-1685422510">DEDUCTION_URI</stringProp>
            <stringProp name="-1079680729">REST_DEDUCTION_URI</stringProp>
            <stringProp name="2388619">NAME</stringProp>
            <stringProp name="955784214">REST_NAME</stringProp>
            <stringProp name="-436088099">ADDRESS1</stringProp>
            <stringProp name="-763379992">REST_ADDRESS1</stringProp>
            <stringProp name="-436088098">ADDRESS2</stringProp>
            <stringProp name="-763379991">REST_ADDRESS2</stringProp>
            <stringProp name="2068843">CITY</stringProp>
            <stringProp name="955464438">REST_CITY</stringProp>
            <stringProp name="1993721162">COUNTY</stringProp>
            <stringProp name="-916113387">REST_COUNTY</stringProp>
            <stringProp name="1675813750">COUNTRY</stringProp>
            <stringProp name="1665255947">REST_COUNTRY</stringProp>
            <stringProp name="88833">ZIP</stringProp>
            <stringProp name="446485526">REST_ZIP</stringProp>
            <stringProp name="76105038">PHONE</stringProp>
            <stringProp name="-433402589">REST_PHONE</stringProp>
            <stringProp name="2187568">GIFT</stringProp>
            <stringProp name="955583163">REST_GIFT</stringProp>
            <stringProp name="-935840855">P1_PRODUCT_ID</stringProp>
            <stringProp name="-330099074">REST_P1_PRODUCT_ID</stringProp>
            <stringProp name="6222701">P1_IMAGE_URL</stringProp>
            <stringProp name="1688330744">REST_P1_IMAGE_URL</stringProp>
            <stringProp name="1028516442">P1_TITLE</stringProp>
            <stringProp name="701224549">REST_P1_TITLE</stringProp>
            <stringProp name="1709937921">P1_POINTS</stringProp>
            <stringProp name="153823830">REST_P1_POINTS</stringProp>
            <stringProp name="821692713">P1_QUANTITY</stringProp>
            <stringProp name="44670270">REST_P1_QUANTITY</stringProp>
            <stringProp name="1601400422">P1_MERCHANT</stringProp>
            <stringProp name="824377979">REST_P1_MERCHANT</stringProp>
            <stringProp name="-548426419">REST_PRODUCT1</stringProp>
            <stringProp name="-548426418">REST_PRODUCT2</stringProp>
            <stringProp name="-548426417">REST_PRODUCT3</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-806758136">P2_PRODUCT_ID</stringProp>
            <stringProp name="-201016355">REST_P2_PRODUCT_ID</stringProp>
            <stringProp name="-1790728658">P2_IMAGE_URL</stringProp>
            <stringProp name="-108620615">REST_P2_IMAGE_URL</stringProp>
            <stringProp name="1916020123">P2_TITLE</stringProp>
            <stringProp name="1588728230">REST_P2_TITLE</stringProp>
            <stringProp name="-842219040">P2_POINTS</stringProp>
            <stringProp name="1896634165">REST_P2_POINTS</stringProp>
            <stringProp name="625179208">P2_QUANTITY</stringProp>
            <stringProp name="-151843235">REST_P2_QUANTITY</stringProp>
            <stringProp name="1404886917">P2_MERCHANT</stringProp>
            <stringProp name="627864474">REST_P2_MERCHANT</stringProp>
            <stringProp name="-677675417">P3_PRODUCT_ID</stringProp>
            <stringProp name="-71933636">REST_P3_PRODUCT_ID</stringProp>
            <stringProp name="707287279">P3_IMAGE_URL</stringProp>
            <stringProp name="-1905571974">REST_P3_IMAGE_URL</stringProp>
            <stringProp name="-1491443492">P3_TITLE</stringProp>
            <stringProp name="-1818735385">REST_P3_TITLE</stringProp>
            <stringProp name="900591295">P3_POINTS</stringProp>
            <stringProp name="-655522796">REST_P3_POINTS</stringProp>
            <stringProp name="428665703">P3_QUANTITY</stringProp>
            <stringProp name="-348356740">REST_P3_QUANTITY</stringProp>
            <stringProp name="1208373412">P3_MERCHANT</stringProp>
            <stringProp name="431350969">REST_P3_MERCHANT</stringProp>
            <stringProp name="-305670784">REST_EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="1229702898">REST_OCCASION</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1797267177">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="79928780">going live S1</stringProp>
              <stringProp name="-1174707905">tester S1</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="248645964">all the best S1</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-5701094">http://epoint.com/deduction/uri_S1</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103766">FName LName S1</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920304">address 1st line S1</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="-1362963194">address 2nd line S1</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="870814270">city name S1</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="1785821981">county name S1</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="-1229916823">country name S1</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857809">post code S1</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="1962731075">phone number S1</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1559293446">product1_id S1</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1566783984">product1_image_url S1</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1187076221">product1_title S1</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="-806692359">product1_merchant_name S1</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
            </collectionProp>
            <collectionProp name="-1594826159">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="79928781">going live S2</stringProp>
              <stringProp name="-1174707904">tester S2</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="248645965">all the best S2</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-5701093">http://epoint.com/deduction/uri_S2</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103767">FName LName S2</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920305">address 1st line S2</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="-1362963193">address 2nd line S2</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="870814271">city name S2</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="1785821982">county name S2</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="-1229916822">country name S2</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857810">post code S2</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="1962731076">phone number S2</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="97196323">false</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1559293447">product1_id S2</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1566783985">product1_image_url S2</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1187076220">product1_title S2</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="-806692358">product1_merchant_name S2</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
            </collectionProp>
            <collectionProp name="802528916">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="79928782">going live S3</stringProp>
              <stringProp name="-1174707903">tester S3</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="248645966">all the best S3</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-5701092">http://epoint.com/deduction/uri_S3</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103768">FName LName S3</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920306">address 1st line S3</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="-1362963192">address 2nd line S3</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="870814272">city name S3</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="1785821983">county name S3</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="-1229916821">country name S3</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857811">post code S3</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="1962731077">phone number S3</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1559293448">product1_id S3</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1566783986">product1_image_url S3</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1187076219">product1_title S3</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="-806692357">product1_merchant_name S3</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1578844982">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}},</stringProp>
              <stringProp name="-894481312">{${REST_P2_PRODUCT_ID}${REST_P2_IMAGE_URL}${REST_P2_TITLE}${REST_P2_POINTS}${REST_P2_QUANTITY}${REST_P2_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="-1848170167">product2_id S3</stringProp>
              <stringProp name="508291864">&quot;productId&quot;:&quot;${P2_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1061225361">product2_image_url S3</stringProp>
              <stringProp name="262717070">&quot;imageUrl&quot;:&quot;${P2_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1383589724">product2_title S3</stringProp>
              <stringProp name="367982017">&quot;title&quot;:&quot;${P2_TITLE}&quot;,</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="-24555111">&quot;numPoints&quot;:${P2_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1548981691">&quot;quantity&quot;:${P2_QUANTITY},</stringProp>
              <stringProp name="-1803764710">product2_merchant_name S3</stringProp>
              <stringProp name="-526527394">&quot;merchantName&quot;:&quot;${P2_MERCHANT}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
            </collectionProp>
            <collectionProp name="-1170859495">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="79928783">going live S4</stringProp>
              <stringProp name="-1174707902">tester S4</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="248645967">all the best S4</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-5701091">http://epoint.com/deduction/uri_S4</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103769">FName LName S4</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920307">address 1st line S4</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="-1362963191">address 2nd line S4</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="870814273">city name S4</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="1785821984">county name S4</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="-1229916820">country name S4</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857812">post code S4</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="1962731078">phone number S4</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1559293449">product1_id S4</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1566783987">product1_image_url S4</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1187076218">product1_title S4</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="-806692356">product1_merchant_name S4</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1578844982">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}},</stringProp>
              <stringProp name="-1959116852">{${REST_P2_PRODUCT_ID}${REST_P2_IMAGE_URL}${REST_P2_TITLE}${REST_P2_POINTS}${REST_P2_QUANTITY}${REST_P2_MERCHANT}},</stringProp>
              <stringProp name="-352558818">{${REST_P3_PRODUCT_ID}${REST_P3_IMAGE_URL}${REST_P3_TITLE}${REST_P3_POINTS}${REST_P3_QUANTITY}${REST_P3_MERCHANT}}</stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="1572">15</stringProp>
              <stringProp name="-1848170166">product2_id S4</stringProp>
              <stringProp name="508291864">&quot;productId&quot;:&quot;${P2_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1061225362">product2_image_url S4</stringProp>
              <stringProp name="262717070">&quot;imageUrl&quot;:&quot;${P2_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1383589723">product2_title S4</stringProp>
              <stringProp name="367982017">&quot;title&quot;:&quot;${P2_TITLE}&quot;,</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="-24555111">&quot;numPoints&quot;:${P2_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1548981691">&quot;quantity&quot;:${P2_QUANTITY},</stringProp>
              <stringProp name="-1803764709">product2_merchant_name S4</stringProp>
              <stringProp name="-526527394">&quot;merchantName&quot;:&quot;${P2_MERCHANT}&quot;</stringProp>
              <stringProp name="-960666485">product3_id S4</stringProp>
              <stringProp name="2015843673">&quot;productId&quot;:&quot;${P3_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="555666737">product3_image_url S4</stringProp>
              <stringProp name="-242841555">&quot;imageUrl&quot;:&quot;${P3_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1580103228">product3_title S4</stringProp>
              <stringProp name="171468512">&quot;title&quot;:&quot;${P3_TITLE}&quot;,</stringProp>
              <stringProp name="56">8</stringProp>
              <stringProp name="-221068616">&quot;numPoints&quot;:${P3_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1678064410">&quot;quantity&quot;:${P3_QUANTITY},</stringProp>
              <stringProp name="1494130234">product3_merchant_name S4</stringProp>
              <stringProp name="-397444675">&quot;merchantName&quot;:&quot;${P3_MERCHANT}&quot;</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
            </collectionProp>
            <collectionProp name="1700540232">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="79928784">going live S5</stringProp>
              <stringProp name="-1174707901">tester S5</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="248645968">all the best S5</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-5701090">http://epoint.com/deduction/uri_S5</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103770">FName LName S5</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920308">address 1st line S5</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="-1362963190">address 2nd line S5</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="870814274">city name S5</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="1785821985">county name S5</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="-1229916819">country name S5</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857813">post code S5</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="1962731079">phone number S5</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1559293450">product1_id S5</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1566783988">product1_image_url S5</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1187076217">product1_title S5</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="51">3</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="51">3</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="-806692355">product1_merchant_name S5</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1578844982">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}},</stringProp>
              <stringProp name="-1959116852">{${REST_P2_PRODUCT_ID}${REST_P2_IMAGE_URL}${REST_P2_TITLE}${REST_P2_POINTS}${REST_P2_QUANTITY}${REST_P2_MERCHANT}},</stringProp>
              <stringProp name="-352558818">{${REST_P3_PRODUCT_ID}${REST_P3_IMAGE_URL}${REST_P3_TITLE}${REST_P3_POINTS}${REST_P3_QUANTITY}${REST_P3_MERCHANT}}</stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="1820">95</stringProp>
              <stringProp name="-1848170165">product2_id S5</stringProp>
              <stringProp name="508291864">&quot;productId&quot;:&quot;${P2_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1061225363">product2_image_url S5</stringProp>
              <stringProp name="262717070">&quot;imageUrl&quot;:&quot;${P2_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1383589722">product2_title S5</stringProp>
              <stringProp name="367982017">&quot;title&quot;:&quot;${P2_TITLE}&quot;,</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="-24555111">&quot;numPoints&quot;:${P2_POINTS},</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="1548981691">&quot;quantity&quot;:${P2_QUANTITY},</stringProp>
              <stringProp name="-1803764708">product2_merchant_name S5</stringProp>
              <stringProp name="-526527394">&quot;merchantName&quot;:&quot;${P2_MERCHANT}&quot;</stringProp>
              <stringProp name="-960666484">product3_id S5</stringProp>
              <stringProp name="2015843673">&quot;productId&quot;:&quot;${P3_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="555666738">product3_image_url S5</stringProp>
              <stringProp name="-242841555">&quot;imageUrl&quot;:&quot;${P3_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1580103227">product3_title S5</stringProp>
              <stringProp name="171468512">&quot;title&quot;:&quot;${P3_TITLE}&quot;,</stringProp>
              <stringProp name="56">8</stringProp>
              <stringProp name="-221068616">&quot;numPoints&quot;:${P3_POINTS},</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1678064410">&quot;quantity&quot;:${P3_QUANTITY},</stringProp>
              <stringProp name="1494130235">product3_merchant_name S5</stringProp>
              <stringProp name="-397444675">&quot;merchantName&quot;:&quot;${P3_MERCHANT}&quot;</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
            </collectionProp>
            <collectionProp name="397079736">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-5701089">http://epoint.com/deduction/uri_S6</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103771">FName LName S6</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920309">address 1st line S6</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="-1362963189">address 2nd line S6</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="870814275">city name S6</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="1785821986">county name S6</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="-1229916818">country name S6</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857814">post code S6</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="1962731080">phone number S6</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1559293451">product1_id S6</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1566783989">product1_image_url S6</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1187076216">product1_title S6</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="51">3</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="-806692354">product1_merchant_name S6</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-1324010866">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-5701088">http://epoint.com/deduction/uri_S7</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103772">FName LName S7</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920310">address 1st line S7</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1229916817">country name S7</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857815">post code S7</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1559293452">product1_id S7</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1566783990">product1_image_url S7</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1187076215">product1_title S7</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="-806692353">product1_merchant_name S7</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="52">4</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="803842413">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-5701087">http://epoint.com/deduction/uri_S8</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103773">FName LName S8</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920311">address 1st line S8</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1229916816">country name S8</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857816">post code S8</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1559293453">product1_id S8</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1187076214">product1_title S8</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="877087184">&quot;quantity&quot;:${P1_QUANTITY}</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="462102872">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1817175063">going live S15</stringProp>
              <stringProp name="-2056206634">tester S15</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909655">all the best S15</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733861">http://epoint.com/deduction/uri_S15</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488865">FName LName S15</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660293">address 1st line S15</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697813999">address 2nd line S15</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438647">city name S15</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093384">county name S15</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284204">country name S15</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342460">post code S15</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121234">phone number S15</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456623">product1_id S15</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663301">product1_image_url S15</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342866">product1_title S15</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340700">product1_merchant_name S15</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
            </collectionProp>
            <collectionProp name="68566644">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1817175062">going live S16</stringProp>
              <stringProp name="-2056206633">tester S16</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909654">all the best S16</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733860">http://epoint.com/deduction/uri_S16</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488864">FName LName S16</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660294">address 1st line S16</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697814000">address 2nd line S16</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438648">city name S16</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093383">county name S16</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284205">country name S16</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342459">post code S16</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121234">phone number S15</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="97196323">false</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456624">product1_id S16</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663302">product1_image_url S16</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342867">product1_title S16</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340701">product1_merchant_name S16</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1578844982">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}},</stringProp>
              <stringProp name="-894481312">{${REST_P2_PRODUCT_ID}${REST_P2_IMAGE_URL}${REST_P2_TITLE}${REST_P2_POINTS}${REST_P2_QUANTITY}${REST_P2_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="51">3</stringProp>
              <stringProp name="-1458700337">product2_id S16</stringProp>
              <stringProp name="508291864">&quot;productId&quot;:&quot;${P2_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="-1461752185">product2_image_url S16</stringProp>
              <stringProp name="262717070">&quot;imageUrl&quot;:&quot;${P2_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="58391508">product2_title S16</stringProp>
              <stringProp name="367982017">&quot;title&quot;:&quot;${P2_TITLE}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-24555111">&quot;numPoints&quot;:${P2_POINTS},</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="1548981691">&quot;quantity&quot;:${P2_QUANTITY},</stringProp>
              <stringProp name="-82131170">product2_merchant_name S16</stringProp>
              <stringProp name="-526527394">&quot;merchantName&quot;:&quot;${P2_MERCHANT}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 5s" enabled="true">
          <stringProp name="BeanShellSampler.query">Thread.sleep(5000);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup" enabled="true"/>
        <hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX - user" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO_1}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX - team" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO_2}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user != 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} != 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;on_behalf_of_p80&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:${POINTS},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;http://source.uri&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_T80_1_u80_no_1&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_T80_1&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-OM_ADD_RO_C_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONFIRMED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;CONFIRMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PENDING points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;PENDING&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsPending</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s DECLINED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;DECLINED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsDeclined</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s SPENT points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;SPENT&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s REDEEMED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;REDEEMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsRedeemed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add REDEMPTION ORDER" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{${REST_OCCASION}${REST_RELATIONSHIP}${REST_MESSAGE}${REST_DEDUCTION_URI}${REST_NAME}${REST_ADDRESS1}${REST_ADDRESS2}${REST_CITY}${REST_COUNTY}${REST_COUNTRY}${REST_ZIP}${REST_PHONE}${REST_GIFT}&quot;products&quot;:[${REST_PRODUCT1}${REST_PRODUCT2}${REST_PRODUCT3}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/redemptionOrder/user/${__BeanShell(String url = URLEncoder.encode(&quot;${EXTUSER_ID}&quot;\, &quot;UTF-8&quot;); return url;)}/?${REST_PARTNER_KEY}${REST_EXTUSER_ID_TYPE}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get order number" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_orderNum</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BS: pass order id" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">${__setProperty(orderID_${__threadNum}, ${m_orderNum})};</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check redemptionorder table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id,
  UNIX_TIMESTAMP(createdAt) *1000,
  COALESCE(updatedAt, 0) updatedAt,
  COALESCE(partnerId, 0) partnerId,
  COALESCE(userId, 0) userId,
  COALESCE(isGift, 0) isGift,
  COALESCE(occasion, 0) occasion,
  COALESCE(relationship, 0) relationship,
  COALESCE(message, 0) message,
  COALESCE(deductionURI, 0) deductionURI,
  COALESCE(name, 0) name,
  COALESCE(address1, 0) address1,
  COALESCE(address2, 0) address2,
  COALESCE(city, 0) city,
  COALESCE(county, 0) county,
  COALESCE(country, 0) country,
  COALESCE(phone, 0) phone,
  COALESCE(postcode, 0) postcode
FROM redemptionorder
WHERE id = ?</stringProp>
            <stringProp name="queryArguments">${m_orderNum}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_orderId, e_orderCreatedAt, e_orderUpdatedAt, e_orderPartnerId, e_orderUserId, e_orderIsGift, e_orderOccasion, e_orderRealationship, e_orderMessage, e_orderDeductionUri, e_orderName, e_orderAddress1, e_orderAddress2, e_orderCity, e_orderCounty, e_orderCountry, e_orderPhone, e_orderPostCode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_orderCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderUpdatedAt_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderPartnerId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1240691163">${USER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: isGift" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1427237634">${__javaScript(var x = 0; if(${GIFT} == 0) {x = 0} else if(${GIFT} == true) {x = 1} else if(${GIFT} == false) {x = 0}; x;)}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderIsGift_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: occasion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1939865729">${OCCASION}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderOccasion_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: relationship" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-28100146">${RELATIONSHIP}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderRealationship_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1437585587">${MESSAGE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderMessage_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: deductionUri" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1162572542">${DEDUCTION_URI}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderDeductionUri_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1185827035">${NAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderName_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: address1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="699074121">${ADDRESS1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderAddress1_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: address2" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="699074152">${ADDRESS2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderAddress2_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: city" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1175913979">${CITY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderCity_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="649269180">${COUNTY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderCounty_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1347499618">${COUNTRY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderCountry_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: phone" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1830278010">${PHONE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderPhone_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: zip" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1146996467">${ZIP}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderPostCode_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="check product table" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check product table COUNT" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  SUM(quantity)
FROM product
WHERE orderId = ?</stringProp>
              <stringProp name="queryArguments">${m_orderNum}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_orderProductCount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: product count" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1065952044">${__javaScript(String(parseInt(${P1_QUANTITY})+parseInt(${P2_QUANTITY})+parseInt(${P3_QUANTITY})).concat(&quot;.0&quot;))}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">e_orderProductCount_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check product table" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  id,
  UNIX_TIMESTAMP(createdAt) *1000,
  COALESCE(UNIX_TIMESTAMP(updatedAt) *1000, 0) updatedAt,
  productId,
  COALESCE(imageUrl, 0) imageUrl,
  title,
  COALESCE(merchantName, 0) merchantName,
  numPoints,
  quantity
FROM product
WHERE orderId = ?</stringProp>
              <stringProp name="queryArguments">${m_orderNum}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_productId, e_productCreatedAt, e_productUpdatedAt, e_productProductId, e_productImageUrl, e_productTitle, e_productMerchant, e_productNumPoints, e_productQuantity</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">// range
Long long_range  = 5000;
Long dt_current  = new Date().getTime();

int count = Integer.parseInt(vars.get(&quot;e_productId_#&quot;));

	for(int i=1; i&lt;=count; i++)
	{
	  Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_productCreatedAt_&quot; + i));

	  if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;product createdAt difference (&quot; + i + &quot;): &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: updatedAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">// range
Long long_range  = 5000;
Long dt_current  = new Date().getTime();

int count = Integer.parseInt(vars.get(&quot;e_productId_#&quot;));

	for(int i=1; i&lt;=count; i++)
	{
	  Long dt_dbUpdatedAt = Long.parseLong(vars.get(&quot;e_productUpdatedAt_&quot; + i));

	  if (dt_dbUpdatedAt == 0)
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;product updatedAt (&quot; + i + &quot;): not null&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productId" enabled="true">
                <stringProp name="BeanShellAssertion.query">int count = Integer.parseInt(vars.get(&quot;e_productId_#&quot;));

	for(int i=1; i&lt;=count; i++)
	{
	  String dbProductId = vars.get(&quot;e_productProductId_&quot; + i);
	  String expProductId = vars.get(&quot;P&quot; + i + &quot;_PRODUCT_ID&quot;);

	  if (dbProductId.equals(expProductId))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;product productId (&quot; + i + &quot;): DB: &quot; + dbProductId + &quot;, expected: &quot; + expProductId;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: imageUrl" enabled="true">
                <stringProp name="BeanShellAssertion.query">int count = Integer.parseInt(vars.get(&quot;e_productId_#&quot;));

	for(int i=1; i&lt;=count; i++)
	{
	  String dbImageUrl = vars.get(&quot;e_productImageUrl_&quot; + i);
	  String expImageUrl = vars.get(&quot;P&quot; + i + &quot;_IMAGE_URL&quot;);

	  if (dbImageUrl.equals(expImageUrl))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;product imageUrl (&quot; + i + &quot;): DB: &quot; + dbImageUrl + &quot;, expected: &quot; + expImageUrl;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: title" enabled="true">
                <stringProp name="BeanShellAssertion.query">int count = Integer.parseInt(vars.get(&quot;e_productId_#&quot;));

	for(int i=1; i&lt;=count; i++)
	{
	  String dbTitle = vars.get(&quot;e_productTitle_&quot; + i);
	  String expTitle = vars.get(&quot;P&quot; + i + &quot;_TITLE&quot;);

	  if (dbTitle.equals(expTitle))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;product title (&quot; + i + &quot;): DB: &quot; + dbTitle + &quot;, expected: &quot; + expTitle;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: merchant" enabled="true">
                <stringProp name="BeanShellAssertion.query">int count = Integer.parseInt(vars.get(&quot;e_productId_#&quot;));

	for(int i=1; i&lt;=count; i++)
	{
	  String dbMerchant = vars.get(&quot;e_productMerchant_&quot; + i);
	  String expMerchant = vars.get(&quot;P&quot; + i + &quot;_MERCHANT&quot;);

	  if (dbMerchant.equals(expMerchant))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;product merchant (&quot; + i + &quot;): DB: &quot; + dbMerchant + &quot;, expected: &quot; + expMerchant;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: points" enabled="true">
                <stringProp name="BeanShellAssertion.query">int count = Integer.parseInt(vars.get(&quot;e_productId_#&quot;));

	for(int i=1; i&lt;=count; i++)
	{
	  String dbPoints = vars.get(&quot;e_productNumPoints_&quot; + i);
	  String expPoints = vars.get(&quot;P&quot; + i + &quot;_POINTS&quot;);

	  if (dbPoints.equals(expPoints))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;product points (&quot; + i + &quot;): DB: &quot; + dbPoints + &quot;, expected: &quot; + expPoints;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: quantity" enabled="true">
                <stringProp name="BeanShellAssertion.query">int count = Integer.parseInt(vars.get(&quot;e_productId_#&quot;));

	for(int i=1; i&lt;=count; i++)
	{
	  String dbQuantity = vars.get(&quot;e_productQuantity_&quot; + i);
	  String expQuantity = vars.get(&quot;P&quot; + i + &quot;_QUANTITY&quot;);

	  if (dbQuantity.equals(expQuantity))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;product quantity (&quot; + i + &quot;): DB: &quot; + dbQuantity + &quot;, expected: &quot; + expQuantity;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach product check points table record" enabled="true">
            <stringProp name="ForeachController.inputVal">e_productId</stringProp>
            <stringProp name="ForeachController.returnVal">prodId</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">COUNTER</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check points table productId=${prodId}" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(createdAt) *1000,
  UNIX_TIMESTAMP(updatedAt) *1000,
  activityInfo,
  delta,
  partnerId,
  userId,
  sourceURI
FROM points
WHERE status = &apos;REDEEMED&apos; AND productId = ?</stringProp>
              <stringProp name="queryArguments">${prodId}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames">e_pointsCreatedAt, e_pointsUpdatedAt, e_pointsActivityInfo, e_pointsDelta, e_pointsPartnerId, e_pointsUserId, e_pointsSourceUri</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">// range
Long long_range  = 5000;
Long dt_current  = new Date().getTime();

	  Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_pointsCreatedAt_1&quot;));

	  if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;points createdAt difference (&quot; + i + &quot;): &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: updatedAt" enabled="true">
                <stringProp name="BeanShellAssertion.query">// range
Long long_range  = 5000;
Long dt_current  = new Date().getTime();

	  Long dt_dbUpdatedAt = Long.parseLong(vars.get(&quot;e_productUpdatedAt_1&quot;));

	  if (dt_dbUpdatedAt == 0)
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;points updatedAt (&quot; + i + &quot;): not null&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: activityInfo" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  String dbRecord = vars.get(&quot;e_pointsActivityInfo_1&quot;);
	  String expRecord = vars.get(&quot;P&quot; + counter + &quot;_QUANTITY&quot;) + &quot;x &quot; + vars.get(&quot;P&quot; + counter + &quot;_TITLE&quot;);

	  if (dbRecord.equals(expRecord))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;points ActivityInfo (&quot; + counter + &quot;): DB: &quot; + dbRecord + &quot;, expected: &quot; + expRecord;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: delta" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  Integer dbRecord = Integer.parseInt(vars.get(&quot;e_pointsDelta_1&quot;));
	  Integer expRecord = Integer.parseInt(vars.get(&quot;P&quot; + counter + &quot;_POINTS&quot;)) * Integer.parseInt(vars.get(&quot;P&quot; + counter + &quot;_QUANTITY&quot;));

	  if (dbRecord.equals(expRecord))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;points delta (&quot; + counter + &quot;): DB: &quot; + dbRecord + &quot;, expected: &quot; + expRecord;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partnerId" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  String dbRecord = vars.get(&quot;e_pointsPartnerId_1&quot;);
	  String expRecord = vars.get(&quot;USER_ID&quot;);

	  if (dbRecord.equals(expRecord))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;points partnerId (&quot; + counter + &quot;): DB: &quot; + dbRecord + &quot;, expected: &quot; + expRecord;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: userId" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  String dbRecord = vars.get(&quot;e_pointsUserId_1&quot;);
	  String expRecord = vars.get(&quot;USER_ID&quot;);

	  if (dbRecord.equals(expRecord))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;points userId (&quot; + counter + &quot;): DB: &quot; + dbRecord + &quot;, expected: &quot; + expRecord;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: sourceUri" enabled="true">
                <stringProp name="BeanShellAssertion.query">
	  String counter = vars.get(&quot;COUNTER&quot;);
	  String dbRecord = vars.get(&quot;e_pointsSourceUri_1&quot;);
	  String expRecord = vars.get(&quot;DEDUCTION_URI&quot;);

	  if (dbRecord.equals(expRecord))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;points sourceUri (&quot; + counter + &quot;): DB: &quot; + dbRecord + &quot;, expected: &quot; + expRecord;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s CONFIRMED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? and pointsMap_KEY=&apos;CONFIRMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="847106640">${__javaScript(${s_pointsConfirmed_1}-(${P1_POINTS}*${P1_QUANTITY})-(${P2_POINTS}*${P2_QUANTITY})-(${P3_POINTS}*${P3_QUANTITY}))}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s PENDING points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;PENDING&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsPending</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending points" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s DECLINED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;DECLINED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsDeclined</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined points" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s SPENT points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;SPENT&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent points" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s REDEEMED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? and pointsMap_KEY=&apos;REDEEMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsRedeemed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-410513434">${__javaScript(${s_pointsRedeemed_1}+(${P1_POINTS}*${P1_QUANTITY})+(${P2_POINTS}*${P2_QUANTITY})+(${P3_POINTS}*${P3_QUANTITY}))}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT UNIX_TIMESTAMP(createdAt) *1000, apiAccessKey, message, requestType, success, pointsId, userId, idType, orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: useridType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: orderId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="839835548">${m_orderNum}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestOrderId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">5</stringProp>
          </BeanShellTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 15s" enabled="false">
            <stringProp name="BeanShellSampler.query">Thread.sleep(15000);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read redemption order EMAIL sent to user" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO_1}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <boolProp name="storeMimeMessage">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-908514259">1 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: content" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2063755217">Subject: Your epoints reward is on it&apos;s way</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read redemption order EMAIL sent to team" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO_2}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <boolProp name="storeMimeMessage">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-908514259">1 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: content" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-723580813">Hi, ${s_userFirstName_1}</stringProp>
                <stringProp name="-1088900375">Follow link</stringProp>
                <stringProp name="-539601653">&lt;a href=&quot;${SERVER_URL}/?p=${m_tokenValue_1}&quot;&gt;${SERVER_URL}/?p=${m_tokenValue_1}&lt;/a&gt;</stringProp>
                <stringProp name="552230908">to reset you password.</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-OM_ADD_RO_C_S9|10|11|12|13|14|17|18|19|20|21" enabled="false">
        <stringProp name="TestPlan.comments">Adding REDEMPTION ORDER for user registered in ePoints.com

User_1 - S9 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com for ONE SINGLE product - no CONFIRMED points left
User_2 - S10 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com for ONE MULTIPLE product - not enough CONFIRMED points left
User_3 - S11 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com for TWO MULTIPLE product - not enough CONFIRMED points left
User_4 - S12 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com with missing IMPORTANT order information
User_5 - S13 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com with missing IMPORTANT address information
User_6 - S14 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com with missing IMPORTANT product information
User_7 - S17 - Trying to ADD REDEMPTION ORDER for UNKNOWN user
User_8 - S18 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com who is INACTIVE/VERIFIED
User_9 - S19 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com who is ACTIVE/UNVERIFIED
User_10 - S20 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com requested by UNKNOWN client
User_11 - S21 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com requested by INACTIVE client
User_12 - S22 - Trying to ADD REDEMPTION ORDER for user registered in ePoints.com with NO PRODUCT information provided

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">12</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="1556994791">OCCASION</stringProp>
            <stringProp name="2055429688">RELATIONSHIP</stringProp>
            <stringProp name="-557429565">REST_RELATIONSHIP</stringProp>
            <stringProp name="1672907751">MESSAGE</stringProp>
            <stringProp name="1662349948">REST_MESSAGE</stringProp>
            <stringProp name="-1685422510">DEDUCTION_URI</stringProp>
            <stringProp name="-1079680729">REST_DEDUCTION_URI</stringProp>
            <stringProp name="2388619">NAME</stringProp>
            <stringProp name="955784214">REST_NAME</stringProp>
            <stringProp name="-436088099">ADDRESS1</stringProp>
            <stringProp name="-763379992">REST_ADDRESS1</stringProp>
            <stringProp name="-436088098">ADDRESS2</stringProp>
            <stringProp name="-763379991">REST_ADDRESS2</stringProp>
            <stringProp name="2068843">CITY</stringProp>
            <stringProp name="955464438">REST_CITY</stringProp>
            <stringProp name="1993721162">COUNTY</stringProp>
            <stringProp name="-916113387">REST_COUNTY</stringProp>
            <stringProp name="1675813750">COUNTRY</stringProp>
            <stringProp name="1665255947">REST_COUNTRY</stringProp>
            <stringProp name="88833">ZIP</stringProp>
            <stringProp name="446485526">REST_ZIP</stringProp>
            <stringProp name="76105038">PHONE</stringProp>
            <stringProp name="-433402589">REST_PHONE</stringProp>
            <stringProp name="2187568">GIFT</stringProp>
            <stringProp name="955583163">REST_GIFT</stringProp>
            <stringProp name="-935840855">P1_PRODUCT_ID</stringProp>
            <stringProp name="-330099074">REST_P1_PRODUCT_ID</stringProp>
            <stringProp name="6222701">P1_IMAGE_URL</stringProp>
            <stringProp name="1688330744">REST_P1_IMAGE_URL</stringProp>
            <stringProp name="1028516442">P1_TITLE</stringProp>
            <stringProp name="701224549">REST_P1_TITLE</stringProp>
            <stringProp name="1709937921">P1_POINTS</stringProp>
            <stringProp name="153823830">REST_P1_POINTS</stringProp>
            <stringProp name="821692713">P1_QUANTITY</stringProp>
            <stringProp name="44670270">REST_P1_QUANTITY</stringProp>
            <stringProp name="1601400422">P1_MERCHANT</stringProp>
            <stringProp name="824377979">REST_P1_MERCHANT</stringProp>
            <stringProp name="-548426419">REST_PRODUCT1</stringProp>
            <stringProp name="-548426418">REST_PRODUCT2</stringProp>
            <stringProp name="-548426417">REST_PRODUCT3</stringProp>
            <stringProp name="461453829">PARTNER_SHORT</stringProp>
            <stringProp name="-829732870">TAG_KEY</stringProp>
            <stringProp name="-1929424669">POINTS</stringProp>
            <stringProp name="-806758136">P2_PRODUCT_ID</stringProp>
            <stringProp name="-201016355">REST_P2_PRODUCT_ID</stringProp>
            <stringProp name="-1790728658">P2_IMAGE_URL</stringProp>
            <stringProp name="-108620615">REST_P2_IMAGE_URL</stringProp>
            <stringProp name="1916020123">P2_TITLE</stringProp>
            <stringProp name="1588728230">REST_P2_TITLE</stringProp>
            <stringProp name="-842219040">P2_POINTS</stringProp>
            <stringProp name="1896634165">REST_P2_POINTS</stringProp>
            <stringProp name="625179208">P2_QUANTITY</stringProp>
            <stringProp name="-151843235">REST_P2_QUANTITY</stringProp>
            <stringProp name="1404886917">P2_MERCHANT</stringProp>
            <stringProp name="627864474">REST_P2_MERCHANT</stringProp>
            <stringProp name="-677675417">P3_PRODUCT_ID</stringProp>
            <stringProp name="-71933636">REST_P3_PRODUCT_ID</stringProp>
            <stringProp name="707287279">P3_IMAGE_URL</stringProp>
            <stringProp name="-1905571974">REST_P3_IMAGE_URL</stringProp>
            <stringProp name="-1491443492">P3_TITLE</stringProp>
            <stringProp name="-1818735385">REST_P3_TITLE</stringProp>
            <stringProp name="900591295">P3_POINTS</stringProp>
            <stringProp name="-655522796">REST_P3_POINTS</stringProp>
            <stringProp name="428665703">P3_QUANTITY</stringProp>
            <stringProp name="-348356740">REST_P3_QUANTITY</stringProp>
            <stringProp name="1208373412">P3_MERCHANT</stringProp>
            <stringProp name="431350969">REST_P3_MERCHANT</stringProp>
            <stringProp name="-305670784">REST_EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="1229702898">REST_OCCASION</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-2069699023">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="79928788">going live S9</stringProp>
              <stringProp name="-1174707897">tester S9</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="248645972">all the best S9</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-5701086">http://epoint.com/deduction/uri_S9</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="1216103774">FName LName S9</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="596920312">address 1st line S9</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="-1362963186">address 2nd line S9</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="870814278">city name S9</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="1785821989">county name S9</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="-1229916815">country name S9</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="220857817">post code S9</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="1962731083">phone number S9</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1559293454">product1_id S9</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1566783992">product1_image_url S9</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="-1187076213">product1_title S9</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="-806692351">product1_merchant_name S9</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="-1918074609">INVALID_REDEMPTION_POINTS</stringProp>
              <stringProp name="-1313381769">User has no enough points to deduct</stringProp>
            </collectionProp>
            <collectionProp name="2080433706">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1817175068">going live S10</stringProp>
              <stringProp name="-2056206639">tester S10</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909660">all the best S10</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733866">http://epoint.com/deduction/uri_S10</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488870">FName LName S10</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660288">address 1st line S10</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697813994">address 2nd line S10</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438642">city name S10</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093389">county name S10</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284199">country name S10</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342465">post code S10</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121229">phone number S10</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456618">product1_id S10</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663296">product1_image_url S10</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342861">product1_title S10</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="51">3</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340695">product1_merchant_name S10</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="-1918074609">INVALID_REDEMPTION_POINTS</stringProp>
              <stringProp name="-1313381769">User has no enough points to deduct</stringProp>
            </collectionProp>
            <collectionProp name="-2005664036">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1817175067">going live S11</stringProp>
              <stringProp name="-2056206638">tester S11</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909659">all the best S11</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733865">http://epoint.com/deduction/uri_S11</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488869">FName LName S11</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660289">address 1st line S11</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697813995">address 2nd line S11</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438643">city name S11</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093388">county name S11</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284200">country name S11</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342464">post code S11</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121230">phone number S11</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456619">product1_id S11</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663297">product1_image_url S11</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342862">product1_title S11</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340696">product1_merchant_name S11</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1578844982">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}},</stringProp>
              <stringProp name="-894481312">{${REST_P2_PRODUCT_ID}${REST_P2_IMAGE_URL}${REST_P2_TITLE}${REST_P2_POINTS}${REST_P2_QUANTITY}${REST_P2_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1458700342">product2_id S11</stringProp>
              <stringProp name="508291864">&quot;productId&quot;:&quot;${P2_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="-1461752190">product2_image_url S11</stringProp>
              <stringProp name="262717070">&quot;imageUrl&quot;:&quot;${P2_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="58391503">product2_title S11</stringProp>
              <stringProp name="367982017">&quot;title&quot;:&quot;${P2_TITLE}&quot;,</stringProp>
              <stringProp name="57">9</stringProp>
              <stringProp name="-24555111">&quot;numPoints&quot;:${P2_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1548981691">&quot;quantity&quot;:${P2_QUANTITY},</stringProp>
              <stringProp name="-82131175">product2_merchant_name S11</stringProp>
              <stringProp name="-526527394">&quot;merchantName&quot;:&quot;${P2_MERCHANT}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="-1918074609">INVALID_REDEMPTION_POINTS</stringProp>
              <stringProp name="-1313381769">User has no enough points to deduct</stringProp>
            </collectionProp>
            <collectionProp name="-1191654192">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-955488868">FName LName S12</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660290">address 1st line S12</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697813996">address 2nd line S12</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438644">city name S12</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093387">county name S12</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284201">country name S12</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342463">post code S12</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121231">phone number S12</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456620">product1_id S12</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663298">product1_image_url S12</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342863">product1_title S12</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340697">product1_merchant_name S12</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-415804114">Invalid deductionURI = [null]</stringProp>
            </collectionProp>
            <collectionProp name="-15225404">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-176733863">http://epoint.com/deduction/uri_S13</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456621">product1_id S13</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663299">product1_image_url S13</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342864">product1_title S13</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340698">product1_merchant_name S13</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-964199368">Invalid delivery address field name=[null]</stringProp>
            </collectionProp>
            <collectionProp name="628974713">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-176733862">http://epoint.com/deduction/uri_S14</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488866">FName LName S14</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660292">address 1st line S14</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697813998">address 2nd line S14</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438646">city name S14</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093385">county name S14</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284203">country name S14</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342461">post code S14</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121233">phone number S14</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456622">product1_id S14</stringProp>
              <stringProp name="-1971896843">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-275485551">Invalid product quantity quantity=[0] (productId = [product1_id S14])</stringProp>
            </collectionProp>
            <collectionProp name="-21457772">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1817175061">going live S17</stringProp>
              <stringProp name="-2056206632">tester S17</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909653">all the best S17</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733859">http://epoint.com/deduction/uri_S17</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488863">FName LName S17</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660295">address 1st line S17</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697814001">address 2nd line S17</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438649">city name S17</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093382">county name S17</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284206">country name S17</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342458">post code S17</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121236">phone number S17</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456625">product1_id S17</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663303">product1_image_url S17</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342868">product1_title S17</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340702">product1_merchant_name S17</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="-1420874445">INVALID_USER</stringProp>
              <stringProp name="34722285">User with userId=[erased_from_existance] is invalid</stringProp>
            </collectionProp>
            <collectionProp name="1012284898">
              <stringProp name="1490710373">user4_id1@test.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="52">4</stringProp>
              <stringProp name="-1817175060">going live S18</stringProp>
              <stringProp name="-2056206631">tester S18</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909652">all the best S18</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733858">http://epoint.com/deduction/uri_S18</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488862">FName LName S18</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660296">address 1st line S18</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697814002">address 2nd line S18</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438650">city name S18</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093381">county name S18</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284207">country name S18</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342457">post code S18</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121237">phone number S18</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456626">product1_id S18</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663304">product1_image_url S18</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342869">product1_title S18</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340703">product1_merchant_name S18</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1076932840">User with userId=[user4_id1@test.com] is not active</stringProp>
            </collectionProp>
            <collectionProp name="1440153554">
              <stringProp name="422506888">iatesting1234+user72@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1755">72</stringProp>
              <stringProp name="-1817175059">going live S19</stringProp>
              <stringProp name="-2056206630">tester S19</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909651">all the best S19</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733857">http://epoint.com/deduction/uri_S19</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488861">FName LName S19</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660297">address 1st line S19</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697814003">address 2nd line S19</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438651">city name S19</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093380">county name S19</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284208">country name S19</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342456">post code S19</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121238">phone number S19</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456627">product1_id S19</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663305">product1_image_url S19</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342870">product1_title S19</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340704">product1_merchant_name S19</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="-1427684523">USER_IS_NOT_VERIFIED</stringProp>
              <stringProp name="1939095575">User with userId=[iatesting1234+user72@gmail.com] is not verified</stringProp>
            </collectionProp>
            <collectionProp name="1947900667">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1817175037">going live S20</stringProp>
              <stringProp name="-2056206608">tester S20</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909629">all the best S20</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733835">http://epoint.com/deduction/uri_S20</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488839">FName LName S20</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660319">address 1st line S20</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697814025">address 2nd line S20</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438673">city name S20</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093358">county name S20</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284230">country name S20</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342434">post code S20</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121260">phone number S20</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456649">product1_id S20</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663327">product1_image_url S20</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342892">product1_title S20</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340726">product1_merchant_name S20</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
            </collectionProp>
            <collectionProp name="2073389960">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="52">4</stringProp>
              <stringProp name="-1817175036">going live S21</stringProp>
              <stringProp name="-2056206607">tester S21</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909628">all the best S21</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733834">http://epoint.com/deduction/uri_S21</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488838">FName LName S21</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660320">address 1st line S21</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697814026">address 2nd line S21</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438674">city name S21</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093357">county name S21</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284231">country name S21</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342433">post code S21</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121261">phone number S21</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="1093456650">product1_id S21</stringProp>
              <stringProp name="-999259945">&quot;productId&quot;:&quot;${P1_PRODUCT_ID}&quot;,</stringProp>
              <stringProp name="1325663328">product1_image_url S21</stringProp>
              <stringProp name="768275695">&quot;imageUrl&quot;:&quot;${P1_IMAGE_URL}&quot;,</stringProp>
              <stringProp name="1855342893">product1_title S21</stringProp>
              <stringProp name="564495522">&quot;title&quot;:&quot;${P1_TITLE}&quot;,</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="171958394">&quot;numPoints&quot;:${P1_POINTS},</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1419898972">&quot;quantity&quot;:${P1_QUANTITY},</stringProp>
              <stringProp name="762340727">product1_merchant_name S21</stringProp>
              <stringProp name="-655610113">&quot;merchantName&quot;:&quot;${P1_MERCHANT}&quot;</stringProp>
              <stringProp name="-1436403806">{${REST_P1_PRODUCT_ID}${REST_P1_IMAGE_URL}${REST_P1_TITLE}${REST_P1_POINTS}${REST_P1_QUANTITY}${REST_P1_MERCHANT}}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
            </collectionProp>
            <collectionProp name="-1347038674">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-606520294">REDEMPTION_ORDER</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-1817175035">going live S22</stringProp>
              <stringProp name="-2056206606">tester S22</stringProp>
              <stringProp name="-40973464">&quot;relationship&quot;:&quot;${RELATIONSHIP}&quot;,</stringProp>
              <stringProp name="-881909627">all the best S22</stringProp>
              <stringProp name="-1726699556">&quot;message&quot;:&quot;${MESSAGE}&quot;,</stringProp>
              <stringProp name="-176733833">http://epoint.com/deduction/uri_S22</stringProp>
              <stringProp name="-735884083">&quot;deductionURI&quot;:&quot;${DEDUCTION_URI}&quot;,</stringProp>
              <stringProp name="-955488837">FName LName S22</stringProp>
              <stringProp name="2078899464">&quot;name&quot;:&quot;${NAME}&quot;,</stringProp>
              <stringProp name="1324660321">address 1st line S22</stringProp>
              <stringProp name="1857548456">&quot;address1&quot;:&quot;${ADDRESS1}&quot;,</stringProp>
              <stringProp name="697814027">address 2nd line S22</stringProp>
              <stringProp name="-1084079352">&quot;address2&quot;:&quot;${ADDRESS2}&quot;,</stringProp>
              <stringProp name="1225438675">city name S22</stringProp>
              <stringProp name="821772552">&quot;city&quot;:&quot;${CITY}&quot;,</stringProp>
              <stringProp name="-474093356">county name S22</stringProp>
              <stringProp name="-265769240">&quot;county&quot;:&quot;${COUNTY}&quot;,</stringProp>
              <stringProp name="527284232">country name S22</stringProp>
              <stringProp name="1986767486">&quot;country&quot;:&quot;${COUNTRY}&quot;,</stringProp>
              <stringProp name="-1743342432">post code S22</stringProp>
              <stringProp name="-1021522120">&quot;postcode&quot;:&quot;${ZIP}&quot;,</stringProp>
              <stringProp name="715121262">phone number S22</stringProp>
              <stringProp name="1209186958">&quot;phone&quot;:&quot;${PHONE}&quot;,</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-1201692096">&quot;gift&quot;:${GIFT},</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="109416">p80</stringProp>
              <stringProp name="-830919900">TAG80_1</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-508696440">&quot;occasion&quot;:&quot;${OCCASION}&quot;,</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-2010673725">Redemption order without products</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup" enabled="true"/>
        <hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX - user" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO_1}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="delete all emails in the INBOX - team" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO_2}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user == 2" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add CONFIRMED points" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${PARTNER_SHORT}&quot;,&quot;onBehalfOfId&quot;:&quot;on_behalf_of_p80&quot;,&quot;apiAccessKey&quot;:&quot;${PARTNER_KEY}&quot;,&quot;tag&quot;: &quot;${TAG_KEY}&quot;,&quot;numPoints&quot;:${POINTS},&quot;pointsType&quot;:&quot;CONFIRMED&quot;,&quot;sourceURI&quot;:&quot;http://source.uri&quot;,&quot;externalTransactionId&quot;:&quot;confirmedAdded_T80_1_u80_no_1&quot;,&quot;reasonText&quot;:&quot;ActivityConfirmed_T80_1&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/transactions/user/${EXTUSER_ID}/?idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601759544">Created</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-OM_ADD_RO_C_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get redemptionorder last id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id
FROM redemptionorder
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_orderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get  product last id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id
FROM product
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_productId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id
FROM points
WHERE status = &apos;REDEEMED&apos; AND userId = ?
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_pointsId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s CONFIRMED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;CONFIRMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsConfirmed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s PENDING points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;PENDING&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsPending</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s DECLINED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;DECLINED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsDeclined</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s SPENT points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;SPENT&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get user&apos;s REDEEMED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;REDEEMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">s_pointsRedeemed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add REDEMPTION ORDER" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{${REST_OCCASION}${REST_RELATIONSHIP}${REST_MESSAGE}${REST_DEDUCTION_URI}${REST_NAME}${REST_ADDRESS1}${REST_ADDRESS2}${REST_CITY}${REST_COUNTY}${REST_COUNTRY}${REST_ZIP}${REST_PHONE}${REST_GIFT}&quot;products&quot;:[${REST_PRODUCT1}${REST_PRODUCT2}${REST_PRODUCT3}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/redemptionOrder/user/${__BeanShell(String url = URLEncoder.encode(&quot;${EXTUSER_ID}&quot;\, &quot;UTF-8&quot;); return url;)}/?${REST_PARTNER_KEY}${REST_EXTUSER_ID_TYPE}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check redemptionorder table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id
FROM redemptionorder
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_orderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: order id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1034454789">${s_orderId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_orderId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check product table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id
FROM product
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_productId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: product id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="426492228">${s_productId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_productId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check points table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id
FROM points
WHERE status = &apos;REDEEMED&apos; AND userId = ?
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_pointsId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: points id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1806690218">${s_pointsId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s CONFIRMED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? and pointsMap_KEY=&apos;CONFIRMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsConfirmed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2001056370">${s_pointsConfirmed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsConfirmed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s PENDING points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;PENDING&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsPending</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: pending points" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1582058822">${s_pointsPending_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsPending_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s DECLINED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;DECLINED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsDeclined</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: declined points" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2047451191">${s_pointsDeclined_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsDeclined_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s SPENT points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COALESCE(pointsMap, 0)
FROM user_pointsmap
WHERE user_Id=? AND pointsMap_KEY=&apos;SPENT&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsSpent</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: spent points" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114409219">${s_pointsSpent_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsSpent_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check user&apos;s REDEEMED points" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT pointsMap
FROM user_pointsmap
WHERE user_Id=? and pointsMap_KEY=&apos;REDEEMED&apos;;</stringProp>
            <stringProp name="queryArguments">${USER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames">e_pointsRedeemed</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1191738748">${e_pointsRedeemed_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_pointsRedeemed_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(createdAt) *1000, 
  apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  userId, 
  idType, 
  COALESCE(orderId, 0) orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: useridType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: orderId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestOrderId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="wait 15s" enabled="false">
            <stringProp name="BeanShellSampler.query">Thread.sleep(15000);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read redemption order EMAIL sent to user" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO_1}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <boolProp name="storeMimeMessage">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2033143340">0 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="read redemption order EMAIL sent to team" enabled="false">
            <stringProp name="TestPlan.comments">email password: passWORD1234</stringProp>
            <stringProp name="host_type">imaps</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">imap.gmail.com</stringProp>
            <stringProp name="port">993</stringProp>
            <stringProp name="username">${EMAIL_SENTTO_2}</stringProp>
            <stringProp name="password">passWORD1234</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="delete">true</boolProp>
            <boolProp name="storeMimeMessage">true</boolProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: numEmail" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2033143340">0 messages found
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-OM_GET_ROD_C_S1|2|3|4" enabled="false">
        <stringProp name="TestPlan.comments">Getting REDEMPTION ORDER DETAILS for user registered in ePoints.com

WS-OM_ADD_RO_C required

User_1 - S1 - Getting REDEMPTION ORDER DETAILS for user registered in ePoints.com for ORDER with ONE SINGLE product
User_2 - S2 - Getting REDEMPTION ORDER DETAILS for user registered in ePoints.com for ORDER with THREE SINGLE products
User_3 - S3 - Getting REDEMPTION ORDER DETAILS for user registered in ePoints.com for ORDER with THREE MULTIPLE products
User_4 - S4 - Getting REDEMPTION ORDER DETAILS for INACTIVE/VERIFIED user registered in ePoints.com

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="2016962508">ORDER_ID</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-653256414">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-1198327885">${__property(orderID_1)}</stringProp>
              <stringProp name="-181210171">?apiKey=${PARTNER_KEY}</stringProp>
            </collectionProp>
            <collectionProp name="-730613628">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-1198325002">${__property(orderID_4)}</stringProp>
              <stringProp name="-181210171">?apiKey=${PARTNER_KEY}</stringProp>
            </collectionProp>
            <collectionProp name="-764613033">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-1198324041">${__property(orderID_5)}</stringProp>
              <stringProp name="-181210171">?apiKey=${PARTNER_KEY}</stringProp>
            </collectionProp>
            <collectionProp name="-764613033">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-1198324041">${__property(orderID_5)}</stringProp>
              <stringProp name="-181210171">?apiKey=${PARTNER_KEY}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 4" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 4</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user u, redemptionorder o
SET u.active = 0
WHERE
  o.userId = u.id
  AND o.id = ?;</stringProp>
              <stringProp name="queryArguments">${ORDER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-OM_GET_ROD_C_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get order details" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT
  r.userId,
  isGift,
  occasion,
  relationship,
  o.message,
  deductionURI,
  name,
  address1,
  address2,
  city,
  county,
  country,
  phone,
  postcode
FROM redemptionorder o, request r
WHERE 
  o.id = r.orderId
  AND r.requestType = &apos;REDEMPTION_ORDER&apos;
  AND o.id = ?</stringProp>
            <stringProp name="queryArguments">${ORDER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_orderUserId, s_orderGift, s_orderOccasion, s_orderRelation, s_orderMessage, s_orderDeductionUri, s_orderName, s_orderAddress1, s_orderAddress2, s_orderCity, s_orderCounty, s_orderCountry, s_orderPhone, s_orderZip</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get product(s) details" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT
  productId,
  imageUrl,
  title,
  merchantName,
  numPoints,
  quantity
FROM product p
WHERE 
  p.orderId = ?</stringProp>
            <stringProp name="queryArguments">${ORDER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_productProductId, s_productImageUrl, s_productTitle, s_productMerchant, s_productPoints, s_productQuantity</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get REDEMPTION ORDER DETAILS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/redemptionOrder/${ORDER_ID}${REST_PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get userId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_userId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get gift" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_gift</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;gift&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get occasion" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_occasion</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;occasion&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get relationship" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_relationship</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;relationship&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get message" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_message</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;message&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get deductionURI" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_deductionUri</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;deductionURI&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get name" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_name</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get address1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_address1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;address1&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get address2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_address2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;address2&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get city" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_city</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;city&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get county" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_county</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;county&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get country" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_country</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;country&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get phone" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_phone</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;phone&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get postcode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_postcode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;postcode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productProductIdArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_productIdArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productImageUrlArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_imageUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;imageUrl&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productTitleArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_titleArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;title&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productPointsArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_pointsArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;numPoints&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productQuantityArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_quantityArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;quantity&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productMerchantArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_merchantArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;merchantName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1264373626">${s_orderUserId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_userId</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: gift" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="350178704">${s_orderGift_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_gift</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: occasion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-834569735">${s_orderOccasion_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_occasion</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: relationship" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-523200828">${s_orderRelation_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_relationship</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1854678991">${s_orderMessage_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_message</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: deductionURI" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1642667929">${s_orderDeductionUri_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_deductionUri</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: name" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2044721749">${s_orderName_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_name</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: address1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1154968163">${s_orderAddress1_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_address1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: address2" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1154997954">${s_orderAddress2_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_address2</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: city" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1108209525">${s_orderCity_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_city</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: county" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1996481034">${s_orderCounty_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_county</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: country" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1767018016">${s_orderCountry_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_country</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: phone" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="135867336">${s_orderPhone_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_phone</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: postcode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1799778315">${s_orderZip_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_postcode</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productProductId" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_productIdArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_productIdArray_&quot; + i);
	  String expString = vars.get(&quot;s_productProductId_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productId (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productImageUrl" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_productIdArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_imageUrlArray_&quot; + i);
	  String expString = vars.get(&quot;s_productImageUrl_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): imageUrl (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productTitle" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_productIdArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_titleArray_&quot; + i);
	  String expString = vars.get(&quot;s_productTitle_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productTitle (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productPoints" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_productIdArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_pointsArray_&quot; + i);
	  String expString = vars.get(&quot;s_productPoints_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productPoints (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productQuantity" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_productIdArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_quantityArray_&quot; + i);
	  String expString = vars.get(&quot;s_productQuantity_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productQuantity (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productMerchant" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_productIdArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_merchantArray_&quot; + i);
	  String expString = vars.get(&quot;s_productMerchant_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): merchant (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT UNIX_TIMESTAMP(createdAt) *1000, apiAccessKey, message, requestType, success, pointsId, userId, idType, orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: orderId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-565768390">${ORDER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestOrderId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 4" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 4</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user u, redemptionorder o
SET u.active = 0
WHERE
  o.userId = u.id
  AND o.id = ?;</stringProp>
              <stringProp name="queryArguments">${ORDER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-OM_GET_ROD_C_S5|6|7|8|9|10" enabled="false">
        <stringProp name="TestPlan.comments">Getting REDEMPTION ORDER DETAILS for user registered in ePoints.com

User_1 - S5 - Trying to get REDEMPTION ORDER DETAILS for user registered in ePoints.com requested by INACTIVE client
User_2 - S6 - Trying to get REDEMPTION ORDER DETAILS for user registered in ePoints.com requested by UNKNOWN client
User_3 - S7 - Trying to get REDEMPTION ORDER DETAILS for user registered in ePoints.com requested with EMPTY client&apos;s APIKEY
User_4 - S8 - Trying to get REDEMPTION ORDER DETAILS for user registered in ePoints.com requested with NO client&apos;s APIKEY parameter
User_5 - S9 - Trying to get REDEMPTION ORDER DETAILS for user registered in ePoints.com for UNKNOWN order id
User_6 - S10 - Trying to get REDEMPTION ORDER DETAILS for user registered in ePoints.com requested by UNAUTHORIZED client

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">6</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="2016962508">ORDER_ID</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="474743812">
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-1198327885">${__property(orderID_1)}</stringProp>
              <stringProp name="-181210171">?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
            </collectionProp>
            <collectionProp name="1708367406">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-1198327885">${__property(orderID_1)}</stringProp>
              <stringProp name="-181210171">?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
            </collectionProp>
            <collectionProp name="-1941277897">
              <stringProp name="48">0</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-1198327885">${__property(orderID_1)}</stringProp>
              <stringProp name="1622182361">?apiKey=</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="-1310000741">Partner with accessKey=[] is invalid</stringProp>
            </collectionProp>
            <collectionProp name="99620277">
              <stringProp name="48">0</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1198327885">${__property(orderID_1)}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="250872824">Required String parameter &apos;apiKey&apos; is not present</stringProp>
            </collectionProp>
            <collectionProp name="912445402">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="51512">404</stringProp>
              <stringProp name="1786305461">Not Found</stringProp>
              <stringProp name="-2054162789">1234567890</stringProp>
              <stringProp name="-181210171">?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="384829189">ORDER_NOT_FOUND</stringProp>
              <stringProp name="-1921001749">Redemption order with id=[1234567890] not found</stringProp>
            </collectionProp>
            <collectionProp name="-873320119">
              <stringProp name="-2056905465">p70aKey</stringProp>
              <stringProp name="537175805">REDEMPTION_ORDER_DETAILS</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-1198327885">${__property(orderID_1)}</stringProp>
              <stringProp name="-181210171">?apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-214754211">UNAUTHORIZED_PARTNER</stringProp>
              <stringProp name="-1724271025">Unauthorized partner with apiKey=[p70aKey]</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fake order for unverified user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE redemptionorder o
SET o.userId = 72
WHERE
  o.id = ?;</stringProp>
              <stringProp name="queryArguments">${ORDER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-OM_GET_ROD_C_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get REDEMPTION ORDER DETAILS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/redemptionOrder/${ORDER_ID}${REST_PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id,
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  userId, 
  idType, 
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="restore order (id=${ORDER_ID})" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE redemptionorder o
SET o.userId = 80
WHERE
  o.id = ?;</stringProp>
              <stringProp name="queryArguments">${ORDER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-OM_GET_ROPH_U_S1|2|3|4|8" enabled="false">
        <stringProp name="TestPlan.comments">Getting ORDERED PRODUCT HISTORY for user registered in ePoints.com

WS-OM_ADD_RO_C required

User_1 - S1 - Getting ORDERED PRODUCT HISTORY for user registered in ePoints.com (no sort/offset/limit/date range params)
User_2 - S2 - Getting ORDERED PRODUCT HISTORY for user registered in ePoints.com SORTED ASCENDING (offset/limit/date range params)
User_3 - S3 - Getting ORDERED PRODUCT HISTORY for user registered in ePoints.com SORTED ASCENDING with specific offset/limit (no date range params)
User_4 - S4 - Getting ORDERED PRODUCT HISTORY for user registered in ePoints.com SORTED ASCENDING with specific offset/limit/date range params
User_5 - S8 - Getting ORDERED PRODUCT HISTORY for user registered in ePoints.com requested by client who hasn&apos;t added any orders for the user (0 returned products)

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-305670784">REST_EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-1513304392">ASCENDING</stringProp>
            <stringProp name="1225548813">REST_ASCENDING</stringProp>
            <stringProp name="-1966450541">OFFSET</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="72438683">LIMIT</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="-1058984565">START_DATE</stringProp>
            <stringProp name="-52819780">SQL_START_DATE</stringProp>
            <stringProp name="-2053881130">REST_START_DATE</stringProp>
            <stringProp name="-1757720398">END_DATE</stringProp>
            <stringProp name="-1117567965">SQL_END_DATE</stringProp>
            <stringProp name="-2085012291">REST_END_DATE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1227812401">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-785767823">${DT_FAR_IN_THE_PAST_STR}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1457205920">${DT_FAR_IN_THE_FUTURE_STR}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
            </collectionProp>
            <collectionProp name="1172759803">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-556689049">&amp;ascending=${ASCENDING}</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-785767823">${DT_FAR_IN_THE_PAST_STR}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1457205920">${DT_FAR_IN_THE_FUTURE_STR}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
            </collectionProp>
            <collectionProp name="473511773">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-556689049">&amp;ascending=${ASCENDING}</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="-5974289">&amp;offset=${OFFSET}</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="1577637729">&amp;limit=${LIMIT}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-785767823">${DT_FAR_IN_THE_PAST_STR}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1457205920">${DT_FAR_IN_THE_FUTURE_STR}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
            </collectionProp>
            <collectionProp name="1115085364">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="3569038">true</stringProp>
              <stringProp name="-556689049">&amp;ascending=${ASCENDING}</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-5974289">&amp;offset=${OFFSET}</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="1577637729">&amp;limit=${LIMIT}</stringProp>
              <stringProp name="944250615">${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="998050575">${DT_FIRST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="-1459489208">&amp;startDate=${START_DATE}</stringProp>
              <stringProp name="1165605421">${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="-1482163259">${DT_LAST_DAY_OF_CURRENT_MONTH_STR}</stringProp>
              <stringProp name="1565593210">&amp;endDate=${END_DATE}</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
            </collectionProp>
            <collectionProp name="-974564590">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2056905465">p70aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-556689049">&amp;ascending=${ASCENDING}</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 5" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 5</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-OM_GET_ROPH_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get ORDERED PRODUCTS count all" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(pr.id) product_all_count
FROM product pr, redemptionorder o, partner pa
WHERE 
  pr.orderId = o.id
  AND o.partnerId = pa.id
  AND o.userId = ?
  AND pa.accessKey = ?
  AND o.createdAt BETWEEN ? AND ?;
</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY},${SQL_START_DATE},${SQL_END_DATE}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="variableNames">s_productsAllCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get ORDERED PRODUCTS count limited" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(pid) product_limited_count
FROM 
(
SELECT pr.id AS pid
FROM product pr, redemptionorder o, partner pa
WHERE 
  pr.orderId = o.id
  AND o.partnerId = pa.id
  AND o.userId = ?
  AND pa.accessKey = ?
  AND o.createdAt BETWEEN ? AND ?
  LIMIT ?,?
) product;</stringProp>
            <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY},${SQL_START_DATE},${SQL_END_DATE},${OFFSET},${LIMIT}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR, VARCHAR, INTEGER, INTEGER</stringProp>
            <stringProp name="variableNames">s_productsLimitedCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user == 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum}  &lt; 2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get ORDERED PRODUCTS details limited" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  pr.id,
  pr.orderId,
  pr.productId,
  COALESCE(pr.imageUrl, &quot;&quot;) imageUrl,
  COALESCE(pr.title, &quot;&quot;) title,
  pr.numPoints,
  pr.quantity,
  COALESCE(pr.merchantName, &quot;&quot;) merchantName,
  UNIX_TIMESTAMP(o.createdAt) *1000 createdAt,
  o.isGift,
  o.occasion,
  o.relationship,
  o.message,
  o.name,
  o.address1,
  o.address2,
  o.city,
  o.county,
  o.country,
  o.postcode,
  o.phone

FROM product pr, redemptionorder o, partner pa
WHERE 
  pr.orderId = o.id
  AND o.partnerId = pa.id
  AND o.userId = ?
  AND pa.accessKey = ?
  AND o.createdAt BETWEEN ? AND ?
ORDER BY pr.createdAt DESC, pr.id DESC
LIMIT ?,?;</stringProp>
              <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY},${SQL_START_DATE},${SQL_END_DATE},${OFFSET},${LIMIT}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR, VARCHAR, INTEGER, INTEGER</stringProp>
              <stringProp name="variableNames">s_productId, s_productOrderId, s_productProductId, s_productImageUrl, s_productTitle, s_productPoints, s_productQuantity, s_productMerchant, s_orderCreatedAt, s_orderGift, s_orderOccasion, s_orderRelationship, s_orderMessage, s_orderName, s_orderAddress1, s_orderAddress2, s_orderCity, s_orderCounty, s_orderCountry, s_orderZip, s_orderPhone</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user &gt; 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum}  &gt; 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get ORDERED PRODUCTS details limited" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT 
  pr.id,
  pr.orderId,
  pr.productId,
  COALESCE(pr.imageUrl, &quot;&quot;) imageUrl,
  COALESCE(pr.title, &quot;&quot;) title,
  pr.numPoints,
  pr.quantity,
  COALESCE(pr.merchantName, &quot;&quot;) merchantName,
  UNIX_TIMESTAMP(o.createdAt) *1000 createdAt,
  o.isGift,
  o.occasion,
  o.relationship,
  o.message,
  o.name,
  o.address1,
  o.address2,
  o.city,
  o.county,
  o.country,
  o.postcode,
  o.phone

FROM product pr, redemptionorder o, partner pa
WHERE 
  pr.orderId = o.id
  AND o.partnerId = pa.id
  AND o.userId = ?
  AND pa.accessKey = ?
  AND o.createdAt BETWEEN ? AND ?
ORDER BY pr.createdAt ASC, pr.id ASC
LIMIT ?,?;</stringProp>
              <stringProp name="queryArguments">${USER_ID},${PARTNER_KEY},${SQL_START_DATE},${SQL_END_DATE},${OFFSET},${LIMIT}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR, VARCHAR, INTEGER, INTEGER</stringProp>
              <stringProp name="variableNames">s_productId, s_productOrderId, s_productProductId, s_productImageUrl, s_productTitle, s_productPoints, s_productQuantity, s_productMerchant, s_orderCreatedAt, s_orderGift, s_orderOccasion, s_orderRelationship, s_orderMessage, s_orderName, s_orderAddress1, s_orderAddress2, s_orderCity, s_orderCounty, s_orderCountry, s_orderZip, s_orderPhone</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get REDEMPTION ORDER HISTORY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/redemptionOrder/user/${EXTUSER_ID}/?${REST_PARTNER_KEY}${REST_EXTUSER_ID_TYPE}${REST_ASCENDING}${REST_OFFSET}${REST_LIMIT}${REST_START_DATE}${REST_END_DATE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get totalResults" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_totalResults</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalResults&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get searchResultsCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_searchResultsCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;searchResultsCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productOrderIdArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_productOrderIdArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;orderId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productProductIdArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_productProductIdArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productImageUrlArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_imageUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;imageUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productTitleArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_titleArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;title&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productPointsArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_pointsArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;numPoints&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productQuantityArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_quantityArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;quantity&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productMerchantArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_merchantArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;merchantName&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderCreatedAtArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_createdAtArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;createdAt&quot;:(\d+),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderGiftArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_giftArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;gift&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderOccasionArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_occasionArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;occasion&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderRelationshipArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_relationshipArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;relationship&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderMessageArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_messageArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;message&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderNameArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_nameArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderAddress1Array" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_address1Array</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;address1&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderAddress2Array" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_address2Array</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;address2&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderCityArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_cityArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;city&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderCountyArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_countyArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;county&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderCountryArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_countryArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;country&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderZipArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_zipArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;postcode&quot;:(&quot;(.*?)&quot;|(.*?)),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get orderPhoneArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_phoneArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;phone&quot;:(&quot;(.*?)&quot;|(.*?))}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: totalResults count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1829448170">${s_productsAllCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_totalResults</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: searchResultsCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-999283569">${s_productsLimitedCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_searchResultsCount</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productOrderId" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_productOrderIdArray_&quot; + i);
	  String expString = vars.get(&quot;s_productOrderId_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderId (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productProductId" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_productProductIdArray_&quot; + i);
	  String expString = vars.get(&quot;s_productProductId_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productId (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productImageUrl" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_imageUrlArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_productImageUrl_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): imageUrl (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productTitle" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_titleArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_productTitle_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productTitle (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productPoints" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_pointsArray_&quot; + i);
	  String expString = vars.get(&quot;s_productPoints_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productPoints (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productQuantity" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_quantityArray_&quot; + i);
	  String expString = vars.get(&quot;s_productQuantity_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productQuantity (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: productMerchant" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_merchantArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_productMerchant_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): merchant (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderCreatedAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_createdAtArray_&quot; + i);
	  String expString = vars.get(&quot;s_orderCreatedAt_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): productCreatedAt (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderGift" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_giftArray_&quot; + i);
	  String expString = vars.get(&quot;s_orderGift_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderGift (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderOccasion" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_occasionArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderOccasion_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderOccasion (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderRelationship" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_relationshipArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderRelationship_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderRelationship (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderMessage" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_messageArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderMessage_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderMessage (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderName" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_nameArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderName_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderName (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderAddress1" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_address1Array_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderAddress1_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderAddress1 (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderAddress2" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_address2Array_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderAddress2_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderAddress2 (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderCity" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_cityArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderCity_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderCity (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderCounty" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_countyArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderCounty_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderCounty (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderCountry" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_countryArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderCountry_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderCountry (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderZip" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_zipArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderZip_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderPostcode (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: orderPhone" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;s_productId_#&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_phoneArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_orderPhone_&quot; + i);
	  if(expString == null)
	  {
	    expString = &quot;null&quot;;
	  }
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): orderPhone (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT UNIX_TIMESTAMP(createdAt) *1000, apiAccessKey, message, requestType, success, pointsId, userId, idType, orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 5" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 5</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-OM_GET_ROPH_U_S5|6|7|9|10|11" enabled="false">
        <stringProp name="TestPlan.comments">Getting ORDERED PRODUCT HISTORY for user registered in ePoints.com

WS-OM_ADD_RO_C required

User_1 - S5 - Trying to GET ORDERED PRODUCT HISTORY for INACTIVE user registered in ePoints.com
User_2 - S6 - Trying to GET ORDERED PRODUCT HISTORY for user registered in ePoints.com requested by UNKNOWN client
User_3 - S7 - Trying to GET ORDERED PRODUCT HISTORY for user registered in ePoints.com requested by INACTIVE client
User_4 - S9 - Trying to GET ORDERED PRODUCT HISTORY for user registered in ePoints.com requested with missing APIKEY
User_5 - S10 - Trying to GET ORDERED PRODUCT HISTORY for user registered in ePoints.com requested with missing IDTYPE
User_6 - S11 - Trying to GET ORDERED PRODUCT HISTORY for user registered in ePoints.com requested with INCORRECT DATE RANGE

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">6</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-305670784">REST_EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-1513304392">ASCENDING</stringProp>
            <stringProp name="1225548813">REST_ASCENDING</stringProp>
            <stringProp name="-1966450541">OFFSET</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="72438683">LIMIT</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="-1058984565">START_DATE</stringProp>
            <stringProp name="-52819780">SQL_START_DATE</stringProp>
            <stringProp name="-2053881130">REST_START_DATE</stringProp>
            <stringProp name="-1757720398">END_DATE</stringProp>
            <stringProp name="-1117567965">SQL_END_DATE</stringProp>
            <stringProp name="-2085012291">REST_END_DATE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="570880527">USER_ID</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="-315941698">REQUEST_EXTUSER_ID</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1339181702">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-785767823">${DT_FAR_IN_THE_PAST_STR}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1457205920">${DT_FAR_IN_THE_FUTURE_STR}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1698471075">User with ID=[iatesting1234+user80@gmail.com] is not active</stringProp>
              <stringProp name="1784">80</stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="-1175851807">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="591331403">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
            <collectionProp name="1034175271">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="250872824">Required String parameter &apos;apiKey&apos; is not present</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <collectionProp name="1497136350">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="-984829688">Required String parameter &apos;idType&apos; is not present</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <collectionProp name="689661814">
              <stringProp name="-149474971">iatesting1234+user80@gmail.com</stringProp>
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="1612259659">&amp;idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1165605421">${DT_LAST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1459489208">&amp;startDate=${START_DATE}</stringProp>
              <stringProp name="944250615">${DT_FIRST_DAY_OF_CURRENT_MONTH_EPOCH}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1565593210">&amp;endDate=${END_DATE}</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="243236482"> is greater then To</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-93611697">REDEMPTION_ORDER_HISTORY</stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=0
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-OM_GET_ROPH_U_FAIL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get REDEMPTION ORDER HISTORY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/redemptionOrder/user/${EXTUSER_ID}/?${REST_PARTNER_KEY}${REST_EXTUSER_ID_TYPE}${REST_ASCENDING}${REST_OFFSET}${REST_LIMIT}${REST_START_DATE}${REST_END_DATE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-931331768">${REQUEST_EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 1" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user, userid
SET user.active=1
WHERE user.id=userid.user_id AND userid.userId=?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CNM_ADD_TAG_C_S1|2|3|4|5|6|7|13" enabled="false">
        <stringProp name="TestPlan.comments">Adding pre-defined TAG for client registered in ePoints.com

User_1 - S1 - Adding pre-defined TAG for client registered in ePoints.com with frequency MONTHLY
User_2 - S2 - Adding pre-defined TAG for client registered in ePoints.com with frequency DAILY
User_3 - S3 - Adding pre-defined TAG for client registered in ePoints.com with frequency WEEKLY
User_4 - S4 - Adding pre-defined TAG for client registered in ePoints.com with frequency ONCE
User_5 - S5 - Adding pre-defined TAG for client registered in ePoints.com with NAME that exists in TAG record of another client
User_6 - S6 - Adding pre-defined TAG for client registered in ePoints.com with missing TAG description, image url and auto confirm
User_7 - S7 - Adding pre-defined TAG for client registered in ePoints.com with frequency NONE
User_8 - S13 - Adding pre-defined TAG for client registered in ePoints.com with frequency NONE and 0 CAP points				

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="48170032">TAG_NAME</stringProp>
            <stringProp name="-279121861">REST_TAG_NAME</stringProp>
            <stringProp name="-829740691">TAG_CAP</stringProp>
            <stringProp name="-840298494">REST_TAG_CAP</stringProp>
            <stringProp name="47947805">TAG_FREQ</stringProp>
            <stringProp name="-279344088">REST_TAG_FREQ</stringProp>
            <stringProp name="1489019046">TAG_IMURL</stringProp>
            <stringProp name="-67095045">REST_TAG_IMURL</stringProp>
            <stringProp name="47876150">TAG_DESC</stringProp>
            <stringProp name="-279415743">REST_TAG_DESC</stringProp>
            <stringProp name="47802196">TAG_AUTO</stringProp>
            <stringProp name="-279489697">REST_TAG_AUTO</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1364541076">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="237906090">sample_tag_monthly_S1</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="233249910">http://www.img_monthly_S1.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="1757613068">some_description_S1</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
            </collectionProp>
            <collectionProp name="1820784767">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-45644385">sample_tag_daily_S2</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="64808441">DAILY</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="-585429589">http://www.img_daily_S2.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="1757613069">some_description_S2</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
            </collectionProp>
            <collectionProp name="1523302232">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="1984506500">sample_tag_weekly_S3</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="50547">300</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="-1738378111">WEEKLY</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="160454490">http://www.img_weekly_S3.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="1757613070">some_description_S3</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
            </collectionProp>
            <collectionProp name="-1225041833">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="1676084741">sample_tag_once_S4</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="2430593">ONCE</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="-2114413669">http://www.img_once_S4.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="1757613071">some_description_S4</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
            </collectionProp>
            <collectionProp name="1384993967">
              <stringProp name="-2056905465">p70aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="1676084741">sample_tag_once_S4</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="2430593">ONCE</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="-2114413669">http://www.img_once_S4.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="1757613071">some_description_S4</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
            </collectionProp>
            <collectionProp name="-1638652562">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="1676084743">sample_tag_once_S6</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="53430">600</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="2430593">ONCE</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-1147150879">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="827368945">sample_tag_none_S7</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="54391">700</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="2402104">NONE</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="1081632135">http://www.img_none_S7.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="1757613074">some_description_S7</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="1753">70</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
            </collectionProp>
            <collectionProp name="2031672043">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="49587">201</stringProp>
              <stringProp name="-1601759544">Created</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-121366616">sample_tag_none_S13</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="2402104">NONE</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="-998411468">http://www.img_none_S13.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="-1348569689">some_description_S13</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="48718">130</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CNM_ADD_TAG_C_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get TAG last id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM tag
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_lastTagId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add TAG" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{${REST_TAG_NAME}${REST_TAG_CAP}${REST_TAG_FREQ}${REST_TAG_IMURL}${REST_TAG_DESC}${REST_TAG_AUTO}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tags?${REST_PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tagId</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check TAG last id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM tag
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_lastTagId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-775829409">${tagId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_lastTagId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check TAG record" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT 
  UNIX_TIMESTAMP(tag.createdAt) *1000,
  COALESCE(tag.updatedAt, 0),
  cap,
  frequency,
  tagKey,
  tagStatus,
  partner.accessKey,
  COALESCE(imageUrl, 0) imageUrl,
  COALESCE(tag.description, 0) description,
  COALESCE(tag.autoConfirm, 0) autoConfirm
FROM tag, partner
WHERE
  tag.partnerId = partner.id
  AND tag.id = ?</stringProp>
            <stringProp name="queryArguments">${tagId}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">e_tagCreatedAt, e_tagUpdatedAt, e_tagCap, e_tagFreq, e_tagKey, e_tagStatus, e_tagPartnerKey, e_tagImgUrl, e_tagDesc, e_tagAuto</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_tagCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: updatedAt" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48">0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagUpdatedAt_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagCap" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1710275961">${TAG_CAP}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagCap_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagFrequency" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1475682039">${TAG_FREQ}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagFreq_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1468793002">${TAG_NAME}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagStatus" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1925346054">ACTIVE</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagStatus_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagPartnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagPartnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagImgUrl" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1580243118">${TAG_IMURL}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagImgUrl_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagDesc" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1477903344">${TAG_DESC}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagDesc_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: tagAutoConfirm" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1480195918">${TAG_AUTO}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_tagAuto_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CNM_ADD_TAG_C_S8|9|10|11|12|14|15|16|17|18|19|20" enabled="false">
        <stringProp name="TestPlan.comments">Adding pre-defined TAG for client registered in ePoints.com

User_1 - S8 - (WS-CNM_ADD_TAG_C_S1 required) Trying to add pre-defined TAG for client registered in ePoints.com with same tag name as one existing for the client
User_2 - S9 - Trying to add pre-defined TAG for INACTIVE client registered in ePoints.com				
User_3 - S10 - Trying to add pre-defined TAG for client with UNKNOWN accessKey in ePoints.com
User_4 - S11 - Trying to add pre-defined TAG for client registered in ePoints.com with no NAME/TAGKEY parameter
User_5 - S12 - Trying to add pre-defined TAG for client registered in ePoints.com with empty NAME/TAGKEY parameter
User_6 - S14 - Trying to add pre-defined TAG for client registered in ePoints.com with frequency MONTHLY and 0 CAP points
User_7 - S15 - Trying to add pre-defined TAG for client registered in ePoints.com with no frequency
User_8 - S16 - Trying to add pre-defined TAG for client registered in ePoints.com with empty frequency
User_9 - S17 - Trying to add pre-defined TAG for client registered in ePoints.com with negative CAP points
User_10 - S18 - Trying to add pre-defined TAG for client registered in ePoints.com with empty ACCESSKEY
User_11 - S19 - Trying to add pre-defined TAG for client registered in ePoints.com with no ACCESSKEY
User_12 - S20 - Trying to add pre-defined TAG for client registered in ePoints.com with incorrect frequency

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">12</stringProp>
        <stringProp name="ThreadGroup.ramp_time">6</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="48170032">TAG_NAME</stringProp>
            <stringProp name="-279121861">REST_TAG_NAME</stringProp>
            <stringProp name="-829740691">TAG_CAP</stringProp>
            <stringProp name="-840298494">REST_TAG_CAP</stringProp>
            <stringProp name="47947805">TAG_FREQ</stringProp>
            <stringProp name="-279344088">REST_TAG_FREQ</stringProp>
            <stringProp name="1489019046">TAG_IMURL</stringProp>
            <stringProp name="-67095045">REST_TAG_IMURL</stringProp>
            <stringProp name="47876150">TAG_DESC</stringProp>
            <stringProp name="-279415743">REST_TAG_DESC</stringProp>
            <stringProp name="47802196">TAG_AUTO</stringProp>
            <stringProp name="-279489697">REST_TAG_AUTO</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1610046506">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="237906090">sample_tag_monthly_S1</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="233249910">http://www.img_monthly_S1.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="1757613068">some_description_S1</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
              <stringProp name="1172734376">TAG_ALREADY_EXISTS</stringProp>
              <stringProp name="-1622506092">Tag with name=[sample_tag_monthly_S1] already exists</stringProp>
            </collectionProp>
            <collectionProp name="1618843010">
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="237906098">sample_tag_monthly_S9</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="-1383256385">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;,</stringProp>
              <stringProp name="234173431">http://www.img_monthly_S2.url</stringProp>
              <stringProp name="1093408008">&quot;imageUrl&quot;: &quot;${TAG_IMURL}&quot;,</stringProp>
              <stringProp name="1757613069">some_description_S2</stringProp>
              <stringProp name="1483725030">&quot;description&quot;: &quot;${TAG_DESC}&quot;,</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="-1936390901">&quot;autoConfirm&quot;:${TAG_AUTO}</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
            </collectionProp>
            <collectionProp name="1466073512">
              <stringProp name="-418021806">erased_from_existance</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-1214845754">sample_tag_monthly_S10</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="50547">300</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="399418207">Partner with accessKey=[erased_from_existance] is invalid</stringProp>
            </collectionProp>
            <collectionProp name="-333963817">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-1113966082">Invalid tag name=[null]</stringProp>
            </collectionProp>
            <collectionProp name="-1457989606">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="52469">500</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-2105036123">Invalid tag name=[]</stringProp>
            </collectionProp>
            <collectionProp name="-1994879462">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-1214845750">sample_tag_monthly_S14</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="1018931694">Invalid tag cap=[0]</stringProp>
            </collectionProp>
            <collectionProp name="-1717947903">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-1214845749">sample_tag_monthly_S15</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="48780">150</stringProp>
              <stringProp name="1903145183">&quot;cap&quot;: ${TAG_CAP}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="1485467723">Invalid tag frequency=[null]</stringProp>
            </collectionProp>
            <collectionProp name="1068328261">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-1214845748">sample_tag_monthly_S16</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="48811">160</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="-117012328">nvalid value for parameter frequency = []</stringProp>
            </collectionProp>
            <collectionProp name="-2052209344">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-1214845747">sample_tag_monthly_S17</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="1444">-1</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="1522107288">Invalid tag cap=[-1]</stringProp>
            </collectionProp>
            <collectionProp name="1603050064">
              <stringProp name="48">0</stringProp>
              <stringProp name="1855596983">CREATE_TAG</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-800686344">apiKey=</stringProp>
              <stringProp name="-1214845746">sample_tag_monthly_S18</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="48873">180</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="-1310000741">Partner with accessKey=[] is invalid</stringProp>
            </collectionProp>
            <collectionProp name="2094016839">
              <stringProp name="48">0</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1214845745">sample_tag_monthly_S19</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="48904">190</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1954618349">MONTHLY</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="-812877002">Required String parameter &apos;apiKey&apos; is not present.</stringProp>
            </collectionProp>
            <collectionProp name="2028731059">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-1214845723">sample_tag_monthly_S20</stringProp>
              <stringProp name="497963395">&quot;tagName&quot;: &quot;${TAG_NAME}&quot;,</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="-1132041427">&quot;cap&quot;: ${TAG_CAP},</stringProp>
              <stringProp name="1373210501">INCORRECT</stringProp>
              <stringProp name="93926157">&quot;frequency&quot;: &quot;${TAG_FREQ}&quot;</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="1254256550">Invalid value for parameter frequency = [INCORRECT]</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CNM_ADD_TAG_C_FAIL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get TAG last id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM tag
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">s_lastTagId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: add TAG" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{${REST_TAG_NAME}${REST_TAG_CAP}${REST_TAG_FREQ}${REST_TAG_IMURL}${REST_TAG_DESC}${REST_TAG_AUTO}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tags?${REST_PARTNER_KEY}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get tagId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tagId</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check TAG last id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT id
FROM tag
ORDER BY id DESC
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_lastTagId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1222623791">${s_lastTagId_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_lastTagId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestMsg_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CNM_GET_SNV_U_S1|2|3" enabled="false">
        <stringProp name="TestPlan.comments">Getting sites not visited

User_1 - S1 - Getting not visited sites by user registered in ePoints.com providing all possible parameters
User_2 - S2 - Getting not visited sites by user registered in ePoints.com with missing offset/limit/random parameters
User_3 - S3 - Getting not visited sites by user registered in ePoints.com limited to 5 records starting from third one

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-305670784">REST_EXTUSER_ID_TYPE</stringProp>
            <stringProp name="72438683">LIMIT</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="-1966450541">OFFSET</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="-1884956477">RANDOM</stringProp>
            <stringProp name="-499823730">REST_RANDOM</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1046097272">
              <stringProp name="-2085534616">p60aKey</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="1577637729">&amp;limit=${LIMIT}</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-5974289">&amp;offset=${OFFSET}</stringProp>
              <stringProp name="97196323">false</stringProp>
              <stringProp name="-912891665">&amp;random=${RANDOM}</stringProp>
            </collectionProp>
            <collectionProp name="715028138">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-2090597236">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="53">5</stringProp>
              <stringProp name="1577637729">&amp;limit=${LIMIT}</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="-5974289">&amp;offset=${OFFSET}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-2017979489">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="49586">200</stringProp>
              <stringProp name="2524">OK</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CNM_GET_SNV_U_PASS" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get CLIENTS NOT VISITED count all" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT
  COUNT(id)
FROM
  partner
WHERE
  id NOT IN
  (SELECT DISTINCT
    partnerId
  FROM
    points ps, user u, userid uid
  WHERE
    ps.userId = u.id
    AND u.id = uid.user_id
    AND uid.userId = ?)
</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">s_partnersAllCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get CLIENTS NOT VISITED count limited" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(pid) partner_limited_count
FROM 
(
SELECT
  id AS pid
FROM
  partner
WHERE
  id NOT IN
  (SELECT DISTINCT
    partnerId
  FROM
    points ps, user u, userid uid
  WHERE
    ps.userId = u.id
    AND u.id = uid.user_id
    AND uid.userId = ?)
  LIMIT ?,?
) partner;



</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID},${OFFSET},${LIMIT}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR, INTEGER, INTEGER</stringProp>
            <stringProp name="variableNames">s_partnersLimitedCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get CLIENTS NOT VISITED details limited" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT
  id,
  name,
  COALESCE(siteUrl, &quot;&quot;) siteUrl,
  COALESCE(description, &quot;&quot;) description
FROM
  partner
WHERE
  id NOT IN
  (SELECT DISTINCT
    partnerId
  FROM
    points ps, user u, userid uid
  WHERE
    ps.userId = u.id
    AND u.id = uid.user_id
    AND uid.userId = ?)
ORDER BY id ASC
LIMIT ?,?</stringProp>
            <stringProp name="queryArguments">${EXTUSER_ID},${OFFSET},${LIMIT}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR, INTEGER, INTEGER</stringProp>
            <stringProp name="variableNames">s_partnerId, s_partnerName, s_partnerSiteUrl, s_partnerDesc</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get SITES NOT VISITED" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/partnersNotVisited?${REST_EXTUSER_ID_TYPE}${REST_PARTNER_KEY}${REST_LIMIT}${REST_OFFSET}${REST_RANDOM}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get totalResults" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_totalResults</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalResults&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get searchResultsCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_searchResultsCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;searchResultsCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get partnerNameArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_partnerNameArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get partnerSiteUrlArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_partnerSiteUrlArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;siteUrl&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get partnerDescArray" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">m_partnerDescArray</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;description&quot;:(&quot;(.*?)&quot;|(.*?))</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: totalResults count" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="34990191">${s_partnersAllCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_totalResults</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: searchResultsCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1113693592">${s_partnersLimitedCount_1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">m_searchResultsCount</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partnerName" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_partnerNameArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_partnerNameArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_partnerName_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): partnerName (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partnerSiteUrl" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_partnerNameArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_partnerSiteUrlArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_partnerSiteUrl_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): partnerSiteUrl (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: partnerDesc" enabled="true">
              <stringProp name="BeanShellAssertion.query">
	Integer count = Integer.parseInt(vars.get(&quot;m_partnerNameArray_matchNr&quot;));
	
	for(int i=1; i&lt;=count; i++)
	{
	  String resultString = vars.get(&quot;m_partnerDescArray_&quot; + i);
	  resultString = resultString.replace(&quot;\&quot;&quot;, &quot;&quot;);

	  String expString = vars.get(&quot;s_partnerDesc_&quot; + i);
	  
	  if (resultString.equals(expString))
	  {
		Failure = false;
	  }
	  else {
		Failure = true;
		FailureMessage = &quot;result (&quot; + i + &quot;): partnerDescriptionl (&quot; + resultString + &quot;) different from DB (&quot; + expString + &quot;)&quot;;
		print (FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
		break;
	  }
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT UNIX_TIMESTAMP(createdAt) *1000, apiAccessKey, message, requestType, success, pointsId, userId, idType, orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WS-CNM_GET_SNV_U_S4|5|6|7|8|9|10" enabled="false">
        <stringProp name="TestPlan.comments">Getting sites not visited

User_1 - S4 - Getting not visited sites by user registered in ePoints.com requested with missing client&apos;s ACCESSKEY
User_2 - S5 - Getting not visited sites by user registered in ePoints.com requested with empty client&apos;s ACCESSKEY
User_3 - S6 - Getting not visited sites by user registered in ePoints.com requested by INACTIVE client
User_4 - S7 - Getting not visited sites by user registered in ePoints.com requested with missing USERID TYPE
User_5 - S8 - Getting not visited sites by user registered in ePoints.com requested with empty USERID TYPE
User_6 - S9 - Trying to GET not visited sites by user registered in ePoints.com who is now INACTIVE/VERIFIED
User_7 - S10 - Trying to GET not visited sites by user registered in ePoints.com who is ACTIVE/UNVERIFIED

</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">7</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1369389771000</longProp>
        <longProp name="ThreadGroup.end_time">1369389771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1166006744">PARTNER_KEY</stringProp>
            <stringProp name="-644845814">REQUEST_TYPE</stringProp>
            <stringProp name="527096619">RESPONSE_CODE</stringProp>
            <stringProp name="-537176477">RESPONSE_MSG</stringProp>
            <stringProp name="-1943029187">REST_PARTNER_KEY</stringProp>
            <stringProp name="-537169582">RESPONSE_TXT</stringProp>
            <stringProp name="-990639727">REQUEST_MSG</stringProp>
            <stringProp name="121327854">EXTUSER_ID</stringProp>
            <stringProp name="1692029931">EXTUSER_ID_TYPE</stringProp>
            <stringProp name="-305670784">REST_EXTUSER_ID_TYPE</stringProp>
            <stringProp name="72438683">LIMIT</stringProp>
            <stringProp name="-437068944">REST_LIMIT</stringProp>
            <stringProp name="-1966450541">OFFSET</stringProp>
            <stringProp name="-581317794">REST_OFFSET</stringProp>
            <stringProp name="-1884956477">RANDOM</stringProp>
            <stringProp name="-499823730">REST_RANDOM</stringProp>
            <stringProp name="-315941698">REQUEST_EXTUSER_ID</stringProp>
            <stringProp name="-1493079525">REQUEST_EXTUSER_ID_TYPE</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-45927175">
              <stringProp name="48">0</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="-812877002">Required String parameter &apos;apiKey&apos; is not present.</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="1577637729">&amp;limit=${LIMIT}</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-5974289">&amp;offset=${OFFSET}</stringProp>
              <stringProp name="97196323">false</stringProp>
              <stringProp name="-912891665">&amp;random=${RANDOM}</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
            </collectionProp>
            <collectionProp name="1971426417">
              <stringProp name="48">0</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="1001596946">&amp;apiKey=</stringProp>
              <stringProp name="1281345088">INVALID_PARTNER</stringProp>
              <stringProp name="-1310000741">Partner with accessKey=[] is invalid</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="1507423">1000</stringProp>
              <stringProp name="1577637729">&amp;limit=${LIMIT}</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="-5974289">&amp;offset=${OFFSET}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
            </collectionProp>
            <collectionProp name="1757805805">
              <stringProp name="-1037514238">p4aKey</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="51511">403</stringProp>
              <stringProp name="-787432487">Forbidden</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="912631024">PARTNER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="1926147533">Partner with accessKey=[p4aKey] is not active</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
            </collectionProp>
            <collectionProp name="430131216">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="433141802">UNKNOWN</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-632682844">apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="1096015545">REQUIRED_PARAMETER_NOT_PRESENT</stringProp>
              <stringProp name="-464949210">Required String parameter &apos;idType&apos; is not present.</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <collectionProp name="1880227049">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-1522868018">INVALID_ARGUMENTS</stringProp>
              <stringProp name="293845">Parameter idType=[null] is invalid</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <collectionProp name="-1791661861">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-305043757">USER_IS_NOT_ACTIVE</stringProp>
              <stringProp name="-1673685498">User with userId=[user60_id1@test.com] is not active</stringProp>
              <stringProp name="1120889577">user60_id1@test.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
            </collectionProp>
            <collectionProp name="-1010240337">
              <stringProp name="-2028276314">p80aKey</stringProp>
              <stringProp name="-647118923">GET_NOT_VISITED_PARTNERS</stringProp>
              <stringProp name="51508">400</stringProp>
              <stringProp name="2117236020">Bad Request</stringProp>
              <stringProp name="-769410498">&amp;apiKey=${PARTNER_KEY}</stringProp>
              <stringProp name="-1427684523">USER_IS_NOT_VERIFIED</stringProp>
              <stringProp name="1939095575">User with userId=[iatesting1234+user72@gmail.com] is not verified</stringProp>
              <stringProp name="422506888">iatesting1234+user72@gmail.com</stringProp>
              <stringProp name="66081660">EMAIL</stringProp>
              <stringProp name="433506993">idType=${EXTUSER_ID_TYPE}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="485895192">${EXTUSER_ID}</stringProp>
              <stringProp name="-1668177719">${EXTUSER_ID_TYPE}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 6" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 6</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deactivate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user u, userid uid
SET u.active = 0
WHERE
  uid.user_id = u.id
  AND uid.userId = ?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS-CNM_GET_SNV_U_PASS" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REST: get SITES NOT VISITED" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/users/${EXTUSER_ID}/partnersNotVisited?${REST_EXTUSER_ID_TYPE}${REST_PARTNER_KEY}${REST_LIMIT}${REST_OFFSET}${REST_RANDOM}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1293956279">${RESPONSE_CODE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205487363">${RESPONSE_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: response headers" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1205701108">${RESPONSE_TXT}</stringProp>
                <stringProp name="900834147">${REQUEST_MSG}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check request table" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT 
  id, 
  UNIX_TIMESTAMP(createdAt) *1000 createdAt,
  COALESCE(
    CASE
      WHEN apiAccessKey=&quot;&quot; THEN null
    ELSE
      apiAccessKey
    END
, 0) apiAccessKey, 
  message, 
  requestType, 
  success, 
  pointsId, 
  COALESCE(
    CASE
      WHEN userId=&quot;&quot; THEN null
    ELSE
      userId
    END
, 0) userId, 
  COALESCE(
    CASE
      WHEN idType=&quot;&quot; THEN null
    ELSE
      idType
    END
, 0) idType,
  orderId
FROM request
ORDER BY id DESC
LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">e_requestId, e_requestCreatedAt, e_partnerKey,e_requestMsg,e_requestType,e_requestSuccess,e_requestPointsId, e_requestUserId, e_requestUserIdType, e_requestOrderId</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BS Assert: createdAt" enabled="true">
              <stringProp name="BeanShellAssertion.query">Long dt_dbCreatedAt = Long.parseLong(vars.get(&quot;e_requestCreatedAt_1&quot;));
Long dt_current  = new Date().getTime();

// range
Long long_range  = 5000;

if (dt_dbCreatedAt &lt;= dt_current + long_range &amp;&amp; dt_dbCreatedAt &gt;= dt_current - long_range)
{
	Failure = false;
}
else {
	Failure = true;
	FailureMessage = &quot;createdAt difference: &quot; + Math.abs(dt_current - dt_dbCreatedAt) + &quot;, should be no more than: &quot; + long_range;
	print (FailureMessage);   // this goes to stdout
	log.warn(FailureMessage); // this goes to the JMeter log file
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: partnerKey" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-240576084">${PARTNER_KEY}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_partnerKey_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: request type" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2132262084">${REQUEST_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="97196323">false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestSuccess_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-931331768">${REQUEST_EXTUSER_ID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserId_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: userIdType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-17790567">${REQUEST_EXTUSER_ID_TYPE}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">e_requestUserIdType_1</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tearDown" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User == 4" enabled="true">
            <stringProp name="IfController.condition">${__threadNum} == 6</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activate user" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">UPDATE user u, userid uid
SET u.active = 1
WHERE
  uid.user_id = u.id
  AND uid.userId = ?;</stringProp>
              <stringProp name="queryArguments">${EXTUSER_ID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
